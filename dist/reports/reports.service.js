"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils/utils");
const dateutils_1 = require("../utils/dateutils");
const common_1 = require("@nestjs/common");
const mongoose_1 = require("mongoose");
const mongoose_2 = require("@nestjs/mongoose");
const logger_1 = require("../service/logger");
let ReportsService = class ReportsService {
    constructor(logger, mongodbModel, departmentsModel, diagnosesModel, inventorystoresModel, itemmastersModel, ordercategoriesModel, orderitemsModel, organisationimagesModel, organisationsModel, patientbillsModel, patientproceduresModel, patientsModel, patientvisitsModel, problemsModel, proceduresModel, referencevaluesModel, usersModel, bedsModel, ipfillordersModel, wardsModel, patientordersModel, billinggroupsModel, tpasModel, tariffsModel, payorsModel, areasModel, statesModel, citiesModel, countriesModel, allergiesModel, labresultsModel, depositsModel, goodsreceivesModel, StockadjustsModel, StocktransfersModel, WelfaresModel, welfareadjustmentrequestsModel, DispensereturnsModel, AppointmentschedulesModel, DrugmastersModel, DruggroupsModel, DruggenericModel, TranslationsModel, StockdispensesModel, StockledgersModel, StockrequestsModel, ManufacturedetailsModel, MrdcodingsModel, MrdfoldersModel, ReportconfigurationsModel, ReporttemplatesModel, PatientchargecodesModel, PatientformsModel, PatientformdetailsModel, OrdersetsModel, printerconfigurationsModel, CreditnotesModel) {
        this.logger = logger;
        this.mongodbModel = mongodbModel;
        this.departmentsModel = departmentsModel;
        this.diagnosesModel = diagnosesModel;
        this.inventorystoresModel = inventorystoresModel;
        this.itemmastersModel = itemmastersModel;
        this.ordercategoriesModel = ordercategoriesModel;
        this.orderitemsModel = orderitemsModel;
        this.organisationimagesModel = organisationimagesModel;
        this.organisationsModel = organisationsModel;
        this.patientbillsModel = patientbillsModel;
        this.patientproceduresModel = patientproceduresModel;
        this.patientsModel = patientsModel;
        this.patientvisitsModel = patientvisitsModel;
        this.problemsModel = problemsModel;
        this.proceduresModel = proceduresModel;
        this.referencevaluesModel = referencevaluesModel;
        this.usersModel = usersModel;
        this.bedsModel = bedsModel;
        this.ipfillordersModel = ipfillordersModel;
        this.wardsModel = wardsModel;
        this.patientordersModel = patientordersModel;
        this.billinggroupsModel = billinggroupsModel;
        this.tpasModel = tpasModel;
        this.tariffsModel = tariffsModel;
        this.payorsModel = payorsModel;
        this.areasModel = areasModel;
        this.statesModel = statesModel;
        this.citiesModel = citiesModel;
        this.countriesModel = countriesModel;
        this.allergiesModel = allergiesModel;
        this.labresultsModel = labresultsModel;
        this.depositsModel = depositsModel;
        this.goodsreceivesModel = goodsreceivesModel;
        this.StockadjustsModel = StockadjustsModel;
        this.StocktransfersModel = StocktransfersModel;
        this.WelfaresModel = WelfaresModel;
        this.welfareadjustmentrequestsModel = welfareadjustmentrequestsModel;
        this.DispensereturnsModel = DispensereturnsModel;
        this.AppointmentschedulesModel = AppointmentschedulesModel;
        this.DrugmastersModel = DrugmastersModel;
        this.DruggroupsModel = DruggroupsModel;
        this.DruggenericModel = DruggenericModel;
        this.TranslationsModel = TranslationsModel;
        this.StockdispensesModel = StockdispensesModel;
        this.StockledgersModel = StockledgersModel;
        this.StockrequestsModel = StockrequestsModel;
        this.ManufacturedetailsModel = ManufacturedetailsModel;
        this.MrdcodingsModel = MrdcodingsModel;
        this.MrdfoldersModel = MrdfoldersModel;
        this.ReportconfigurationsModel = ReportconfigurationsModel;
        this.ReporttemplatesModel = ReporttemplatesModel;
        this.PatientchargecodesModel = PatientchargecodesModel;
        this.PatientformsModel = PatientformsModel;
        this.PatientformdetailsModel = PatientformdetailsModel;
        this.OrdersetsModel = OrdersetsModel;
        this.printerconfigurationsModel = printerconfigurationsModel;
        this.CreditnotesModel = CreditnotesModel;
    }
    findRTCommon2(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisit = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            'startdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'visitid': { $regex: /I/ }
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $addFields: { "bed_last": { $arrayElemAt: ["$bedoccupancy.beduid", -1] } } },
                    { $lookup: { from: "beds", localField: "bed_last", foreignField: "_id", as: "beds" } },
                    { $unwind: { path: "$beds", preserveNullAndEmptyArrays: true } },
                    { $addFields: { "ward_last": { $arrayElemAt: ["$bedoccupancy.warduid", -1] } } },
                    { $lookup: { from: "wards", localField: "ward_last", foreignField: "_id", as: "wards" } },
                    { $unwind: { path: "$wards", preserveNullAndEmptyArrays: true } },
                    { $addFields: { visitcareproviders_index: { $indexOfArray: ['$visitcareproviders.isprimarycareprovider', true] } } },
                    { $addFields: { visitcareproviders_lookup: { $arrayElemAt: ["$visitcareproviders.careprovideruid", { $cond: { if: { $eq: ["$visitcareproviders_index", -1] }, then: null, else: "$visitcareproviders_index" } }] }, } },
                    { $lookup: { from: "users", localField: "visitcareproviders_lookup", foreignField: "_id", as: "users" } },
                    { $unwind: { path: "$users", preserveNullAndEmptyArrays: true } },
                    { $addFields: { "payor_first": { $arrayElemAt: ["$visitpayors.payoruid", 0] } } },
                    { $lookup: { from: "payors", localField: "payor_first", foreignField: "_id", as: "payors" } },
                    { $unwind: { path: "$payors", preserveNullAndEmptyArrays: true } },
                    { $addFields: { year: { $subtract: [{ $toInt: { $substr: [{ $add: [{ $year: { "date": new Date(), "timezone": "+07:00" } }, 543] }, 0, 4] }, }, { $toInt: { $substr: [{ $add: [{ $year: { "date": "$patients.dateofbirth", "timezone": "+07:00" } }, 543] }, 0, 4] } }] } } },
                    { $addFields: { month: { $cond: { if: { $lt: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 0] }, then: { $add: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 11] }, else: { $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] } } } } },
                    { $addFields: { date: { $subtract: [{ $toInt: { $dateToString: { format: "%d", date: new Date(), timezone: "+07:00", onNull: "-" } } }, { $toInt: { $dateToString: { format: "%d", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } } }] } } },
                    { $addFields: { month1name: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }, } },
                    { $addFields: { Month1nameTH: { $let: { vars: { monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฏาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'] }, in: { $arrayElemAt: ['$$monthsInString', '$month1name'] } } } } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.nationalityuid", foreignField: "_id", as: "nationality" } },
                    { $unwind: { path: "$nationality", preserveNullAndEmptyArrays: true } },
                    { $addFields: { NOW: { $toDate: { $dateToString: { format: "%Y-%m-%d", date: new Date(), timezone: "+07:00" } } } } },
                    { $addFields: { dateNOW: { $dayOfMonth: '$NOW' } } },
                    { $addFields: { DOB: { $toDate: { $dateToString: { format: "%Y-%m-%d", date: "$patients.dateofbirth", timezone: "+07:00" } } } } },
                    { $addFields: { dateDOB: { $dayOfMonth: '$DOB' } } },
                    {
                        $addFields: {
                            LD: {
                                $cond: {
                                    if: {
                                        $and: [
                                            { "$ne": [{ $month: '$NOW' }, 3] },
                                            { $gt: ['$dateDOB', '$dateNOW'] },
                                            {
                                                $or: [{ "$eq": [{ $month: '$DOB' }, 1] }, { "$eq": [{ $month: '$DOB' }, 3] }, { "$eq": [{ $month: '$DOB' }, 5] },
                                                    { "$eq": [{ $month: '$DOB' }, 7] }, { "$eq": [{ $month: '$DOB' }, 8] }, { "$eq": [{ $month: '$DOB' }, 10] },
                                                    { "$eq": [{ $month: '$DOB' }, 12] }]
                                            }
                                        ]
                                    },
                                    then: 31, else: {
                                        $cond: {
                                            if: {
                                                $and: [
                                                    { "$eq": [{ $month: '$NOW' }, 3] },
                                                    { $gt: ['$dateDOB', '$dateNOW'] },
                                                    { "$eq": [{ $toDate: { $concat: [{ $toString: { $year: '$NOW' } }, '-12-31'] } }, 365] }
                                                ]
                                            },
                                            then: 28, else: {
                                                $cond: {
                                                    if: {
                                                        $and: [
                                                            { "$eq": [{ $month: '$NOW' }, 3] },
                                                            { $gt: ['$dateDOB', '$dateNOW'] },
                                                            { "$eq": [{ $toDate: { $concat: [{ $toString: { $year: '$NOW' } }, '-12-31'] } }, 366] }
                                                        ]
                                                    },
                                                    then: 29, else: 30
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    { $addFields: { year0: { $subtract: [{ $year: '$NOW' }, { $year: "$DOB" }] } } },
                    { $addFields: { month0: { $subtract: [{ $month: '$NOW' }, { $month: "$DOB" }] } } },
                    { $addFields: { date0: { $subtract: [{ $dayOfMonth: '$NOW' }, { $dayOfMonth: "$DOB" }] } } },
                    { $addFields: { year1: '$year0' } },
                    { $addFields: { month1: { $cond: [{ $lt: ["$date0", 0] }, { $subtract: ["$month0", 1] }, "$month0"] }, } },
                    { $addFields: { date1: { $cond: [{ $lt: ["$date0", 0] }, { $add: ['$LD', "$date0"] }, "$date0"] } } },
                    { $addFields: { year2: { $cond: [{ $lt: ["$month1", 0] }, { $subtract: ["$year1", 1] }, "$year1"] } } },
                    { $addFields: { month2: { $cond: [{ $lt: ["$month1", 0] }, { $add: [12, "$month1"] }, "$month1"] } } },
                    { $addFields: { date2: '$date1' } },
                    {
                        $project: {
                            nationality: { $ifNull: ["$nationality.valuedescription", ""] },
                            orguidName: { $ifNull: ['$organisations.name', '-'] },
                            HN: "$patients.mrn",
                            patientname: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                        }
                                    }
                                }
                            },
                            patientnameEN: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            patientnameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            EN: "$visitid",
                            TYPE: { $cond: { if: { $lte: [{ $divide: [{ $subtract: [new Date(), "$patients.createdat"] }, (1000 * 3600 * 24)] }, 2] }, then: 'NEW', else: 'OLD' } },
                            AgeString: { $concat: [{ $toString: '$year2' }, ' ปี ', { $toString: '$month2' }, ' เดือน ', { $toString: '$date2' }, ' วัน'] },
                            AgeStringE: { $concat: [{ $toString: '$year2' }, ' Y ', { $toString: '$month2' }, ' M ', { $toString: '$date2' }, ' D'] },
                            DOB: { $dateToString: { format: "%d/%m/%Y", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } },
                            admissionDttm: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            BedName: { $ifNull: ["$beds.name", "-"] },
                            LocationName: { $ifNull: ["$wards.name", "-"] },
                            Payorname: { $ifNull: ["$payors.name", "-"] },
                            CareProviderName: { $concat: [{ $ifNull: ["$users.name", "-"] }, " ", { $ifNull: ["$users.lastname", ""] }] },
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    }
                ])
                    .exec();
                result = resultpatientvisit;
            }
            catch (error) {
                this.logger.error('findRTCommon2 error:', error);
            }
            return result;
        });
    }
    findRTCommon3(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisit = yield this.patientvisitsModel.aggregate([
                    {
                        $unwind: { path: "$visitcareproviders", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            'startdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'visitidbeforeconvert': { $regex: /E/ },
                            'visitid': { $regex: /I/ },
                            'visitcareproviders.isprimarycareprovider': true
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "visitstatusuid",
                            foreignField: "_id",
                            as: "referencevaluesV"
                        }
                    },
                    {
                        $match: {
                            "referencevaluesV.valuedescription": { $ne: "Cancelled" }
                        },
                    },
                    {
                        $unwind: { path: "$referencevaluesV", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "visitcareproviders.careprovideruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "diagnoses",
                            localField: "patients._id",
                            foreignField: "patientuid",
                            as: "diagnoses"
                        }
                    },
                    {
                        $unwind: { path: "$diagnoses", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$diagnoses.diagnosis", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: "problems",
                            localField: "diagnoses.diagnosis.problemuid",
                            foreignField: "_id",
                            as: "problems"
                        }
                    },
                    {
                        $unwind: { path: "$problems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "visitcareproviders.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            TYPE: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } },
                            HN: "$patients.mrn",
                            patientname: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            EN: "$visitid",
                            ProblemName: { $ifNull: ["$problems.description", "-"] },
                            CareProviderName: { $concat: [{ $ifNull: ["$users.name", "-"] }, " ", { $ifNull: ["$users.lastname", ""] }] },
                            RequestLocation: { $cond: { if: { $eq: ["$departments.name", "Nursery (DEPARTMENT)"] }, then: "Nursery", else: "ERD" } },
                            admissionDttm: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            LocationName: { $ifNull: ["$wards.name", "-"] },
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    }
                ])
                    .exec();
                result = resultpatientvisit;
            }
            catch (error) {
                this.logger.error('findRTCommon3 error:', error);
            }
            return result;
        });
    }
    findRTCommon8(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisit = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            'startdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'visitid': { $regex: /I/ }
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "diagnoses",
                            localField: "patients._id",
                            foreignField: "patientuid",
                            as: "diagnoses"
                        }
                    },
                    {
                        $unwind: { path: "$diagnoses", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "problems",
                            localField: "diagnoses.diagnosis.problemuid",
                            foreignField: "_id",
                            as: "problems"
                        }
                    },
                    {
                        $unwind: { path: "$problems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientbills",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientbills"
                        }
                    },
                    {
                        $match: {
                            'patientbills.statusflag': "A",
                            'patientbills.isrefund': false
                        }
                    },
                    {
                        $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "visitpayors.tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orrecords",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "orrecords"
                        }
                    },
                    {
                        $unwind: { path: "$orrecords", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "procedures",
                            localField: "orrecords.procedures.procedureuid",
                            foreignField: "_id",
                            as: "procedures"
                        }
                    },
                    {
                        $unwind: { path: "$procedures", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "orrecords.bodysites",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            HN: "$patients.mrn",
                            EN: "$visitid",
                            NamePatient: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            MainDiag: { $ifNull: ["$problems.description", "-"] },
                            DateReg: { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            EndDate: { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } },
                            LOS: { $ifNull: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, "-"] },
                            ICDS: { $concat: [{ $ifNull: ["$procedures.name", "-"] }, " ", { $ifNull: ["$referencevalues2.valuedescription", "-"] }] },
                            Payor: { $ifNull: ["$tpas.name", "-"] },
                            NetAmountByVia: "$patientbills.totalbillamount",
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    }
                ])
                    .exec();
                result = resultpatientvisit;
            }
            catch (error) {
                this.logger.error('findRTCommon8 error:', error);
            }
            return result;
        });
    }
    findRTCommon17main(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let Cashier = 'All';
            let user = { $match: {} };
            if (req.usersuid != '') {
                user = {
                    $match: {
                        'useruid': new mongoose_1.Types.ObjectId(req.usersuid),
                    }
                };
                Cashier = "$results.Cashier";
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientbills = yield this.patientbillsModel.aggregate([
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'isrefund': false,
                            'iscancelled': false
                        }
                    },
                    {
                        $match: {
                            $or: [
                                { 'sequencenumber': { $regex: /R/ } },
                                { 'sequencenumber': { $regex: /S/ } }
                            ]
                        }
                    },
                    user,
                    { $unwind: { path: "$paymentdetails", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            "paymentdetails.iscancelled": { $ne: true }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "paymentdetails.paymentmodeuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    { $match: { "paymentdetails.amount": { $gt: 0 }, "paymentdetails.sequencenumber": { $not: /DC/ } } },
                    {
                        $project: {
                            "results": {
                                SumIpdCash: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "I"] },
                                                    { $eq: ["$referencevalues.valuedescription", "Cash"] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumIpdCredit: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "I"] },
                                                    { $eq: ["$referencevalues.valuedescription", "Credit Card"] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumIpdOnline: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "I"] },
                                                    { $eq: ["$referencevalues.valuedescription", "Online Transfer"] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumIpdEPay: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "I"] },
                                                    { $eq: ["$referencevalues.valuedescription", "E-Payment"] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumIpdQR: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "I"] },
                                                    { $eq: ["$referencevalues.valuedescription", "QR Code"] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumIpdDebit: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "I"] },
                                                    { $eq: ["$referencevalues.valuedescription", "Debit Card"] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumIpdChequeAll: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "I"] },
                                                    { $or: [{ $eq: ["$referencevalues.valuedescription", "Cheque"] }, { $eq: ["$referencevalues.valuedescription", "Cashier Cheque"] }] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumOpdCash: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "O"] },
                                                    { $eq: ["$referencevalues.valuedescription", "Cash"] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumOpdCredit: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "O"] },
                                                    { $eq: ["$referencevalues.valuedescription", "Credit Card"] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumOpdOnline: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "O"] },
                                                    { $eq: ["$referencevalues.valuedescription", "Online Transfer"] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumOpdEPay: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "O"] },
                                                    { $eq: ["$referencevalues.valuedescription", "E-Payment"] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumOpdQR: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "O"] },
                                                    { $eq: ["$referencevalues.valuedescription", "QR Code"] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumOpdDebit: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "O"] },
                                                    { $eq: ["$referencevalues.valuedescription", "Debit Card"] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                                SumOpdChequeAll: {
                                    $toInt: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "O"] },
                                                    { $or: [{ $eq: ["$referencevalues.valuedescription", "Cheque"] }, { $eq: ["$referencevalues.valuedescription", "Cashier Cheque"] }] }]
                                            }, then: "$paymentdetails.amount", else: 0
                                        }
                                    }
                                },
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                Cashier: Cashier,
                                user: _user.name,
                                startdate: dateutils_1.default.convertISOtoDatetimeSlashPlusHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                                enddate: dateutils_1.default.convertISOtoDatetimeSlashPlusHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                            },
                            SumOpdCash: { $sum: "$results.SumOpdCash" },
                            SumOpdCredit: { $sum: "$results.SumOpdCredit" },
                            SumOpdOnline: { $sum: "$results.SumOpdOnline" },
                            SumOpdDebit: { $sum: "$results.SumOpdDebit" },
                            SumOpdEPay: { $sum: "$results.SumOpdEPay" },
                            SumOpdQR: { $sum: "$results.SumOpdQR" },
                            SumOpdChequeAll: { $sum: "$results.SumOpdChequeAll" },
                            SumIpdCash: { $sum: "$results.SumIpdCash" },
                            SumIpdCredit: { $sum: "$results.SumIpdCredit" },
                            SumIpdOnline: { $sum: "$results.SumIpdOnline" },
                            SumIpdDebit: { $sum: "$results.SumIpdDebit" },
                            SumIpdEPay: { $sum: "$results.SumIpdEPay" },
                            SumIpdQR: { $sum: "$results.SumIpdQR" },
                            SumIpdChequeAll: { $sum: "$results.SumIpdChequeAll" }
                        }
                    },
                    {
                        $addFields: {
                            SumOpd: { $sum: ['$SumOpdCash', '$SumOpdCredit', '$SumOpdOnline', '$SumOpdDebit', '$SumOpdChequeAll', '$SumOpdQR', '$SumOpdEPay'] },
                        }
                    },
                    {
                        $addFields: {
                            SumIpd: { $sum: ['$SumIpdCash', '$SumIpdCredit', '$SumIpdOnline', '$SumIpdDebit', '$SumIpdChequeAll', '$SumIpdQR', '$SumIpdEPay'] },
                        }
                    }
                ])
                    .exec();
                const resultpatientbills_not_nodata = [{
                        _id: {
                            'Cashier': '',
                            'user': _user.name,
                            'startdate': dateutils_1.default.convertISOtoDatetimeSlashPlusHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            'enddate': dateutils_1.default.convertISOtoDatetimeSlashPlusHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        },
                        SumOpdCash: 0,
                        SumOpdCredit: 0,
                        SumOpdOnline: 0,
                        SumOpdDebit: 0,
                        SumOpdQR: 0,
                        SumOpdEPay: 0,
                        SumOpdChequeAll: 0,
                        SumIpdCash: 0,
                        SumIpdCredit: 0,
                        SumIpdOnline: 0,
                        SumIpdDebit: 0,
                        SumIpdQR: 0,
                        SumIpdEPay: 0,
                        SumIpdChequeAll: 0,
                        SumIpd: 0,
                        SumOpd: 0
                    }];
                this.logger.debug('resultpatientbills_not_nodata : ', resultpatientbills_not_nodata);
                if (resultpatientbills[0] === undefined) {
                    result = resultpatientbills_not_nodata;
                }
                else {
                    result = resultpatientbills;
                }
            }
            catch (error) {
                this.logger.error('findRTCommon17main error:', error);
            }
            return result;
        });
    }
    findRTCommon17sub1(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let user = { $match: {} };
            if (req.usersuid != '') {
                user =
                    { $match: { $or: [{ 'useruid': new mongoose_1.Types.ObjectId(req.usersuid) }, { 'cancelrefundbyuseruid': new mongoose_1.Types.ObjectId(req.usersuid) },] } };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientbills = yield this.patientbillsModel.aggregate([
                    {
                        $match: {
                            $or: [
                                {
                                    'billdate': {
                                        $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                        $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                                    }
                                },
                                {
                                    'canceldate': {
                                        $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                        $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                                    }
                                },
                            ],
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'isrefund': false
                        }
                    },
                    {
                        $match: {
                            $or: [
                                { 'sequencenumber': { $regex: /R/ } },
                                { 'sequencenumber': { $regex: /S/ } }
                            ]
                        }
                    },
                    user,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "users", localField: "cancelrefundbyuseruid", foreignField: "_id", as: "userscancel" } },
                    { $unwind: { path: "$userscancel", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    {
                        $unwind: { path: "$paymentdetails", preserveNullAndEmptyArrays: true }
                    },
                    { $unwind: { path: "$paymentdetails.otherpaymentdetails", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$paymentdetails.carddetails", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "paymentdetails.otherpaymentdetails.banknameuid", foreignField: "_id", as: "bankname" } },
                    { $unwind: { path: "$bankname", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "paymentdetails.carddetails.cardtypeuid", foreignField: "_id", as: "cardtype" } },
                    { $unwind: { path: "$cardtype", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "paymentdetails.paymentmodeuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    { $addFields: { shouldnotbeused: { $cond: { if: { $eq: ["$paymentdetails.shouldnotbeused", true] }, then: true, else: false } } } },
                    { $addFields: { iscancelledcheck: { $cond: { if: { $eq: ["$iscancelled", true] }, then: true, else: false } } } },
                    { $match: { $or: [{ shouldnotbeused: false }, { iscancelledcheck: false }] } },
                    {
                        $project: {
                            "results": {
                                docno: { $cond: { if: { $eq: [{ $substr: ["$paymentdetails.sequencenumber", 3, 2] }, "DC"] }, then: "$paymentdetails.sequencenumber", else: null } },
                                Cashier: { $ifNull: ["$userscancel.description", "$users.description"] },
                                GTime: { $hour: { date: "$billdate", timezone: "+07:00" } },
                                EN: { $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "I"] }, then: "IPD Bill", else: "OPD Bill" } },
                                Payment: {
                                    $cond: {
                                        if: { $eq: [{ $substr: ["$paymentdetails.sequencenumber", 3, 2] }, "DC"] }, then: "Deposit",
                                        else: { $ifNull: ["$referencevalues.valuedescription", "-"] }
                                    }
                                },
                                Time: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$billdate", timezone: "+07:00", onNull: "-" } },
                                Ref: { $ifNull: ["$sequencenumber", "-"] },
                                mrn: { $ifNull: ["$patients.mrn", "-"] },
                                name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                                else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                            }
                                        }
                                    }
                                },
                                title_name: {
                                    $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                        else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                    }
                                },
                                first_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localfirstname", ""] },
                                                else: { $ifNull: ["$patients.firstname", ""] }
                                            }
                                        }
                                    }
                                },
                                middle_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localmiddlename", ""] },
                                                else: { $ifNull: ["$patients.middlename", ""] }
                                            }
                                        }
                                    }
                                },
                                last_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.locallastname", ""] },
                                                else: { $ifNull: ["$patients.lastname", ""] }
                                            }
                                        }
                                    }
                                },
                                totalcost: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$paymentdetails.amount", -1] }, else: "$paymentdetails.amount" } },
                                check999: { $trunc: { $multiply: [{ $abs: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: [{ $mod: ["$paymentdetails.amount", 1] }, -1] }, else: { $mod: ["$paymentdetails.amount", 1] } } } }, 10000000] } },
                                roundoff: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: [{ $mod: ["$paymentdetails.amount", 1] }, -1] }, else: { $mod: ["$paymentdetails.amount", 1] } } },
                                Timebilldate: "$billdate",
                                bank: { $concat: [{ $ifNull: ["$bankname.valuedescription", ""] },
                                        { $ifNull: ["$cardtype.valuedescription", ""] }] },
                                cheqe: { $concat: [{ $ifNull: ["$paymentdetails.otherpaymentdetails.instrumentnumber", ""] },
                                        { $ifNull: ["$paymentdetails.carddetails.cardnumber", ""] }] },
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $addFields: {
                            hourstr: {
                                $let: {
                                    vars: {
                                        hour: ['1', '1', '1', '1', '1', '1', '1', '1',
                                            '1', '1', '1', '1', '1', '1', '1', '1',
                                            '1', '1', '1', '1', '1', '1', '1', '1']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$hour', '$results.GTime']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                docno: "$results.docno",
                                Cashier: "$results.Cashier",
                                GTime: "$hourstr",
                                EN: "$results.EN",
                                Payment: "$results.Payment",
                                Time: "$results.Time",
                                Ref: "$results.Ref",
                                mrn: "$results.mrn",
                                name: "$results.name",
                                title_name: { $ifNull: ["$results.title_name", ""] },
                                first_name: { $ifNull: ["$results.first_name", ""] },
                                middle_name: { $ifNull: ["$results.middle_name", ""] },
                                last_name: { $ifNull: ["$results.last_name", ""] },
                                totalcost: "$results.totalcost",
                                roundoff: { $cond: { if: { $eq: ["$results.check999", 9999999.0] }, then: 0, else: "$results.roundoff" } },
                                Timebilldate: "$results.Timebilldate",
                                bank: "$results.bank",
                                cheqe: "$results.cheqe"
                            }
                        }
                    },
                    {
                        $project: {
                            docno: "$_id.docno",
                            Cashier: "$_id.Cashier",
                            Payment_sort: {
                                $cond: {
                                    if: { $eq: ['$_id.Payment', "Cash"] }, then: "ACash",
                                    else: {
                                        $cond: {
                                            if: { $eq: ['$_id.Payment', "Credit Card"] }, then: "BCredit Card",
                                            else: {
                                                $cond: {
                                                    if: { $eq: ['$_id.Payment', "Online Transfer"] }, then: "COnline Transfer",
                                                    else: {
                                                        $cond: {
                                                            if: { $eq: ['$_id.Payment', "Cheque"] }, then: "DCheque",
                                                            else: {
                                                                $cond: {
                                                                    if: { $eq: ['$_id.Payment', "Cashier Cheque"] }, then: "DCheque",
                                                                    else: {
                                                                        $cond: {
                                                                            if: { $eq: ['$_id.Payment', "Debit Card"] }, then: "EDebit Card",
                                                                            else: {
                                                                                $cond: {
                                                                                    if: { $eq: ['$_id.Payment', "Deposit"] }, then: "FDeposit",
                                                                                    else: {
                                                                                        $cond: {
                                                                                            if: { $eq: ['$_id.Payment', "Coupon"] }, then: "GCoupon",
                                                                                            else: {
                                                                                                $cond: {
                                                                                                    if: { $eq: ['$_id.Payment', "E-Payment"] }, then: "HE-Payment",
                                                                                                    else: {
                                                                                                        $cond: {
                                                                                                            if: { $eq: ['$_id.Payment', "QR Code"] }, then: "IQR Code",
                                                                                                            else: ''
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            Payment: { $cond: { if: { $eq: ['$_id.Payment', "Cashier Cheque"] }, then: "Cheque", else: '$_id.Payment' } },
                            Ref: "$_id.Ref",
                            GTime: "$_id.GTime",
                            EN: "$_id.EN",
                            Time: "$_id.Time",
                            mrn: "$_id.mrn",
                            name: "$_id.name",
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            totalcost: "$_id.totalcost",
                            roundoff: "$_id.roundoff",
                            Timebilldate: "$_id.Timebilldate",
                            bank: "$_id.bank",
                            cheqe: "$_id.cheqe",
                            timefrom: dateutils_1.default.convertISOtoHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            timeto: dateutils_1.default.convertISOtoHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $sort: { Cashier: 1, Payment_sort: 1, Ref: 1, }
                    }
                ])
                    .exec();
                result = resultpatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon17sub1 error:', error);
            }
            return result;
        });
    }
    findRTCommon17sub2(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let user = { $match: {} };
            if (req.usersuid != '') {
                user = {
                    $match: {
                        'useruid': new mongoose_1.Types.ObjectId(req.usersuid),
                    }
                };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientbills = yield this.patientbillsModel.aggregate([
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'isrefund': false,
                            $or: [
                                { 'sequencenumber': { $regex: /CI/ } },
                                { 'sequencenumber': { $regex: /CO/ } },
                                { 'sequencenumber': { $regex: /II/ } },
                                { 'sequencenumber': { $regex: /IO/ } },
                            ]
                        }
                    }, user,
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "tpas.arcategoryuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $match: {
                            "$and": [
                                {
                                    "referencevalues.valuecode": { $ne: "T007" }
                                },
                                {
                                    "referencevalues.valuecode": { $ne: "T014" }
                                }
                            ]
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.preflanguid",
                            foreignField: "_id",
                            as: "preflang"
                        }
                    },
                    {
                        $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                Cashier: { $ifNull: ["$users.description", "-"] },
                                GTime: { $hour: { date: "$billdate", timezone: "+07:00" } },
                                GBill: { $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "CI"] }, then: "CI", else: "CO" } },
                                Company: { $ifNull: ["$tpas.name", "-"] },
                                Time: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$billdate", timezone: "+07:00", onNull: "-" } },
                                Ref: { $ifNull: ["$sequencenumber", "-"] },
                                Remarks: { $ifNull: ["$comments", ""] },
                                mrn: { $ifNull: ["$patients.mrn", "-"] },
                                name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                                else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                            }
                                        }
                                    }
                                },
                                title_name: {
                                    $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                        else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                    }
                                },
                                first_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localfirstname", ""] },
                                                else: { $ifNull: ["$patients.firstname", ""] }
                                            }
                                        }
                                    }
                                },
                                middle_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localmiddlename", ""] },
                                                else: { $ifNull: ["$patients.middlename", ""] }
                                            }
                                        }
                                    }
                                },
                                last_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.locallastname", ""] },
                                                else: { $ifNull: ["$patients.lastname", ""] }
                                            }
                                        }
                                    }
                                },
                                totalcost: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$totalbillamount", -1] }, else: "$totalbillamount" } },
                                Timebilldate: "$billdate"
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $addFields: {
                            hourstr: {
                                $let: {
                                    vars: {
                                        hour: ['1', '1', '1', '1', '1', '1', '1', '1',
                                            '1', '1', '1', '1', '1', '1', '1', '1',
                                            '1', '1', '1', '1', '1', '1', '1', '1']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$hour', '$results.GTime']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                Cashier: "$results.Cashier",
                                GTime: "$hourstr",
                                GBill: "$results.GBill",
                                Company: "$results.Company",
                                Time: "$results.Time",
                                Ref: "$results.Ref",
                                Remarks: "$results.Remarks",
                                mrn: "$results.mrn",
                                name: "$results.name",
                                title_name: { $ifNull: ["$results.title_name", ""] },
                                first_name: { $ifNull: ["$results.first_name", ""] },
                                middle_name: { $ifNull: ["$results.middle_name", ""] },
                                last_name: { $ifNull: ["$results.last_name", ""] },
                                totalcost: "$results.totalcost",
                                Timebilldate: "$results.Timebilldate"
                            }
                        }
                    },
                    {
                        $project: {
                            Cashier: "$_id.Cashier",
                            GTime: "$_id.GTime",
                            GBill: "$_id.GBill",
                            Company: "$_id.Company",
                            Time: "$_id.Time",
                            Ref: "$_id.Ref",
                            Remarks: "$_id.Remarks",
                            mrn: "$_id.mrn",
                            name: "$_id.name",
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            totalcost: "$_id.totalcost",
                            Timebilldate: "$_id.Timebilldate",
                            timefrom: dateutils_1.default.convertISOtoHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            timeto: dateutils_1.default.convertISOtoHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $sort: { Cashier: 1, GBill: -1, Company: 1, Timebilldate: 1 }
                    }
                ])
                    .exec();
                result = resultpatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon17sub2 error:', error);
            }
            return result;
        });
    }
    findRTCommon17sub3(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let user = { $match: {} };
            if (req.usersuid != '') {
                user = {
                    $match: {
                        'useruid': new mongoose_1.Types.ObjectId(req.usersuid),
                    }
                };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientbills = yield this.patientbillsModel.aggregate([
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'isrefund': false,
                            $or: [
                                { 'sequencenumber': { $regex: /CI/ } },
                                { 'sequencenumber': { $regex: /CO/ } },
                                { 'sequencenumber': { $regex: /II/ } },
                                { 'sequencenumber': { $regex: /IO/ } },
                            ]
                        }
                    }, user,
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "tpas.arcategoryuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $match: {
                            "$or": [
                                {
                                    "referencevalues.valuecode": "T007"
                                },
                                {
                                    "referencevalues.valuecode": "T014"
                                }
                            ]
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.preflanguid",
                            foreignField: "_id",
                            as: "preflang"
                        }
                    },
                    {
                        $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                Cashier: { $ifNull: ["$users.description", "-"] },
                                GTime: { $hour: { date: "$billdate", timezone: "+07:00" } },
                                GBill: { $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "CI"] }, then: "CI", else: "CO" } },
                                Company: { $ifNull: ["$tpas.name", "-"] },
                                Time: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$billdate", timezone: "+07:00", onNull: "-" } },
                                Ref: { $ifNull: ["$sequencenumber", "-"] },
                                Remarks: { $ifNull: ["$comments", ""] },
                                mrn: { $ifNull: ["$patients.mrn", "-"] },
                                name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                                else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                            }
                                        }
                                    }
                                },
                                title_name: {
                                    $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                        else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                    }
                                },
                                first_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localfirstname", ""] },
                                                else: { $ifNull: ["$patients.firstname", ""] }
                                            }
                                        }
                                    }
                                },
                                middle_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localmiddlename", ""] },
                                                else: { $ifNull: ["$patients.middlename", ""] }
                                            }
                                        }
                                    }
                                },
                                last_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.locallastname", ""] },
                                                else: { $ifNull: ["$patients.lastname", ""] }
                                            }
                                        }
                                    }
                                },
                                totalcost: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$totalbillamount", -1] }, else: "$totalbillamount" } },
                                Timebilldate: "$billdate"
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $addFields: {
                            hourstr: {
                                $let: {
                                    vars: {
                                        hour: ['1', '1', '1', '1', '1', '1', '1', '1',
                                            '1', '1', '1', '1', '1', '1', '1', '1',
                                            '1', '1', '1', '1', '1', '1', '1', '1']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$hour', '$results.GTime']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                Cashier: "$results.Cashier",
                                GTime: "$hourstr",
                                GBill: "$results.GBill",
                                Company: "$results.Company",
                                Time: "$results.Time",
                                Ref: "$results.Ref",
                                Remarks: "$results.Remarks",
                                mrn: "$results.mrn",
                                name: "$results.name",
                                title_name: { $ifNull: ["$results.title_name", ""] },
                                first_name: { $ifNull: ["$results.first_name", ""] },
                                middle_name: { $ifNull: ["$results.middle_name", ""] },
                                last_name: { $ifNull: ["$results.last_name", ""] },
                                totalcost: "$results.totalcost",
                                Timebilldate: "$results.Timebilldate"
                            }
                        }
                    },
                    {
                        $project: {
                            Cashier: "$_id.Cashier",
                            GTime: "$_id.GTime",
                            GBill: "$_id.GBill",
                            Company: "$_id.Company",
                            Time: "$_id.Time",
                            Ref: "$_id.Ref",
                            Remarks: "$_id.Remarks",
                            mrn: "$_id.mrn",
                            name: "$_id.name",
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            totalcost: "$_id.totalcost",
                            Timebilldate: "$_id.Timebilldate",
                            timefrom: dateutils_1.default.convertISOtoHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            timeto: dateutils_1.default.convertISOtoHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $sort: { Cashier: 1, GBill: -1, Company: 1, Timebilldate: 1 }
                    }
                ])
                    .exec();
                result = resultpatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon17sub3 error:', error);
            }
            return result;
        });
    }
    findRTCommon17sub4(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let user = { $match: {} };
            if (req.usersuid != '') {
                user = {
                    $match: {
                        'useruid': new mongoose_1.Types.ObjectId(req.usersuid),
                    }
                };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDeposit = yield this.depositsModel.aggregate([
                    {
                        $match: {
                            'depositdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'sequencenumber': { $not: /DC/ }
                        }
                    }, user,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "paymentmodeuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "carddetails.banknameuid",
                            foreignField: "_id",
                            as: "referencevalues3"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues3", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.preflanguid",
                            foreignField: "_id",
                            as: "preflang"
                        }
                    },
                    {
                        $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "otherpaymentdetails.banknameuid", foreignField: "_id", as: "otherpaymentdetails" } },
                    { $unwind: { path: "$otherpaymentdetails", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            "results": {
                                Cashier: { $ifNull: ["$users.description", "-"] },
                                Ref: { $ifNull: ["$sequencenumber", "-"] },
                                Payment: { $ifNull: ["$referencevalues.valuedescription", "-"] },
                                GTime: { $hour: { date: "$depositdate", timezone: "+07:00" } },
                                EN: { $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "DO"] }, then: "DO", else: "RF" } },
                                Time: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$depositdate", timezone: "+07:00", onNull: "-" } },
                                mrn: { $ifNull: ["$patients.mrn", "-"] },
                                name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                                else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                            }
                                        }
                                    }
                                },
                                title_name: {
                                    $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                        else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                    }
                                },
                                first_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localfirstname", ""] },
                                                else: { $ifNull: ["$patients.firstname", ""] }
                                            }
                                        }
                                    }
                                },
                                middle_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localmiddlename", ""] },
                                                else: { $ifNull: ["$patients.middlename", ""] }
                                            }
                                        }
                                    }
                                },
                                last_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.locallastname", ""] },
                                                else: { $ifNull: ["$patients.lastname", ""] }
                                            }
                                        }
                                    }
                                },
                                totalcost: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } },
                                roundoff: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: [{ $mod: ["$amount", 1] }, -1] }, else: { $mod: ["$amount", 1] } } },
                                Timebilldate: "$billdate",
                                bank: { $ifNull: ["$referencevalues3.valuedescription", "-"] },
                                cheqe: { $ifNull: ["$carddetails.cardnumber", { $ifNull: ["$otherpaymentdetails.valuedescription", "-"] }] }
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $addFields: {
                            hourstr: {
                                $let: {
                                    vars: {
                                        hour: ['1', '1', '1', '1', '1', '1', '1', '1',
                                            '1', '1', '1', '1', '1', '1', '1', '1',
                                            '1', '1', '1', '1', '1', '1', '1', '1']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$hour', '$results.GTime']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                Cashier: "$results.Cashier",
                                GTime: "$hourstr",
                                EN: "$results.EN",
                                Payment: "$results.Payment",
                                Time: "$results.Time",
                                Ref: "$results.Ref",
                                mrn: "$results.mrn",
                                name: "$results.name",
                                title_name: { $ifNull: ["$results.title_name", ""] },
                                first_name: { $ifNull: ["$results.first_name", ""] },
                                middle_name: { $ifNull: ["$results.middle_name", ""] },
                                last_name: { $ifNull: ["$results.last_name", ""] },
                                totalcost: "$results.totalcost",
                                roundoff: "$results.roundoff",
                                Timebilldate: "$results.Timebilldate",
                                bank: "$results.bank",
                                cheqe: "$results.cheqe"
                            }
                        }
                    },
                    {
                        $project: {
                            Cashier: "$_id.Cashier",
                            GTime: "$_id.GTime",
                            EN: "$_id.EN",
                            Payment_sort: {
                                $cond: {
                                    if: { $eq: ['$_id.Payment', "Cash"] }, then: "ACash",
                                    else: {
                                        $cond: {
                                            if: { $eq: ['$_id.Payment', "Credit Card"] }, then: "BCredit Card",
                                            else: {
                                                $cond: {
                                                    if: { $eq: ['$_id.Payment', "Online Transfer"] }, then: "COnline Transfer",
                                                    else: {
                                                        $cond: {
                                                            if: { $eq: ['$_id.Payment', "Cheque"] }, then: "DCheque",
                                                            else: {
                                                                $cond: {
                                                                    if: { $eq: ['$_id.Payment', "Cashier Cheque"] }, then: "DCheque",
                                                                    else: {
                                                                        $cond: {
                                                                            if: { $eq: ['$_id.Payment', "Debit Card"] }, then: "EDebit Card",
                                                                            else: {
                                                                                $cond: {
                                                                                    if: { $eq: ['$_id.Payment', "Deposit"] }, then: "FDeposit",
                                                                                    else: {
                                                                                        $cond: {
                                                                                            if: { $eq: ['$_id.Payment', "Coupon"] }, then: "GCoupon",
                                                                                            else: {
                                                                                                $cond: {
                                                                                                    if: { $eq: ['$_id.Payment', "E-Payment"] }, then: "HE-Payment",
                                                                                                    else: {
                                                                                                        $cond: {
                                                                                                            if: { $eq: ['$_id.Payment', "QR Code"] }, then: "IQR Code",
                                                                                                            else: ''
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            Payment: { $cond: { if: { $eq: ['$_id.Payment', "Cashier Cheque"] }, then: "Cheque", else: '$_id.Payment' } },
                            Time: "$_id.Time",
                            Ref: "$_id.Ref",
                            mrn: "$_id.mrn",
                            name: "$_id.name",
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            totalcost: "$_id.totalcost",
                            roundoff: "$_id.roundoff",
                            Timebilldate: "$_id.Timebilldate",
                            bank: "$_id.bank",
                            cheqe: "$_id.cheqe",
                            timefrom: dateutils_1.default.convertISOtoHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            timeto: dateutils_1.default.convertISOtoHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $sort: { Cashier: 1, Payment_sort: 1, Ref: 1, }
                    }
                ])
                    .exec();
                result = resultDeposit;
            }
            catch (error) {
                this.logger.error('findRTCommon17sub4 error:', error);
            }
            return result;
        });
    }
    findRTCommon17sub5(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let user = { $match: {} };
            if (req.usersuid != '') {
                user = {
                    $match: {
                        'useruid': new mongoose_1.Types.ObjectId(req.usersuid),
                    }
                };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDeposit = yield this.depositsModel.aggregate([
                    {
                        $match: {
                            'depositdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'sequencenumber': { $not: /DC/ }
                        }
                    }, user,
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "paymentmodeuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                Cashier: { $ifNull: ["$users.description", "-"] },
                                SumRFCash: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 0, 2] }, "RF"] }, then: "RF", else: "DO" } }, "RF"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Cash"] }, then: "Cash", else: "No" } }, "Cash"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumRFCredit: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 0, 2] }, "RF"] }, then: "RF", else: "DO" } }, "RF"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Credit Card"] }, then: "Credit Card", else: "No" } }, "Credit Card"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumRFOnline: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 0, 2] }, "RF"] }, then: "RF", else: "DO" } }, "RF"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Online Transfer"] }, then: "Online Transfer", else: "No" } }, "Online Transfer"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumRFDebit: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 0, 2] }, "RF"] }, then: "RF", else: "DO" } }, "RF"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Debit Card"] }, then: "Debit Card", else: "No" } }, "Debit Card"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumRFCoupon: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 0, 2] }, "RF"] }, then: "RF", else: "DO" } }, "RF"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Coupon"] }, then: "Coupon", else: "No" } }, "Coupon"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumRFEPay: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 0, 2] }, "RF"] }, then: "RF", else: "DO" } }, "RF"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "E-Payment"] }, then: "E-Payment", else: "No" } }, "E-Payment"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumRFQR: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 0, 2] }, "RF"] }, then: "RF", else: "DO" } }, "RF"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "QR Code"] }, then: "QR Code", else: "No" } }, "QR Code"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumRFChequeAll: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 0, 2] }, "RF"] }, then: "RF", else: "DO" } }, "RF"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Cheque"] }, then: "Cheque", else: "No" } }, "Cheque"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: {
                                                    $cond: {
                                                        if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Cashier Cheque"] }, then: "Cashier Cheque", else: "No" } }, "Cashier Cheque"] },
                                                        then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: {
                                                            $cond: {
                                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Thai Cheque"] }, then: "Thai Cheque", else: "No" } }, "Thai Cheque"] },
                                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }, else: 0
                                    }
                                },
                                SumDOCash: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "DO"] }, then: "DO", else: "RF" } }, "DO"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Cash"] }, then: "Cash", else: "No" } }, "Cash"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumDOCredit: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "DO"] }, then: "DO", else: "RF" } }, "DO"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Credit Card"] }, then: "Credit Card", else: "No" } }, "Credit Card"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumDOOnline: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "DO"] }, then: "DO", else: "RF" } }, "DO"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Online Transfer"] }, then: "Online Transfer", else: "No" } }, "Online Transfer"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumDODebit: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "DO"] }, then: "DO", else: "RF" } }, "DO"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Debit Card"] }, then: "Debit Card", else: "No" } }, "Debit Card"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumDOCoupon: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "DO"] }, then: "DO", else: "RF" } }, "DO"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Coupon"] }, then: "Coupon", else: "No" } }, "Coupon"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumDOEPay: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "DO"] }, then: "DO", else: "RF" } }, "DO"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "E-Payment"] }, then: "E-Payment", else: "No" } }, "E-Payment"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumDOQR: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "DO"] }, then: "DO", else: "RF" } }, "DO"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "QR Code"] }, then: "QR Code", else: "No" } }, "QR Code"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                            }
                                        }, else: 0
                                    }
                                },
                                SumDOChequeAll: {
                                    $cond: {
                                        if: { $eq: [{ $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "DO"] }, then: "DO", else: "RF" } }, "DO"] },
                                        then: {
                                            $cond: {
                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Cheque"] }, then: "Cheque", else: "No" } }, "Cheque"] },
                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: {
                                                    $cond: {
                                                        if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Cashier Cheque"] }, then: "Cashier Cheque", else: "No" } }, "Cashier Cheque"] },
                                                        then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: {
                                                            $cond: {
                                                                if: { $eq: [{ $cond: { if: { $eq: ["$referencevalues.valuedescription", "Thai Cheque"] }, then: "Thai Cheque", else: "No" } }, "Thai Cheque"] },
                                                                then: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: ["$amount", -1] }, else: "$amount" } }, else: 0
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }, else: 0
                                    }
                                },
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                Cashier: "$results.Cashier",
                                user: _user.name,
                                startdate: dateutils_1.default.convertISOtoDatetimeSlashPlusHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                                enddate: dateutils_1.default.convertISOtoDatetimeSlashPlusHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                            },
                            SumRFCash: { $sum: "$results.SumRFCash" },
                            SumRFCredit: { $sum: "$results.SumRFCredit" },
                            SumRFOnline: { $sum: "$results.SumRFOnline" },
                            SumRFDebit: { $sum: "$results.SumRFDebit" },
                            SumRFCoupon: { $sum: "$results.SumRFCoupon" },
                            SumRFChequeAll: { $sum: "$results.SumRFChequeAll" },
                            SumDOCash: { $sum: "$results.SumDOCash" },
                            SumDOCredit: { $sum: "$results.SumDOCredit" },
                            SumDOOnline: { $sum: "$results.SumDOOnline" },
                            SumDODebit: { $sum: "$results.SumDODebit" },
                            SumDOCoupon: { $sum: "$results.SumDOCoupon" },
                            SumDOChequeAll: { $sum: "$results.SumDOChequeAll" }
                        }
                    },
                    {
                        $addFields: {
                            SumRF: { $sum: ['$SumRFCash', '$SumRFCredit', '$SumRFOnline', '$SumRFDebit', '$SumRFCoupon', '$SumRFChequeAll'] },
                        }
                    },
                    {
                        $addFields: {
                            SumDO: { $sum: ['$SumDOCash', '$SumDOCredit', '$SumDOOnline', '$SumDODebit', '$SumDOCoupon', '$SumDOChequeAll'] },
                        }
                    }
                ])
                    .exec();
                result = resultDeposit;
            }
            catch (error) {
                this.logger.error('findRTCommon17sub5 error:', error);
            }
            return result;
        });
    }
    findRTCommon18(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                this.logger.debug(req);
                const _user = yield this.findOrgByLoginId(req.loginuid);
                this.logger.debug(_user);
                const resultPatientbills = this.patientbillsModel.aggregate([
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            $or: [
                                { 'sequencenumber': { $regex: /CI/ } },
                                { 'sequencenumber': { $regex: /CO/ } },
                                { 'sequencenumber': { $regex: /II/ } },
                                { 'sequencenumber': { $regex: /IO/ } },
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.preflanguid",
                            foreignField: "_id",
                            as: "preflang"
                        }
                    },
                    {
                        $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "payoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    {
                        $addFields: {
                            sum_Net: { $ifNull: [{ $sum: '$patientbilleditems.netamount' }, 0] }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            RecNo: { $ifNull: ['$sequencenumber', '-'] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            Name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                        }
                                    }
                                }
                            },
                            NetAmount: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: [-1, "$sum_Net"] }, else: "$sum_Net" } },
                            Companyname: { $ifNull: ['$tpas.name', '-'] },
                            CompanyShare: { $ifNull: ['$payors.name', '-'] },
                            Cashier: { $ifNull: ['$users.name', '-'] },
                            ENTYPE: { $ifNull: [{ $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } }, '-'] },
                            user: _user.name,
                        }
                    },
                    {
                        $addFields: {
                            NetAmount_gte_zero: { $cond: { if: { $gte: ['$NetAmount', 0] }, then: '$NetAmount', else: 0 } }
                        }
                    },
                    {
                        $sort: { departmentname: 1, ENTYPE: 1 }
                    }
                ]).exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon18 error:', error);
            }
            return result;
        });
    }
    findRTCommon19(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientbills = this.patientbillsModel.aggregate([
                    {
                        $match: {
                            $or: [
                                { 'sequencenumber': { $regex: /CI/ } },
                                { 'sequencenumber': { $regex: /CO/ } },
                                { 'sequencenumber': { $regex: /II/ } },
                                { 'sequencenumber': { $regex: /IO/ } },
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.preflanguid",
                            foreignField: "_id",
                            as: "preflang"
                        }
                    },
                    {
                        $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "payoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    {
                        $addFields: {
                            sum_Net: { $ifNull: [{ $sum: '$patientbilleditems.netamount' }, 0] }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            RecNo: { $ifNull: ['$sequencenumber', '-'] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            Name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                        }
                                    }
                                }
                            },
                            NetAmount: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: [-1, "$sum_Net"] }, else: "$sum_Net" } },
                            Companyname: { $ifNull: ['$tpas.name', '-'] },
                            CompanyShare: { $ifNull: ['$payors.name', '-'] },
                            Cashier: { $ifNull: ['$users.name', '-'] },
                            ENTYPE: { $ifNull: [{ $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } }, '-'] },
                            user: _user.name
                        }
                    },
                    {
                        $addFields: {
                            NetAmount_gte_zero: { $cond: { if: { $gte: ['$NetAmount', 0] }, then: '$NetAmount', else: 0 } }
                        }
                    },
                    {
                        $sort: { CompanyShare: 1, ENTYPE: 1 }
                    }
                ]).exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon19 error:', error);
            }
            return result;
        });
    }
    findRTCommon20(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientbills = yield this.patientbillsModel.aggregate([
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'isrefund': false,
                            $or: [
                                { 'sequencenumber': { $regex: /CI/ } },
                                { 'sequencenumber': { $regex: /CO/ } },
                                { 'sequencenumber': { $regex: /II/ } },
                                { 'sequencenumber': { $regex: /IO/ } },
                            ],
                            'iscancelled': { $ne: true }
                        }
                    },
                    {
                        $addFields: {
                            iscancell_null_and_false: { $ifNull: ['$iscancelled', false] }
                        }
                    },
                    {
                        $match: {
                            'iscancell_null_and_false': false
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $group: {
                            _id: {
                                patientuid: '$patients._id',
                                IorO: { $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } }
                            },
                            "patientbilluid": { "$push": "$_id" },
                        }
                    },
                    {
                        $addFields: {
                            countI: { $cond: { if: { $eq: ['$_id.IorO', "IPD"] }, then: 1, else: 0 } }
                        }
                    },
                    {
                        $addFields: {
                            countO: { $cond: { if: { $eq: ['$_id.IorO', "OPD"] }, then: 1, else: 0 } }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                IorO: '$_id.IorO'
                            },
                            sum_countI: { $sum: '$countI' },
                            sum_countO: { $sum: '$countO' },
                            "patientbilluid": { "$push": "$patientbilluid" },
                        }
                    },
                    {
                        $unwind: { path: "$patientbilluid", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientbills",
                            localField: "patientbilluid",
                            foreignField: "_id",
                            as: "patientbills"
                        }
                    },
                    {
                        $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientbills.patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "patientbills.tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "tpas.arcategoryuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientbills.patientbilleditems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            sum_countI: '$sum_countI',
                            sum_countO: '$sum_countO',
                            entyp: { $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } },
                            code: "$referencevalues.valuecode",
                            description: "$referencevalues.valuedescription",
                            billno: "$patientbills.sequencenumber",
                            totalAmount: { $multiply: ["$patientbills.patientbilleditems.unitprice", "$patientbills.patientbilleditems.quantity"] },
                            totalDiscount: "$patientbills.patientbilleditems.payordiscount",
                            netAmount: "$patientbills.patientbilleditems.netamount"
                        }
                    },
                    {
                        $group: {
                            _id: {
                                sum_countI: '$sum_countI',
                                sum_countO: '$sum_countO',
                                entyp: "$entyp",
                                description: "$description",
                                billno: "$billno",
                                code: "$code"
                            },
                            totalAmount: { $sum: "$totalAmount" },
                            totalDiscount: { $sum: "$totalDiscount" },
                            netAmount: { $sum: "$netAmount" }
                        }
                    },
                    {
                        $addFields: {
                            count: 1
                        }
                    },
                    {
                        $group: {
                            _id: {
                                entyp: "$_id.entyp",
                                description: "$_id.description",
                                sum_countI: '$_id.sum_countI',
                                sum_countO: '$_id.sum_countO',
                            },
                            totalAmount: { $sum: "$totalAmount" },
                            totalDiscount: { $sum: "$totalDiscount" },
                            netAmount: { $sum: "$netAmount" },
                            sum_count: { $sum: '$count' }
                        }
                    },
                    {
                        $sort: { _id: 1 }
                    },
                    {
                        $project: {
                            sum_countI: '$_id.sum_countI',
                            sum_countO: '$_id.sum_countO',
                            sum_count: '$sum_count',
                            Entyp: "$_id.entyp",
                            Description: "$_id.description",
                            Total_Amount: "$totalAmount",
                            Total_Discount: "$totalDiscount",
                            Net_Amount: "$netAmount",
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    }
                ])
                    .exec();
                this.logger.debug('resultPatientbills', resultPatientbills);
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon20 error:', error);
            }
            return result;
        });
    }
    findRTCommon21(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const _division = yield this.findDivisionByCodeANDOrg('RTCOMMON21', req.organisationuid);
                const resulttpas = yield this.tpasModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            '_id': new mongoose_1.Types.ObjectId(req.tpauid)
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "arcategoryuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "credittermuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            code: { $ifNull: ["$code", "-"] },
                            name: { $ifNull: ["$name", "-"] },
                            category: { $ifNull: ["$referencevalues.valuedescription", "-"] },
                            creditlimit: { $ifNull: ['$creditlimit', "-"] },
                            creditterm: { $ifNull: ["$referencevalues2.valuedescription", "-"] },
                            user: _user.name,
                            division: _division
                        }
                    }
                ])
                    .exec();
                result = resulttpas;
            }
            catch (error) {
                this.logger.error('findRTCommon21 error:', error);
            }
            return result;
        });
    }
    findRTCommon23(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDeposits = yield this.depositsModel.aggregate([
                    { $addFields: { 'iscancel': {
                                $cond: {
                                    if: {
                                        $and: [
                                            { $eq: [{ $ifNull: ['$iscancelled', false] }, true] },
                                            { $gte: ['$modifiedat', dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] },
                                            { $lte: ['$modifiedat', dateutils_1.default.convertGMTtoUTC(new Date(req.todate))] }
                                        ]
                                    },
                                    then: true,
                                    else: false
                                }
                            } } },
                    {
                        $match: {
                            'depositdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'iscancel': { $eq: false },
                            'shouldnotbeused': { $ne: true },
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "deposits",
                            localField: "orgdepositrefuid",
                            foreignField: "_id",
                            as: "deposits2"
                        }
                    },
                    {
                        $unwind: { path: "$deposits2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.preflanguid",
                            foreignField: "_id",
                            as: "preflang"
                        }
                    },
                    {
                        $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            PatientNameEN: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                        }
                    },
                    {
                        $addFields: {
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            "results": {
                                HN: "$patients.mrn",
                                NamePatient: {
                                    $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $ifNull: [{ $ifNull: ["$PatientNameTH", ""] }, ""] },
                                        else: { $ifNull: ["$PatientNameEN", ""] }
                                    }
                                },
                                DocumentNo: { $ifNull: ["$sequencenumber", "-"] },
                                DocumentNoDep: {
                                    $cond: {
                                        if: {
                                            $or: [
                                                { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "DO"] },
                                                { $eq: [{ $substr: ["$sequencenumber", 3, 2] }, "DP"] }
                                            ]
                                        },
                                        then: "$sequencenumber", else: "$deposits2.sequencenumber"
                                    }
                                },
                                Balance: "$amount",
                                DateRec: { $dateToString: { format: "%Y-%m-%d", date: "$depositdate", timezone: "+07:00", onNull: "-" } },
                                NamePrint: { $concat: [{ $ifNull: ["$users.name", ""] }, " ", { $ifNull: ["$users.lastname", ""] }] }
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                HN: "$results.HN",
                                NamePatient: "$results.NamePatient",
                                DocumentNoDep: "$results.DocumentNoDep",
                                user: _user.name,
                                startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            },
                            DateRec: { $push: "$results.DateRec" },
                            NamePrint: { $push: "$results.NamePrint" },
                            Balance: { $sum: "$results.Balance" }
                        }
                    },
                    {
                        $addFields: {
                            '_id.NamePrint': { $arrayElemAt: ["$NamePrint", 0] },
                        }
                    },
                    {
                        $addFields: {
                            '_id.DateRec': { $arrayElemAt: ["$DateRec", 0] },
                        }
                    },
                    {
                        $match: {
                            Balance: {
                                $gte: 0.005
                            },
                        }
                    },
                    {
                        $sort: { HN: 1, DocumentNo: 1 }
                    }
                ])
                    .exec();
                result = resultDeposits;
            }
            catch (error) {
                this.logger.error('findRTCommon23 error:', error);
            }
            return result;
        });
    }
    findRTCommon26(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let isBill = { $match: {} };
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'results.isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $unwind: '$bedoccupancy'
                    },
                    {
                        $match: {
                            'bedoccupancy.isactive': true
                        }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroupsHead"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroupsHead", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroupsSub"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroupsSub", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientchargecodes.chargecodes.UOM",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                HN: { $ifNull: ["$patients.mrn", "-"] },
                                EN: { $ifNull: ["$visitid", "-"] },
                                PatientName: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                PatientNameTH: {
                                    $ifNull: [{
                                            $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                {
                                                    $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                },
                                                { $ifNull: ["$patients.locallastname", ""] }]
                                        }, '-']
                                },
                                title_name: {
                                    $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                        else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                    }
                                },
                                first_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localfirstname", ""] },
                                                else: { $ifNull: ["$patients.firstname", ""] }
                                            }
                                        }
                                    }
                                },
                                middle_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localmiddlename", ""] },
                                                else: { $ifNull: ["$patients.middlename", ""] }
                                            }
                                        }
                                    }
                                },
                                last_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.locallastname", ""] },
                                                else: { $ifNull: ["$patients.lastname", ""] }
                                            }
                                        }
                                    }
                                },
                                HeadGroupcode: { $ifNull: ["$billinggroupsHead.code", "-"] },
                                SubGroupcode: { $ifNull: ["$billinggroupsSub.code", "-"] },
                                HeadGroup: { $ifNull: ["$billinggroupsHead.name", "-"] },
                                SubGroup: { $ifNull: ["$billinggroupsSub.name", "-"] },
                                HeadGroupTH: { $ifNull: ["$billinggroupsHead.description", "-"] },
                                SubGroupTH: { $ifNull: ["$billinggroupsSub.description", "-"] },
                                Code: { $ifNull: ["$orderitems.code", "-"] },
                                Itemname: { $ifNull: ["$orderitems.name", "-"] },
                                Qty: { $ifNull: ["$patientchargecodes.chargecodes.orgquantity", 0] },
                                UOM: { $ifNull: ["$referencevalues2.valuedescription", "-"] },
                                Location: { $ifNull: ["$wards.name", "-"] },
                                Amount: { $multiply: ["$patientchargecodes.chargecodes.orgquantity", "$patientchargecodes.chargecodes.unitprice"] },
                                Discount: { $ifNull: ["$patientchargecodes.chargecodes.payordiscount", 0] },
                                NetAmount: { $ifNull: ["$patientchargecodes.chargecodes.netamount", 0] },
                                year: { $dateToString: { format: " %Y %H:%m", date: "$patientchargecodes.chargecodes.chargedate", timezone: "+07:00", onNull: "" } },
                                month: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patientchargecodes.chargecodes.chargedate", timezone: "+07:00", onNull: "" } } } } },
                                date: { $dateToString: { format: "%d ", date: "$patientchargecodes.chargecodes.chargedate", timezone: "+07:00", onNull: "-" } },
                                isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                                isflexipackage: { $ifNull: ["$ordersets.isflexipackage", "-"] }
                            }
                        }
                    },
                    isBill,
                    {
                        $addFields: {
                            monthstr: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$results.month']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                HN: "$results.HN",
                                EN: "$results.EN",
                                PatientName: "$results.PatientName",
                                PatientNameTH: "$results.PatientNameTH",
                                title_name: { $ifNull: ["$results.title_name", ""] },
                                first_name: { $ifNull: ["$results.first_name", ""] },
                                middle_name: { $ifNull: ["$results.middle_name", ""] },
                                last_name: { $ifNull: ["$results.last_name", ""] },
                                HeadGroupcode: "$results.HeadGroupcode",
                                SubGroupcode: "$results.SubGroupcode",
                                HeadGroup: "$results.HeadGroup",
                                SubGroup: "$results.SubGroup",
                                HeadGroupTH: "$results.HeadGroupTH",
                                SubGroupTH: "$results.SubGroupTH",
                                Code: "$results.Code",
                                Itemname: "$results.Itemname",
                                orderstart: { $concat: ['$results.date', '$monthstr', '$results.year'] },
                                Qty: "$results.Qty",
                                UOM: "$results.UOM",
                                Location: "$results.Location",
                                Amount: "$results.Amount",
                                Discount: "$results.Discount",
                                NetAmount: "$results.NetAmount",
                                isBill: '$results.isBIll',
                                isflexipackage: '$results.isflexipackage'
                            }
                        }
                    },
                    {
                        $sort: { _id: 1 }
                    },
                    {
                        $project: {
                            EN: "$_id.EN",
                            HN: "$_id.HN",
                            PatientName: "$_id.PatientName",
                            PatientNameTH: "$_id.PatientNameTH",
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HeadGroupcode: "$_id.HeadGroupcode",
                            SubGroupcode: "$_id.SubGroupcode",
                            HeadGroup: "$_id.HeadGroup",
                            SubGroup: "$_id.SubGroup",
                            HeadGroupTH: "$_id.HeadGroupTH",
                            SubGroupTH: "$_id.SubGroupTH",
                            Code: "$_id.Code",
                            Itemname: "$_id.Itemname",
                            orderstart: { $ifNull: ["$_id.orderstart", "-"] },
                            Qty: "$_id.Qty",
                            UOM: "$_id.UOM",
                            Location: "$_id.Location",
                            Amount: "$_id.Amount",
                            Discount: "$_id.Discount",
                            NetAmount: "$_id.NetAmount",
                            isflexipackage: '$_id.isflexipackage',
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    }
                ])
                    .exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon26 error:', error);
            }
            return result;
        });
    }
    findRTCommon30(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $unwind: '$visitcareproviders'
                    },
                    {
                        $match: {
                            'visitcareproviders.isprimarycareprovider': true
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "visitcareproviders.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: ['$patients.lastname', ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: ["$departments.name", "-"] },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: { $ifNull: ['$orderitems.name', '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $ifNull: ['$uomdesc.valuedescription', ' '] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$results.title_name", ""] },
                                first_name: { $ifNull: ["$results.first_name", ""] },
                                middle_name: { $ifNull: ["$results.middle_name", ""] },
                                last_name: { $ifNull: ["$results.last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                los: '$los',
                                itemnameTH: '$itemnameTH',
                                datefromto: '$datefromto'
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            los: '$_id.los',
                            itemnameTH: '$_id.itemnameTH',
                            datefromto: '$_id.datefromto'
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon30 error:', error);
            }
            return result;
        });
    }
    findRTCommon31(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDeposits = yield this.depositsModel.aggregate([
                    {
                        $match: {
                            'depositdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'patientuid': new mongoose_1.Types.ObjectId(req.patientuid),
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'iscancelled': false,
                            'sequencenumber': { $regex: /^RF/ }
                        }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $match: {
                            'patientvisits.visitid': { $regex: /^I/ }
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            BillNumber: "$sequencenumber",
                            datetime: { $dateToString: { format: "%Y/%m/%d %H:%M", date: "$depositdate", timezone: "+07:00", onNull: "-" } },
                            NamePatient: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            HN: "$patients.mrn",
                            refundamount: "$amount",
                            total: "$amount",
                            net: "$amount",
                            cash: "$amount",
                            CashierE: { $concat: [{ $ifNull: ["$users.name", "-"] }, " ", { $ifNull: ["$users.lastname", ""] }] },
                            CashierT: { $concat: [{ $ifNull: ["$users.printname", "-"] }, " ", { $ifNull: ["$users.description", "-"] }] }
                        }
                    }
                ])
                    .exec();
                result = resultDeposits;
            }
            catch (error) {
                this.logger.error('findRTCommon31 error:', error);
            }
            return result;
        });
    }
    findRTCommon32(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let orderset = { $match: {} };
            if (req.orderset != '') {
                orderset = {
                    $match: {
                        '_id': new mongoose_1.Types.ObjectId(req.orderset),
                    }
                };
            }
            ;
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultorderset = yield this.OrdersetsModel.aggregate([
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "statusflag": "A"
                        }
                    }, orderset,
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: false }
                    },
                    { $match: { 'orderitems.activeto': { $eq: null }, } },
                    {
                        $lookup: {
                            from: "tariffs",
                            let: {
                                p1: '$_id',
                                p2: '$orderitems.orderitemuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$tariffordersetuid', '$$p1'] },
                                                { $eq: ['$orderitemuid', '$$p2'] },
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "tariffs2",
                        }
                    },
                    {
                        $unwind: { path: "$tariffs2", preserveNullAndEmptyArrays: false }
                    },
                    { $addFields: { 'tariffs2activeto': { $ifNull: ['$tariffs2.activeto', ""] } } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "tariffs2.tarifftypeuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "orderitems.orderitemuid",
                            foreignField: "_id",
                            as: "Corderitems"
                        }
                    },
                    {
                        $unwind: { path: "$Corderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                OrderSetCode: { $ifNull: ['$code', "-"] },
                                NameSet: { $ifNull: ['$name', "-"] },
                                TypeOrder: {
                                    $cond: {
                                        if: { $eq: ['$packagebilling', false] }, then: "OrderSet",
                                        else: {
                                            $cond: {
                                                if: { $eq: ['$isflexipackage', true] }, then: "FixPrice", else: 'Package'
                                            }
                                        }
                                    }
                                },
                                Activefrom: { $dateToString: { format: "%d/%m/%Y", date: "$activefrom", timezone: "+07:00", onNull: "-" } },
                                ActiveTo: { $dateToString: { format: "%d/%m/%Y", date: "$activeto", timezone: "+07:00", onNull: "-" } },
                                NoofDay: { $ifNull: ['$numberofdays', '-'] },
                                Duration: { $ifNull: ['$orderitems.duration', '-'] },
                                Tariff: { $ifNull: ['$referencevalues2.valuedescription', '-'] },
                                Tariffcode: { $ifNull: ['$referencevalues2.valuecode', '-'] },
                                CodeItem: { $ifNull: ['$Corderitems.code', '-'] },
                                NameItem: { $ifNull: ['$Corderitems.name', '-'] },
                                Qty: { $ifNull: ['$orderitems.quantity', 0] },
                                Amount: { $ifNull: ['$tariffs2.unitprice', 0] },
                                user: _user.name,
                                keywordSearch: req.orderset
                            }
                        }
                    },
                    {
                        $sort: { 'results.OrderSetCode': 1, 'results.Tariff': -1, 'results.CodeItem': 1, }
                    }
                ])
                    .exec();
                result = resultorderset;
            }
            catch (error) {
                this.logger.error('findRTCommon32 error:', error);
            }
            return result;
        });
    }
    findRTCommon35(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let patientuid = { $match: {} };
                if (req.patientuid != '') {
                    patientuid = {
                        $match: {
                            'patientuid': new mongoose_1.Types.ObjectId(req.patientuid),
                        }
                    };
                }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDeposits = yield this.depositsModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'sequencenumber': { $regex: /^RF/ },
                            'patientuid': new mongoose_1.Types.ObjectId(req.patientuid),
                            'depositdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "paymentmodeuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "deposits",
                            localField: "orgdepositrefuid",
                            foreignField: "_id",
                            as: "deposits2"
                        }
                    },
                    {
                        $match: {
                            'deposits2.sequencenumber': { $regex: /DO/ }
                        }
                    },
                    {
                        $unwind: { path: "$deposits2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "deposits2.patientuid",
                            foreignField: "_id",
                            as: "patientsd2"
                        }
                    },
                    {
                        $unwind: { path: "$patientsd2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientsd2.titleuid",
                            foreignField: "_id",
                            as: "referencevaluesd2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevaluesd2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "deposits",
                            localField: "orgdepositrefuid",
                            foreignField: "orgdepositrefuid",
                            as: "deposits3"
                        }
                    },
                    {
                        $unwind: { path: "$deposits3", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            'deposits3.sequencenumber': { $regex: /DO/ }
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "deposits3.patientuid",
                            foreignField: "_id",
                            as: "patientsd3"
                        }
                    },
                    {
                        $unwind: { path: "$patientsd3", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientsd3.titleuid",
                            foreignField: "_id",
                            as: "referencevaluesd3"
                        }
                    },
                    {
                        $unwind: { path: "$referencevaluesd3", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            Docno: "$sequencenumber",
                            amount: "$amount",
                            FromName: { $concat: ["$referencevaluesd2.valuedescription", " ", "$patientsd2.firstname", " ", { $ifNull: ["$patientsd2.middlename", ""] }, " ", "$patientsd2.lastname"] },
                            FromHN: "$patientsd2.mrn",
                            FromDocno: "$deposits2.sequencenumber",
                            FromAmount: "$deposits2.amount",
                            ToName: { $concat: ["$referencevaluesd3.valuedescription", " ", "$patientsd3.firstname", " ", { $ifNull: ["$patientsd3.middlename", ""] }, " ", "$patientsd3.lastname"] },
                            ToHN: "$patientsd3.mrn",
                            ToDocno: "$deposits3.sequencenumber",
                            ToAmount: "$deposits3.amount",
                            Paymentmode: "$referencevalues.valuedescription",
                            CashierE: { $concat: [{ $ifNull: ["$users.name", "-"] }, " ", { $ifNull: ["$users.lastname", ""] }] },
                            CashierT: { $concat: [{ $ifNull: ["$users.printname", "-"] }, " ", { $ifNull: ["$users.description", "-"] }] }
                        }
                    }
                ])
                    .exec();
                result = resultDeposits;
            }
            catch (error) {
                this.logger.error('findRTCommon35 error:', error);
            }
            return result;
        });
    }
    findRTCommon36(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let startdate = dateutils_1.default.convertISOtoDatetimeSlash(new Date(req.fromdate));
                let enddate = dateutils_1.default.convertISOtoDatetimeSlash(new Date(req.todate));
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientC = yield this.patientvisitsModel.aggregate([
                    { $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            "visitid": { $regex: /^I/ },
                            'startdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    { $lookup: { from: "patientchargecodes", localField: "_id", foreignField: "patientvisituid", as: "patientchargecodes" } },
                    { $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: true } },
                    { $match: { 'patientchargecodes.chargecodes.statusflag': "A",
                            'patientchargecodes.chargecodes.patientbilluid': { $eq: null },
                            'patientchargecodes.chargecodes.orgr2cbilluid': { $eq: null } } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.preflanguid",
                            foreignField: "_id",
                            as: "preflang"
                        }
                    },
                    {
                        $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    { $addFields: { 'firstdepartment': { $arrayElemAt: ['$visitjourneys.departmentuid', 0] } } },
                    { $lookup: { from: "departments", localField: "firstdepartment", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'firsttpa': { $arrayElemAt: ['$visitpayors.tpauid', 0] } } },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "firsttpa",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    { $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    { $group: { _id: {
                                HN: "$patients.mrn",
                                EN: "$visitid",
                                PatientName: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                                else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                            }
                                        }
                                    }
                                },
                                title_name: {
                                    $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                        else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                    }
                                },
                                first_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localfirstname", ""] },
                                                else: { $ifNull: ["$patients.firstname", ""] }
                                            }
                                        }
                                    }
                                },
                                middle_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localmiddlename", ""] },
                                                else: { $ifNull: ["$patients.middlename", ""] }
                                            }
                                        }
                                    }
                                },
                                last_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.locallastname", ""] },
                                                else: { $ifNull: ["$patients.lastname", ""] }
                                            }
                                        }
                                    }
                                },
                                Reg_Date_Sort: "$startdate",
                                Reg_Date: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$startdate", timezone: "+07:00", onNull: "" } },
                                Dis_Date: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$medicaldischargedate", timezone: "+07:00", onNull: "" } },
                                Location_Name: { $ifNull: ["$departments.name", ""] },
                                List_Payor: { $ifNull: ["$tpas.description", ""] },
                                room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                                Total_Net_Amount: "$patientbills.totalbillamount",
                            }, Total_Net_Amount: { $sum: "$patientchargecodes.chargecodes.netamount" }
                        } },
                    { $project: {
                            _id: 0,
                            room: "$_id.room",
                            HN: "$_id.HN",
                            EN: "$_id.EN",
                            PatientName: "$_id.PatientName",
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            Reg_Date: "$_id.Reg_Date",
                            Reg_Date_Sort: "$_id.Reg_Date_Sort",
                            Dis_Date: "$_id.Dis_Date",
                            Location_Name: "$_id.Location_Name",
                            List_Payor: "$_id.List_Payor",
                            Total_Net_Amount: "$Total_Net_Amount",
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        } },
                    {
                        $match: {
                            Total_Net_Amount: { $gt: 0 }
                        }
                    },
                ])
                    .exec();
                result = resultPatientC;
            }
            catch (error) {
                this.logger.error('findRTCommon36 error:', error);
            }
            return result;
        });
    }
    findRTCommon37(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let startdate = dateutils_1.default.convertISOtoDatetimeSlash(new Date(req.fromdate));
                let enddate = dateutils_1.default.convertISOtoDatetimeSlash(new Date(req.todate));
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientC = yield this.patientvisitsModel.aggregate([
                    { $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            "visitid": { $not: /^I/ },
                            'startdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    { $lookup: { from: "patientchargecodes", localField: "_id", foreignField: "patientvisituid", as: "patientchargecodes" } },
                    { $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: true } },
                    { $match: { 'patientchargecodes.chargecodes.statusflag': "A",
                            'patientchargecodes.chargecodes.patientbilluid': { $eq: null },
                            'patientchargecodes.chargecodes.orgr2cbilluid': { $eq: null } } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.preflanguid",
                            foreignField: "_id",
                            as: "preflang"
                        }
                    },
                    {
                        $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    { $addFields: { 'firstdepartment': { $arrayElemAt: ['$visitjourneys.departmentuid', 0] } } },
                    { $lookup: { from: "departments", localField: "firstdepartment", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'firsttpa': { $arrayElemAt: ['$visitpayors.tpauid', 0] } } },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "firsttpa",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    { $group: { _id: {
                                HN: "$patients.mrn",
                                EN: "$visitid",
                                PatientName: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                                else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                            }
                                        }
                                    }
                                },
                                title_name: {
                                    $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                        else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                    }
                                },
                                first_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localfirstname", ""] },
                                                else: { $ifNull: ["$patients.firstname", ""] }
                                            }
                                        }
                                    }
                                },
                                middle_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localmiddlename", ""] },
                                                else: { $ifNull: ["$patients.middlename", ""] }
                                            }
                                        }
                                    }
                                },
                                last_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.locallastname", ""] },
                                                else: { $ifNull: ["$patients.lastname", ""] }
                                            }
                                        }
                                    }
                                },
                                Reg_Date_Sort: "$startdate",
                                Reg_Date: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$startdate", timezone: "+07:00", onNull: "" } },
                                Dis_Date: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$medicaldischargedate", timezone: "+07:00", onNull: "" } },
                                Location_Name: { $ifNull: ["$departments.name", ""] },
                                List_Payor: { $ifNull: ["$tpas.description", ""] },
                                Total_Net_Amount: "$patientbills.totalbillamount",
                            }, Total_Net_Amount: { $sum: "$patientchargecodes.chargecodes.netamount" }
                        } },
                    { $project: {
                            _id: 0,
                            HN: "$_id.HN",
                            EN: "$_id.EN",
                            PatientName: "$_id.PatientName",
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            Reg_Date: "$_id.Reg_Date",
                            Reg_Date_Sort: "$_id.Reg_Date_Sort",
                            Dis_Date: "$_id.Dis_Date",
                            Location_Name: "$_id.Location_Name",
                            List_Payor: "$_id.List_Payor",
                            Total_Net_Amount: "$Total_Net_Amount",
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        } },
                    {
                        $match: {
                            Total_Net_Amount: { $gt: 0 }
                        }
                    }
                ])
                    .exec();
                result = resultPatientC;
            }
            catch (error) {
                this.logger.error('findRTCommon37 error:', error);
            }
            return result;
        });
    }
    findRTCommon42(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientbills = yield this.patientbillsModel.aggregate([
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            $or: [
                                { 'sequencenumber': { $regex: /CI/ } },
                                { 'sequencenumber': { $regex: /CO/ } },
                                { 'sequencenumber': { $regex: /II/ } },
                                { 'sequencenumber': { $regex: /IO/ } },
                            ]
                        }
                    },
                    {
                        $addFields: {
                            iscancell_null_and_false: { $ifNull: ['$iscancelled', false] }
                        }
                    },
                    {
                        $match: {
                            'iscancell_null_and_false': false
                        }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "tpas.arcategoryuid",
                            foreignField: "_id",
                            as: "referencevaluesC"
                        }
                    },
                    {
                        $match: {
                            "$or": [
                                {
                                    "referencevaluesC.valuecode": "T007"
                                },
                                {
                                    "referencevaluesC.valuecode": "T014"
                                }
                            ]
                        }
                    },
                    {
                        $unwind: { path: "$referencevaluesC", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "payoragreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $match: {
                            'payoragreements.iswelfare': true
                        }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                Companyname: { $ifNull: ['$tpas.name', '-'] },
                                "IO": { $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } },
                                "BillNumber": "$sequencenumber",
                                "EPINO": "$patientvisits.visitid",
                                "PatientID": "$patients.mrn",
                                "Patientname": { $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $cond: { if: { $eq: ["$patients.isanonymous", true] },
                                                then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                                else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ",
                                                        { $ifNull: ["$patients.localfirstname", ""] }, " ",
                                                        { $ifNull: ["$patients.localmiddlename", ""] }, " ",
                                                        { $ifNull: ["$patients.locallastname", ""] }] }
                                            }
                                        },
                                        else: { $cond: { if: { $eq: ["$patients.isanonymous", true] },
                                                then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                                else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ",
                                                        { $ifNull: ["$patients.firstname", ""] }, " ",
                                                        { $ifNull: ["$patients.middlename", ""] }, " ",
                                                        { $ifNull: ["$patients.lastname", ""] }] }
                                            }
                                        }
                                    }
                                },
                                "NetAmount": { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: [-1, "$totalbillamount"] }, else: "$totalbillamount" } },
                                "PayerOffice": { $ifNull: ["$referencevaluesC.valuedescription", "-"] },
                                "Cashier": { $ifNull: ["$users.description", "-"] }
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                Companyname: '$results.Companyname',
                                IO: "$results.IO",
                                BillNumber: "$results.BillNumber",
                                EPINO: "$results.EPINO",
                                PatientID: "$results.PatientID",
                                Patientname: "$results.Patientname",
                                NetAmount: "$results.NetAmount",
                                PayerOffice: "$results.PayerOffice",
                                Cashier: "$results.Cashier",
                                user: _user.name,
                                startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                                enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                            }
                        }
                    },
                    {
                        $addFields: {
                            NetAmount_gte_zero: { $cond: { if: { $gte: ['$_id.NetAmount', 0] }, then: '$_id.NetAmount', else: 0 } }
                        }
                    },
                    {
                        $sort: { _id: 1 }
                    }
                ])
                    .exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon42 error:', error);
            }
            return result;
        });
    }
    findRTCommon164(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultOrderitems = yield this.orderitemsModel.aggregate([
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $lookup: {
                            from: "ordercategories",
                            localField: "ordercatuid",
                            foreignField: "_id",
                            as: "orderCat"
                        }
                    },
                    {
                        $unwind: { path: "$orderCat", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordercategories",
                            localField: "ordersubcatuid",
                            foreignField: "_id",
                            as: "orderSubCat"
                        }
                    },
                    {
                        $unwind: { path: "$orderSubCat", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            ordercat: { $ifNull: ["$orderCat.name", "-"] },
                            ordersubcat: { $ifNull: ["$orderSubCat.name", "-"] },
                            BillableItemUID: { $ifNull: ["- -", "-"] },
                            BillableItemCode: { $ifNull: ["$code", "-"] },
                            BillableItemName: { $ifNull: ["$name", "-"] },
                            BillableItemDesc: { $ifNull: ["$description", "-"] },
                            ActiveFrom: { $dateToString: { format: "%d/%m/%Y", date: "$activefrom", timezone: "+07:00", onNull: "-" } },
                            ActiveTo: { $dateToString: { format: "%d/%m/%Y", date: "$activeto", timezone: "+07:00", onNull: "-" } },
                            Itemmasteruid: { $ifNull: ["- -", "-"] },
                            Itemmastercode: { $ifNull: ["$code", "-"] },
                            Itemmastername: { $ifNull: ["$name", "-"] },
                            GroupMain: { $ifNull: ["$druggroups1.name", "-"] },
                            SubGroup: { $ifNull: ["$druggroups2.name", "-"] },
                            MinorSubGroup: { $ifNull: ["$druggroups3.name", "-"] },
                            user: _user.name
                        }
                    }
                ])
                    .exec();
                result = resultOrderitems;
            }
            catch (error) {
                this.logger.error('findRTCommon164 error:', error);
            }
            return result;
        });
    }
    findRTCommon165(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDrugmasters = yield this.DrugmastersModel.aggregate([
                    {
                        $sort: { "_id": -1 }
                    },
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "formuid",
                            foreignField: "_id",
                            as: "referencevalues1"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "instructionuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "frequencies",
                            localField: "defaultfrequencyuid",
                            foreignField: "_id",
                            as: "frequencies"
                        }
                    },
                    {
                        $unwind: { path: "$frequencies", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$orderitems.orderiteminstructions", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "druggeneric",
                            localField: "genericdruguid",
                            foreignField: "_id",
                            as: "druggeneric"
                        }
                    },
                    {
                        $unwind: { path: "$druggeneric", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "prescibeuomuid",
                            foreignField: "_id",
                            as: "referencevalues3"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues3", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            Name: { $ifNull: ["$name", "-"] },
                            Description: { $ifNull: ["$description", "-"] },
                            Form: { $ifNull: ["$referencevalues1.valuedescription", "-"] },
                            PDSTS: { $ifNull: ["$referencevalues2.valuedescription", "-"] },
                            Frequency: { $ifNull: ["$frequencies.description", "-"] },
                            instructionLocal: { $ifNull: ["$orderitems.orderiteminstructions.instructiontext", "-"] },
                            GenericName: { $ifNull: ["$druggeneric.description", "-"] },
                            InstructionLocal: { $ifNull: ["$orderitems.orderiteminstructions.locallangtext", "-"] },
                            DoseQuantity: "$defaultdosage",
                            PrescriptionUOM: { $ifNull: ["$referencevalues3.valuedescription", "-"] },
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    }
                ])
                    .exec();
                result = resultDrugmasters;
            }
            catch (error) {
                this.logger.error('findRTCommon165 error:', error);
            }
            return result;
        });
    }
    findRTCommon166(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultItemmasters = yield this.itemmastersModel.aggregate([
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "baseuomuid",
                            foreignField: "_id",
                            as: "referenbaseuomuid"
                        }
                    },
                    {
                        $unwind: { path: "$referenbaseuomuid", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "productcategoryuid",
                            foreignField: "_id",
                            as: "referenproductcategoryuid"
                        }
                    },
                    {
                        $unwind: { path: "$referenproductcategoryuid", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "stockauditgroup",
                            foreignField: "_id",
                            as: "referenstockauditgroup"
                        }
                    },
                    {
                        $unwind: { path: "$referenstockauditgroup", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "reorderdetails.storeuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $match: {
                            'orderitems.statusflag': "A"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordercategories",
                            localField: "orderitems.ordercatuid",
                            foreignField: "_id",
                            as: "orderCat"
                        }
                    },
                    {
                        $unwind: { path: "$orderCat", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $or: [
                                {
                                    'orderCat.ordercattype': "SUPPLY"
                                },
                                {
                                    'orderCat.ordercattype': "MEDICINE"
                                }
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: "ordercategories",
                            localField: "orderitems.ordersubcatuid",
                            foreignField: "_id",
                            as: "orderSubCat"
                        }
                    },
                    {
                        $unwind: { path: "$orderSubCat", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $or: [
                                {
                                    'orderSubCat.ordercattype': "SUPPLY"
                                },
                                {
                                    'orderSubCat.ordercattype': "MEDICINE"
                                }
                            ]
                        }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            Stock_Item_Code: { $ifNull: ["$code", "-"] },
                            Stock_Description: { $ifNull: ["$name", "-"] },
                            Std_UOM: { $ifNull: ["$referenbaseuomuid.valuedescription", "-"] },
                            Stock_Category: { $ifNull: ["$referenproductcategoryuid.valuedescription", "-"] },
                            Stock_tk_Group: { $ifNull: ["$referenstockauditgroup.valuedescription", "-"] },
                            Main_Store: { $ifNull: ["$inventorystores.code", "-"] },
                            Order_Item: { $ifNull: ["$orderitems.code", "-"] },
                            Order_description: { $ifNull: ["$orderitems.name", "-"] },
                            Order_Category: { $ifNull: ["$orderCat.description", "-"] },
                            Order_Sub_Cat: { $ifNull: ["$orderSubCat.description", "-"] },
                            Order_wo_stock_flag: { $cond: { if: { $eq: ["$isnoninventoryitem", "true"] }, then: "Y", else: "N" } },
                            Date_from: { $dateToString: { format: "%d/%m/%Y", date: "$orderitems.activefrom", timezone: "+07:00", onNull: "-" } },
                            Date_To: { $dateToString: { format: "%d/%m/%Y", date: "$orderitems.activeto", timezone: "+07:00", onNull: "-" } },
                            user: _user.name
                        }
                    },
                    {
                        $sort: { Stock_Item_Code: 1, Main_Store: 1 }
                    }
                ])
                    .exec();
                result = resultItemmasters;
            }
            catch (error) {
                this.logger.error('findRTCommon166 error:', error);
            }
            return result;
        });
    }
    findRTCommon167(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultStocktransfers = yield this.StocktransfersModel.aggregate([
                    {
                        $match: {
                            'transferdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'stockrequesttype': 'COMMON.ISSUE',
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A"
                        }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'orgname': '$organisations.name' } },
                    {
                        $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: 'itemmasters',
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: 'itemmasters'
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$itemmasters.reorderdetails", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$fromstoreuid', '$itemmasters.reorderdetails.storeuid'] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemmasters.purchasinguomuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "fromstoreuid",
                            foreignField: "_id",
                            as: "inventorystores1"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $group: {
                            _id: {
                                orgname: { $ifNull: ["$orgname", "-"] },
                                itemid: "$itemdetails.itemmasteruid",
                                storeid: "$itemmasters.reorderdetails.storeuid",
                                requestingLocationCode: { $ifNull: ["$inventorystores1.code", "-"] },
                                requestingLocationDesc: { $ifNull: ["$inventorystores1.description", "-"] },
                            },
                            usageQTY: { $sum: "$itemdetails.quantity" }
                        }
                    },
                    {
                        $lookup: {
                            from: 'itemmasters',
                            localField: "_id.itemid",
                            foreignField: "_id",
                            as: 'itemmasters'
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$itemmasters.reorderdetails", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$_id.storeid', '$itemmasters.reorderdetails.storeuid'] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemmasters.purchasinguomuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "_id.storeid",
                            foreignField: "_id",
                            as: "inventorystores1"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores1", preserveNullAndEmptyArrays: true }
                    },
                    { $addFields: { 'vendoruid_max': { $arrayElemAt: ['$vendordetails.vendoruid', -1] } } },
                    { $lookup: { from: "vendors", localField: "vendoruid_max", foreignField: "_id", as: "vendors" } },
                    { $unwind: { path: "$vendors", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "vendors", localField: "manufacturedby", foreignField: "_id", as: "vendors2" } },
                    { $unwind: { path: "$vendors2", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$_id.orgname", "-"] },
                            code: { $ifNull: ["$itemmasters.code", "-"] },
                            name: { $ifNull: ["$itemmasters.name", "-"] },
                            stdUOM: { $ifNull: ["$referencevalues.valuedescription", "-"] },
                            minQty: { $ifNull: ["$itemmasters.reorderdetails.minstocklevel", 0] },
                            maxQty: { $ifNull: ["$itemmasters.reorderdetails.maxstocklevel", 0] },
                            republenishLevel: { $ifNull: ["$itemmasters.reorderdetails.reorderlevel", 0] },
                            republenishQty: { $ifNull: ["$itemmasters.reorderdetails.reorderquantity", 0] },
                            republenishMethod: "Max Qty",
                            republenishLocationCode: { $ifNull: ["$inventorystores1.parentstorecode", "-"] },
                            republenishLocationDesc: "-",
                            requestingLocationCode: { $ifNull: ["$inventorystores1.code", "-"] },
                            requestingLocationDesc: { $ifNull: ["$inventorystores1.description", "-"] },
                            ratePerDay: { $divide: ["$usageQTY", { $add: [{ $trunc: { $divide: [{ $subtract: [new Date(req.todate), new Date(req.fromdate)] }, 1000 * 3600 * 24] } }, 1] }] },
                            ratePerWeek: { $multiply: [{ $divide: ["$usageQTY", { $add: [{ $trunc: { $divide: [{ $subtract: [new Date(req.todate), new Date(req.fromdate)] }, 1000 * 3600 * 24] } }, 1] }] }, 7] },
                            usageQTY: { $ifNull: ["$usageQTY", 0] },
                            Vendor: { $ifNull: ["$vendors.name", "-"] },
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $sort: { code: 1, republenishLocationCode: 1, requestingLocationCode: 1 }
                    }
                ])
                    .exec();
                result = resultStocktransfers;
            }
            catch (error) {
                this.logger.error('findRTCommon167 error:', error);
            }
            return result;
        });
    }
    findRTCommon168(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultinventorystores = yield this.inventorystoresModel.aggregate([
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            Store_Location_Code: { $ifNull: ["$code", "-"] },
                            Store_Location_Desc: { $ifNull: ["$description", "-"] },
                            Department_Code: { $ifNull: ["$departments.departmentcode", "-"] },
                            Department_Desc: { $ifNull: ["$departments.name", "-"] },
                            user: _user.name
                        }
                    },
                    {
                        $sort: { Store_Location_Desc: 1, Department_Desc: 1 }
                    }
                ])
                    .exec();
                result = resultinventorystores;
            }
            catch (error) {
                this.logger.error('findRTCommon168 error:', error);
            }
            return result;
        });
    }
    findRTCommon169(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let storeuid = { $match: {} };
            if (req.storeuid != '') {
                storeuid = {
                    $match: {
                        'fromstoreuid': new mongoose_1.Types.ObjectId(req.storeuid),
                    }
                };
            }
            ;
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultStockdispenses = yield this.StockdispensesModel.aggregate([
                    {
                        $match: {
                            'dispensedate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    }, storeuid,
                    {
                        $lookup: {
                            from: "patientorders",
                            localField: "patientorderuid",
                            foreignField: "_id",
                            as: "patientorders"
                        }
                    },
                    {
                        $unwind: { path: "$patientorders", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientorders.orderinguseruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "fromstoreuid",
                            foreignField: "_id",
                            as: "inventorystoresF"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystoresF", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientorders.orderdepartmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "stockledgers",
                            let: {
                                w1: '$itemdetails.itemmasteruid',
                                w2: '$fromstoreuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$itemmasteruid', '$$w1'] },
                                                { $eq: ['$storeuid', '$$w2'] }
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "stockledgers",
                        }
                    },
                    {
                        $unwind: { path: "$stockledgers", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$itemmasters.handlingstores", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$itemmasters.handlingstores.storeuid', '$stockledgers.storeuid'] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            let: {
                                p1: '$itemmasters.handlingstores.storeuid',
                                p2: '$itemmasters.handlingstores.binuid'
                            },
                            pipeline: [
                                { "$unwind": "$storebins" },
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$p1'] },
                                                { $eq: ['$storebins._id', '$$p2'] }
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "inventorystoresW",
                        }
                    },
                    {
                        $unwind: { path: "$inventorystoresW", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$inventorystoresW.storebins", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "stockledgers.quantityuom",
                            foreignField: "_id",
                            as: "referencevaluesSet"
                        }
                    },
                    {
                        $unwind: { path: "$referencevaluesSet", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            "results": {
                                orgname: { $ifNull: ["$organisations.name", "-"] },
                                GroupFromStore: { $ifNull: ["$inventorystoresF.name", "-"] },
                                GroupToStore: { $ifNull: ["$departments.name", "-"] },
                                GroupCode: { $ifNull: ["$itemmasters.name", "-"] },
                                Prescription: { $ifNull: ["$patientorders.ordernumber", "-"] },
                                Prescribed: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$patientorders.orderdate", timezone: "+07:00", onNull: "-" } },
                                Dispensed: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$dispensedate", timezone: "+07:00", onNull: "-" } },
                                Qty: "$itemdetails.quantity",
                                HN: { $ifNull: ["$patients.mrn", "-"] },
                                Name: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                keyorder: { $concat: [{ $ifNull: ["$users.name", "-"] }, " ", { $ifNull: ["$users.lastname", ""] }] },
                                department: { $ifNull: ["$departments.name", "-"] },
                                batch: { $ifNull: ["$itemdetails.batchid", "-"] },
                                onhand: { $ifNull: ["$stockledgers.quantity", 0] },
                                expiredate: { $dateToString: { format: "%d/%m/%Y", date: "$itemdetails.expirydate", timezone: "+07:00", onNull: "-" } },
                                storebin: { $ifNull: ["$inventorystoresW.storebins.name", "-"] },
                                setQty: { $ifNull: ["$referencevaluesSet.valuedescription", "-"] },
                                comment: { $ifNull: ["$comments", "-"] }
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                orgname: "$results.orgname",
                                GroupFromStore: "$results.GroupFromStore",
                                GroupToStore: "$results.GroupToStore",
                                GroupCode: "$results.GroupCode",
                                Prescription: "$results.Prescription",
                                Prescribed: "$results.Prescribed",
                                Dispensed: "$results.Dispensed",
                                Qty: "$results.Qty",
                                HN: "$results.HN",
                                Name: "$results.Name",
                                keyorder: "$results.keyorder",
                                department: "$results.department",
                                batch: "$results.batch",
                                expiredate: "$results.expiredate",
                                storebin: "$results.storebin",
                                setQty: "$results.setQty",
                                comment: "$results.comment",
                                user: _user.name,
                                startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                                enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                            },
                            onhand: { $sum: "$results.onhand" }
                        }
                    }
                ])
                    .exec();
                result = resultStockdispenses;
            }
            catch (error) {
                this.logger.error('findRTCommon169error:', error);
            }
            return result;
        });
    }
    findRTCommon170(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let store = { $match: {} };
                if (req.storeuid != '') {
                    store = {
                        $match: {
                            'storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    };
                }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultgoodsreceives = yield this.goodsreceivesModel.aggregate([
                    {
                        $match: {
                            'receivedate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    { $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false } },
                    { $lookup: { from: "itemmasters", localField: "itemdetails.itemmasteruid", foreignField: "_id", as: "itemmasters" } },
                    { $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "inventorystores", localField: "storeuid", foreignField: "_id", as: "inventorystores" } },
                    { $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "itemdetails.quantityuom", foreignField: "_id", as: "UOM" } },
                    { $unwind: { path: "$UOM", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "vendors", localField: "vendoruid", foreignField: "_id", as: "vendors" } },
                    { $unwind: { path: "$vendors", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "vendors", localField: "itemmasters.manufacturedby", foreignField: "_id", as: "manufacturer" } },
                    { $unwind: { path: "$manufacturer", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "receivedby", foreignField: "_id", as: "receivedby" } },
                    { $unwind: { path: "$receivedby", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "grntypeuid", foreignField: "_id", as: "referencevalues" } },
                    { $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            receivedDttm: { $dateToString: { format: "%d/%m/%Y   %H:%M", date: "$receivedate", timezone: "+07:00", onNull: "-" } },
                            code: { $ifNull: ["$itemmasters.code", "-"] },
                            name: { $ifNull: ["$itemmasters.name", "-"] },
                            qty: { $add: ["$itemdetails.quantity", "$itemdetails.freequantity"] },
                            UOM: { $ifNull: ["$UOM.valuedescription", "-"] },
                            cost: "$itemdetails.unitprice",
                            TotalCost: "$itemdetails.netamount",
                            comment: { $ifNull: ["$itemdetails.comments", "-"] },
                            Receive_No: { $ifNull: ["$grnnumber", "-"] },
                            vendor: { $ifNull: ["$vendors.name", "-"] },
                            invoice: { $ifNull: ["$invoicenumber", "-"] },
                            ExpiryDate: { $dateToString: { format: "%d/%m/%Y", date: "$itemdetails.expirydate", timezone: "+07:00", onNull: "-" } },
                            batch: { $ifNull: ["$itemdetails.batchid", "-"] },
                            GRN_Type: { $ifNull: ["$referencevalues.valuedescription", "-"] },
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    },
                    { $sort: { Receive_No: 1, code: 1 } },
                ])
                    .exec();
                result = resultgoodsreceives;
            }
            catch (error) {
                this.logger.error('findRTCommon170error:', error);
            }
            return result;
        });
    }
    findRTCommon171(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let storeuid = { $match: {} };
                if (req.storeuid != '') {
                    storeuid = {
                        $match: {
                            'storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    };
                }
                ;
                const resultstockadjusts = yield this.StockadjustsModel.aggregate([
                    storeuid,
                    {
                        $match: {
                            'adjusteddate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "storeuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "adjustedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                orgname: { $ifNull: ["$organisations.name", "-"] },
                                "Store": { $ifNull: ["$inventorystores.name", "-"] },
                                "StockAdjustmentID": { $ifNull: ["$stockadjustnumber", "-"] },
                                "adjustedby": { $ifNull: ["$users.name", "-"] },
                                "dDate": { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$adjusteddate", timezone: "+07:00", onNull: "-" } },
                                "Item_Name": { $ifNull: ["$itemmasters.name", "-"] },
                                "Actual_Qty": { $ifNull: ["$itemdetails.beforequantity", 0] },
                                "Qty_Adjust": { $ifNull: ["$itemdetails.adjustquantity", 0] },
                                "Adjust_Qty": { $ifNull: ["$itemdetails.balancequantity", 0] },
                                "UOM": { $ifNull: ["$referencevalues2.valuedescription", "-"] },
                                "ItemCost": { $ifNull: ["$itemdetails.wac", 0] },
                                "Adjust_Cost": { $ifNull: ["$itemdetails.totalcost", 0] },
                                "Comment": { $ifNull: ["$itemdetails.comments", "-"] }
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                orgname: "$results.orgname",
                                Store: "$results.Store",
                                StockAdjustmentID: "$results.StockAdjustmentID",
                                adjustedby: "$results.adjustedby",
                                dDate: "$results.dDate",
                                Item_Name: "$results.Item_Name",
                                Actual_Qty: "$results.Actual_Qty",
                                Qty_Adjust: "$results.Qty_Adjust",
                                Adjust_Qty: "$results.Adjust_Qty",
                                UOM: "$results.UOM",
                                ItemCost: "$results.ItemCost",
                                Adjust_Cost: "$results.Adjust_Cost",
                                Comment: "$results.Comment"
                            }
                        }
                    },
                    {
                        $sort: { _id: 1 }
                    },
                    {
                        $project: {
                            orgname: "$_id.orgname",
                            Store: "$_id.Store",
                            StockAdjustmentID: "$_id.StockAdjustmentID",
                            adjustedby: "$_id.adjustedby",
                            dDate: "$_id.dDate",
                            Item_Name: "$_id.Item_Name",
                            Actual_Qty: "$_id.Actual_Qty",
                            Qty_Adjust: "$_id.Qty_Adjust",
                            Adjust_Qty: "$_id.Adjust_Qty",
                            UOM: "$_id.UOM",
                            ItemCost: "$_id.ItemCost",
                            Adjust_Cost: "$_id.Adjust_Cost",
                            Comment: "$_id.Comment",
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $addFields: { 'Adjust_Qty': { $sum: ['$Actual_Qty', '$Qty_Adjust'] } }
                    }
                ])
                    .exec();
                result = resultstockadjusts;
            }
            catch (error) {
                this.logger.error('findRTCommon171error:', error);
            }
            return result;
        });
    }
    findRTCommon172(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let store = { $match: {} };
                if (req.storeuid != '') {
                    store = {
                        $match: {
                            'storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    };
                }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultsStockledger = yield this.StockledgersModel.aggregate([
                    store,
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $unwind: { path: "$ledgerdetails", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $group: {
                            _id: {
                                orguid: { $ifNull: ["$orguid", "-"] },
                                itemmasteruid: '$itemmasteruid',
                                storeuid: '$storeuid'
                            },
                            Quantity: { $sum: '$ledgerdetails.quantity' },
                            ItemCost: { $max: "$ledgerdetails.wac" }
                        }
                    },
                    {
                        $match: {
                            'Quantity': 0
                        }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            let: {
                                p1: '$_id.itemmasteruid',
                                p2: '$_id.storeuid'
                            },
                            pipeline: [
                                { "$unwind": "$handlingstores" },
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$p1'] },
                                                { $eq: ['$handlingstores.storeuid', '$$p2'] }
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "itemmasters",
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            let: {
                                p1: '$itemmasters.handlingstores.storeuid',
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$p1'] },
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "inventorystores",
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "_id.storeuid",
                            foreignField: "_id",
                            as: "inventorystores2"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemmasters.stockauditgroup",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemmasters.baseuomuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "_id.orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            consignment: { $cond: { if: { $eq: ["$itemmasters.allowconsignmentstock", true] }, then: "Y", else: "N" } },
                            StoreName: { $ifNull: ['$inventorystores2.name', "-"] },
                            StockGroup: { $ifNull: ['$referencevalues.valuedescription', "-"] },
                            code: { $ifNull: ['$itemmasters.code', "-"] },
                            itemname: { $ifNull: ['$itemmasters.name', "-"] },
                            StoreBinName: '',
                            UOM: { $ifNull: ['$referencevalues2.valuedescription', "-"] },
                            StockAmt: '',
                            CountQty: '',
                            DiffQty: '',
                            S: '',
                            Item: '',
                            Quantity: "$Quantity",
                            ItemCost: "$ItemCost",
                            user: _user.name
                        }
                    },
                    {
                        $sort: { consignment: 1, StoreName: 1, StockGroup: 1 }
                    }
                ])
                    .exec();
                result = resultsStockledger;
            }
            catch (error) {
                this.logger.error('findRTCommon172error:', error);
            }
            return result;
        });
    }
    findRTCommon173(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let store = { $match: {} };
            if (req.storeuid != '') {
                store = {
                    $match: {
                        'handlingstores.storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                    }
                };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultItemmasters = yield this.itemmastersModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A"
                        }
                    },
                    { $addFields: { p_index: { $indexOfArray: ['$handlingstores.storeuid', new mongoose_1.Types.ObjectId(req.storeuid)] } } },
                    { $addFields: { p_storeuid: { $arrayElemAt: ["$handlingstores.storeuid", "$p_index"] } } },
                    { $unwind: { path: "$handlingstores", preserveNullAndEmptyArrays: true } },
                    store,
                    { $addFields: { p_binuid: "$handlingstores.binuid" } },
                    { $lookup: { from: "inventorystores", localField: "p_storeuid", foreignField: "_id", as: "inventory" } },
                    { $unwind: { path: "$inventory", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "stockauditgroup", foreignField: "_id", as: "referencevalues" } },
                    { $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "stockledgers", localField: "_id", foreignField: "itemmasteruid", as: "stockledgers" } },
                    { $unwind: { path: "$stockledgers", preserveNullAndEmptyArrays: true } },
                    { $addFields: { "store": "$stockledgers.storeuid" } },
                    { $match: { store: new mongoose_1.Types.ObjectId(req.storeuid) } },
                    { $addFields: { "wac": { $arrayElemAt: ["$stockledgers.ledgerdetails.wac", -1] } } },
                    { $addFields: { "nextwac": { $arrayElemAt: ["$stockledgers.ledgerdetails.nextwac", -1] } } },
                    { $addFields: { "ledgerdetail_array": "$stockledgers.ledgerdetails" } },
                    { $addFields: { "quantity": { $sum: "$ledgerdetail_array.quantity" } } },
                    { $lookup: { from: "referencevalues", localField: "baseuomuid", foreignField: "_id", as: "uom" } },
                    { $unwind: { path: "$uom", preserveNullAndEmptyArrays: true } },
                    { $addFields: { b_index: { $indexOfArray: ['$inventory.storebins._id', '$p_binuid'] } } },
                    { $addFields: { b_array: { $arrayElemAt: ["$inventory.storebins.name", { $cond: { if: { $eq: ["$b_index", -1] }, then: null, else: "$b_index" } }] }, } },
                    { $addFields: { 'vendoruid_max': { $arrayElemAt: ['$vendordetails.vendoruid', -1] } } },
                    { $lookup: { from: "vendors", localField: "vendoruid_max", foreignField: "_id", as: "vendors" } },
                    { $unwind: { path: "$vendors", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "vendors", localField: "manufacturedby", foreignField: "_id", as: "vendors2" } },
                    { $unwind: { path: "$vendors2", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            StoreName: '$inventory.name',
                            code: '$code',
                            itemname: '$name',
                            StoreBinName: { $ifNull: ['$b_array', ''] },
                            UOM: '$uom.valuedescription',
                            ActiveFrom: { $dateToString: { format: "%d/%m/%Y", date: "$activefrom", timezone: "+07:00", onNull: "-" } },
                            ActiveTo: { $dateToString: { format: "%d/%m/%Y", date: "$activeto", timezone: "+07:00", onNull: "-" } },
                            IsConsignmentItem: { $cond: { if: { $eq: ["$allowconsignmentstock", true] }, then: "Y", else: "N" } },
                            ItemMasterUID: { $ifNull: ["- -", "-"] },
                            Quantity: '$quantity',
                            ItemCost: { $ifNull: [{ $cond: { if: { $eq: ["$nextwac", null] }, then: "$wac", else: "$nextwac" } }, 0] },
                            StockAmt: { $multiply: [{ $ifNull: [{ $cond: { if: { $eq: ["$nextwac", null] }, then: "$wac", else: "$nextwac" } }, 0] }, "$quantity"] },
                            user: _user.name,
                            Manufacturing: { $ifNull: ["$vendors2.name", "-"] },
                            StockGroup: { $ifNull: ["$referencevalues.valuedescription", "-"] },
                            Vendor: { $ifNull: ["$vendors.name", "-"] },
                            StoreUID: '$inventory.code',
                            Item: { $ifNull: ["$stockledgers.batchid", "-"] },
                        }
                    },
                    { $match: { Quantity: { $ne: 0 } } },
                    {
                        $sort: { StoreName: 1, StockGroup: 1, itemname: 1 }
                    }
                ])
                    .exec();
                result = resultItemmasters;
            }
            catch (error) {
                this.logger.error('findRTCommon173error:', error);
            }
            return result;
        });
    }
    findRTCommon174(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let store = { $match: {} };
            if (req.storeuid != '') {
                store = {
                    $match: {
                        'handlingstores.storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                    }
                };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultItemmasters = yield this.itemmastersModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A"
                        }
                    },
                    { $addFields: { p_index: { $indexOfArray: ['$handlingstores.storeuid', new mongoose_1.Types.ObjectId(req.storeuid)] } } },
                    { $addFields: { p_storeuid: { $arrayElemAt: ["$handlingstores.storeuid", "$p_index"] } } },
                    { $unwind: { path: "$handlingstores", preserveNullAndEmptyArrays: true } },
                    store,
                    { $addFields: { p_binuid: "$handlingstores.binuid" } },
                    { $lookup: { from: "inventorystores", localField: "p_storeuid", foreignField: "_id", as: "inventory" } },
                    { $unwind: { path: "$inventory", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "stockledgers", localField: "_id", foreignField: "itemmasteruid", as: "stockledgers" } },
                    { $unwind: { path: "$stockledgers", preserveNullAndEmptyArrays: true } },
                    { $addFields: { "store": { $ifNull: ["$stockledgers.storeuid", '-'] } } },
                    { $match: { $expr: { $or: [{ $eq: ['$store', new mongoose_1.Types.ObjectId(req.storeuid)] }, { $eq: ['$store', '-'] }] } } },
                    { $addFields: { "wac": { $arrayElemAt: ["$stockledgers.ledgerdetails.wac", -1] } } },
                    { $addFields: { "nextwac": { $arrayElemAt: ["$stockledgers.ledgerdetails.nextwac", -1] } } },
                    { $addFields: { "ledgerdetail_array": "$stockledgers.ledgerdetails" } },
                    { $addFields: { "quantity": { $sum: "$ledgerdetail_array.quantity" } } },
                    { $lookup: { from: "referencevalues", localField: "baseuomuid", foreignField: "_id", as: "uom" } },
                    { $unwind: { path: "$uom", preserveNullAndEmptyArrays: true } },
                    { $addFields: { b_index: { $indexOfArray: ['$inventory.storebins._id', '$p_binuid'] } } },
                    { $addFields: { b_array: { $arrayElemAt: ["$inventory.storebins.name", { $cond: { if: { $eq: ["$b_index", -1] }, then: null, else: "$b_index" } }] }, } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            _id: 0,
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            StoreName: '$inventory.name',
                            code: '$code',
                            itemname: '$name',
                            StoreBinName: { $ifNull: ['$b_array', ''] },
                            Quantity: '$quantity',
                            UOM: '$uom.valuedescription',
                            user: _user.name,
                            CountQty: { $ifNull: ["", "-"] },
                            DiffQty: { $ifNull: ["", "-"] },
                            S: { $ifNull: ["", "-"] },
                            ActiveFrom: { $dateToString: { format: "%d/%m/%Y", date: "$activefrom", timezone: "+07:00", onNull: "-" } },
                            ActiveTo: { $dateToString: { format: "%d/%m/%Y", date: "$activeto", timezone: "+07:00", onNull: "-" } },
                            consignment: { $cond: { if: { $eq: ["$allowconsignmentstock", true] }, then: "Y", else: "N" } },
                            ItemCost: { $ifNull: [{ $cond: { if: { $eq: ["$nextwac", null] }, then: "$wac", else: "$nextwac" } }, 0] },
                            StockAmt: { $multiply: [{ $ifNull: [{ $cond: { if: { $eq: ["$nextwac", null] }, then: "$wac", else: "$nextwac" } }, 0] }, "$quantity"] },
                            Item: { $ifNull: ["$stockledgers.batchid", "-"] },
                            LOSExpire: { $ifNull: [{ $ceil: { $divide: [{ $subtract: ["$stockledgers.expirydate", new Date()] }, 1000 * 3600 * 24] } }, ''] },
                            expirydate: { $dateToString: { format: "%d/%m/%Y", date: "$stockledgers.expirydate", timezone: "+07:00", onNull: "-" } },
                        }
                    },
                    {
                        $sort: { consignment: 1, StoreName: 1, StoreBinName: 1 }
                    }
                ])
                    .exec();
                result = resultItemmasters;
            }
            catch (error) {
                this.logger.error('findRTCommon174error:', error);
            }
            return result;
        });
    }
    findRTCommon175(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let storeuid = { $match: {} };
            if (req.storeuid != '') {
                storeuid = {
                    $match: {
                        'fromstoreuid': new mongoose_1.Types.ObjectId(req.storeuid),
                    }
                };
            }
            ;
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultStockdispenses = yield this.StockdispensesModel.aggregate([
                    {
                        $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false }
                    },
                    storeuid,
                    {
                        $match: {
                            'dispensedate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "fromstoreuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'itemmasters.allowconsignmentstock': true
                        }
                    },
                    {
                        $lookup: {
                            from: "patientorders",
                            localField: "itemdetails.patientorderuid",
                            foreignField: "_id",
                            as: "patientorders"
                        }
                    },
                    {
                        $unwind: { path: "$patientorders", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientorders.patientorderitems", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$itemdetails.patientorderitemuid', '$patientorders.patientorderitems._id'] }
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorders.patientorderitems.statusuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            StockLocationCode: { $ifNull: ["$inventorystores.code", "-"] },
                            StockLocationName: { $ifNull: ["$inventorystores.description", "-"] },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            StoreCode: { $ifNull: ["$inventorystores.code", "-"] },
                            StockCode: { $ifNull: ["$itemmasters.code", "-"] },
                            StockDesc: { $ifNull: ["$itemmasters.name", "-"] },
                            QtyOrder: "$patientorders.patientorderitems.quantity",
                            StatusOrder: { $ifNull: ["$referencevalues.valuedescription", "-"] },
                            DateOrder: { $dateToString: { format: "%d/%m/%Y", date: "$patientorders.patientorderitems.startdate", timezone: "+07:00", onNull: "-" } },
                            EPINo: { $ifNull: ["$patientvisits.visitid", "-"] },
                            StockDate: { $dateToString: { format: "%d/%m/%Y", date: "$dispensedate", timezone: "+07:00", onNull: "-" } },
                            QtyStock: { $multiply: ["$itemdetails.quantity", -1] },
                            SupplyNo: { $ifNull: ["$patientorders.ordernumber", "-"] },
                            AVG: "$itemdetails.wac",
                            LastPurc: "$itemdetails.wac",
                            OrderNote: { $ifNull: ["$comments", "-"] },
                            accno: { $ifNull: ["$stockdispensenumber", "-"] },
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $sort: { HN: -1, StockCode: -1 }
                    },
                ])
                    .exec();
                result = resultStockdispenses;
            }
            catch (error) {
                this.logger.error('findRTCommon175error:', error);
            }
            return result;
        });
    }
    findRTCommon176(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let storeuid = { $match: {} };
            if (req.storeuid != '') {
                storeuid = {
                    $match: {
                        'fromstoreuid': new mongoose_1.Types.ObjectId(req.storeuid),
                    }
                };
            }
            let comment = { $match: {} };
            if (req.comment != '' && req.comment != 'null' && req.comment != null && req.comment.length > 0) {
                comment = {
                    $match: {
                        'comments': req.comment,
                    }
                };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultStocktransfers = yield this.StocktransfersModel.aggregate([
                    {
                        $match: {
                            'transferdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    storeuid, comment,
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "issuetypeuid",
                            foreignField: "_id",
                            as: "referencevaluesM"
                        }
                    },
                    {
                        $unwind: { path: "$referencevaluesM", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'referencevaluesM.valuecode': 'ISSCON'
                        }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "fromstoreuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "tostoreuid",
                            foreignField: "_id",
                            as: "inventorystores2"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "createdby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "todeptuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                From_Store_Code: { $ifNull: ["$inventorystores.code", "-"] },
                                From_Store: { $ifNull: ["$inventorystores.name", "-"] },
                                store: { $ifNull: ["$inventorystores2.name", "-"] },
                                Code: { $ifNull: ["$inventorystores2.code", "-"] },
                                DateTime: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$transferdate", timezone: "+07:00", onNull: "-" } },
                                RefNo: { $ifNull: ["$stocktransfernumber", "-"] },
                                ItemCode: "$itemmasters.code",
                                ItemName: "$itemmasters.name",
                                Qty: "$itemdetails.quantity",
                                batchid: "$itemdetails.batchid",
                                saleUOM: "$referencevalues.valuedescription",
                                Cost: "$itemdetails.wac",
                                NetAmont: { $multiply: ["$itemdetails.wac", "$itemdetails.quantity"] },
                                Createname: { $ifNull: ["$users.printname", "-"] },
                                Comment: { $ifNull: ["$comments", "-"] },
                                Comments: { $ifNull: ["$itemdetails.comments", ""] },
                                orgname: { $ifNull: ["$organisations.name", "-"] },
                                departmentscode: { $ifNull: ["$departments.code", "-"] },
                                departmentsname: { $ifNull: ["$departments.name", "-"] }
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                From_Store_Code: "$results.From_Store_Code",
                                From_Store: "$results.From_Store",
                                store: "$results.store",
                                Code: "$results.Code",
                                DateTime: "$results.DateTime",
                                RefNo: "$results.RefNo",
                                ItemCode: "$results.ItemCode",
                                ItemName: "$results.ItemName",
                                Qty: "$results.Qty",
                                batchid: "$results.batchid",
                                saleUOM: "$results.saleUOM",
                                Cost: "$results.Cost",
                                NetAmont: "$results.NetAmont",
                                Createname: "$results.Createname",
                                Comment: { $concat: ["$results.Comment", " ", "$results.Comments"] },
                                orgname: "$results.orgname",
                                departmentscode: "$results.departmentscode",
                                departmentsname: "$results.departmentsname"
                            }
                        }
                    },
                    {
                        $project: {
                            From_Store_Code: "$_id.From_Store_Code",
                            From_Store: "$_id.From_Store",
                            store: "$_id.store",
                            Code: "$_id.Code",
                            DateTime: "$_id.DateTime",
                            RefNo: "$_id.RefNo",
                            ItemCode: "$_id.ItemCode",
                            ItemName: "$_id.ItemName",
                            Qty: "$_id.Qty",
                            batchid: "$_id.batchid",
                            saleUOM: "$_id.saleUOM",
                            Cost: "$_id.Cost",
                            NetAmont: "$_id.NetAmont",
                            Createname: "$_id.Createname",
                            Comment: "$_id.Comment",
                            orgname: "$_id.orgname",
                            departmentscode: "$_id.departmentscode",
                            departmentsname: "$_id.departmentsname",
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    },
                    {
                        $sort: { From_Store: 1, store: 1 }
                    }
                ])
                    .exec();
                result = resultStocktransfers;
            }
            catch (error) {
                this.logger.error('findRTCommon176error:', error);
            }
            return result;
        });
    }
    findRTCommon177() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Method not implemented.");
        });
    }
    findRTCommon178(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let storeuid = { $match: {} };
                if (req.storeuid != '') {
                    storeuid = {
                        $match: {
                            'storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    };
                }
                ;
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultStocktransfers = yield this.goodsreceivesModel.aggregate([
                    storeuid,
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'itemdetails.expirydate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                        }
                    },
                    {
                        $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            'itemdetails.expirydate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$itemmasters.handlingstores", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$storeuid', '$itemmasters.handlingstores.storeuid'] }
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: 'inventorystores',
                            localField: "itemmasters.handlingstores.storeuid",
                            foreignField: "_id",
                            as: 'inventorystores'
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'vendors',
                            localField: "itemdetails.vendoruid",
                            foreignField: "_id",
                            as: 'vendors'
                        }
                    },
                    {
                        $unwind: { path: "$vendors", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $unwind: { path: "$inventorystores.storebins", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                orgname: { $ifNull: ["$organisations.name", "-"] },
                                StoreName: { $ifNull: ["$inventorystores.name", "-"] },
                                StoreUID: { $ifNull: ["$inventorystores.code", "-"] },
                                ItemCode: { $ifNull: ["$itemmasters.code", "-"] },
                                ItemName: { $ifNull: ["$itemmasters.name", "-"] },
                                FromBinName: '',
                                Comment: { $ifNull: ["$itemdetails.comments", "-"] },
                                Quantity: { $ifNull: ["$itemdetails.quantity", 0] },
                                Unit: { $ifNull: ["$referencevalues.valuedescription", "-"] },
                                Price: { $ifNull: ["$itemdetails.unitprice", 0] },
                                ItemCost: { $ifNull: ["$itemdetails.wac", 0] },
                                Bat: { $ifNull: ["$itemdetails.batchid", "-"] },
                                LOS: { $trunc: { $divide: [{ $subtract: ["$itemdetails.expirydate", new Date()] }, 1000 * 3600 * 24] } },
                                Vendor: { $ifNull: ["$vendors.name", "-"] },
                                ExpiryDttm_sort: { $dateToString: { format: "%Y/%m/%d", date: "$itemdetails.expirydate", timezone: "+07:00", onNull: "-" } },
                                ExpiryDttm: { $dateToString: { format: "%d/%m/%Y", date: "$itemdetails.expirydate", timezone: "+07:00", onNull: "-" } }
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                ExpiryDttm_sort: '$results.ExpiryDttm_sort',
                                orgname: "$results.orgname",
                                StoreName: "$results.StoreName",
                                StoreUID: "$results.StoreUID",
                                ItemCode: "$results.ItemCode",
                                ItemName: "$results.ItemName",
                                FromBinName: "$results.FromBinName",
                                Comment: "$results.Comment",
                                Quantity: "$results.Quantity",
                                Unit: "$results.Unit",
                                Price: "$results.Price",
                                ItemCost: "$results.ItemCost",
                                Bat: "$results.Bat",
                                LOS: "$results.LOS",
                                Vendor: "$results.Vendor",
                                ExpiryDttm: "$results.ExpiryDttm"
                            }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ExpiryDttm_sort: '$_id.ExpiryDttm_sort',
                            orgname: "$_id.orgname",
                            StoreName: "$_id.StoreName",
                            StoreUID: "$_id.StoreUID",
                            ItemCode: "$_id.ItemCode",
                            ItemName: "$_id.ItemName",
                            FromBinName: "$_id.FromBinName",
                            Comment: "$_id.Comment",
                            Quantity: "$_id.Quantity",
                            Unit: "$_id.Unit",
                            Price: "$_id.Price",
                            ItemCost: "$_id.ItemCost",
                            Bat: "$_id.Bat",
                            LOS: "$_id.LOS",
                            Vendor: "$_id.Vendor",
                            ExpiryDttm: "$_id.ExpiryDttm",
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    },
                    {
                        $sort: { StoreName: 1, ExpiryDttm_sort: 1, ItemCode: 1 }
                    }
                ])
                    .exec();
                result = resultStocktransfers;
            }
            catch (error) {
                this.logger.error('findRTCommon178error:', error);
            }
            return result;
        });
    }
    findRTCommon179main(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisits = yield this.organisationsModel.aggregate([
                    {
                        $match: {
                            '_id': new mongoose_1.Types.ObjectId(req.organisationuid),
                        }
                    },
                    { $project: {
                            orgname: { $ifNull: ["$name", ""] },
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        } },
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon179main error:', error);
            }
            return result;
        });
    }
    findRTCommon179sub1(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let store = { $match: {} };
                if (req.storeuid != '') {
                    store = { $match: { 'storeuid': new mongoose_1.Types.ObjectId(req.storeuid) } };
                }
                const resulstStockledgers = yield this.StockledgersModel.aggregate([
                    { $unwind: { path: "$ledgerdetails", preserveNullAndEmptyArrays: false } },
                    {
                        $match: {
                            'ledgerdetails.transactiondate': {
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'itemmasteruid': new mongoose_1.Types.ObjectId(req.itemuid)
                        }
                    }, store,
                    { $lookup: { from: "inventorystores", localField: "storeuid", foreignField: "_id", as: "inventorystores" } },
                    { $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            _id: 0,
                            StoreageCode: { $ifNull: ["$inventorystores.code", "-"] },
                            StoreageDesc: { $ifNull: ["$inventorystores.name", "-"] },
                            nextwac: '$ledgerdetails.nextwac',
                            wac: '$ledgerdetails.wac',
                            BF: { $cond: { if: { $lt: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] }, then: "$ledgerdetails.quantity", else: 0 } },
                            Receive: { $cond: { if: { $and: [{ $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.GOODSRECEIVE"] }, { $gte: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] }] }, then: "$ledgerdetails.quantity", else: 0 } },
                            Issue: { $cond: { if: { $and: [{ $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.STOCKISSUE"] }, { $gte: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] }] }, then: "$ledgerdetails.quantity", else: 0 } },
                            Adjust: { $cond: { if: { $and: [{ $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.STOCKADJUST"] }, { $gte: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] }] }, then: "$ledgerdetails.quantity", else: 0 } },
                            TransferOut: { $cond: { if: { $and: [{ $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.TRANSFEROUT"] }, { $gte: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] }] }, then: "$ledgerdetails.quantity", else: 0 } },
                            TransferIn: {
                                $cond: {
                                    if: {
                                        $and: [
                                            { $gte: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] },
                                            {
                                                $or: [
                                                    { $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.TRANSFERIN"] },
                                                    { $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.CANCELTRANSFER"] },
                                                    { $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.STOCKTRANSFERRETURN"] },
                                                    { $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.MANUFACTURING"] },
                                                    { $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.MANUFACUTINGREPACKING"] },
                                                ]
                                            },
                                        ]
                                    }, then: "$ledgerdetails.quantity", else: 0
                                }
                            },
                            Other: {
                                $cond: {
                                    if: {
                                        $and: [{ $gte: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.GOODSRECEIVE"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.STOCKISSUE"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.TRANSFERIN"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.TRANSFEROUT"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.STOCKADJUST"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.CANCELTRANSFER"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.STOCKTRANSFERRETURN"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.MANUFACTURING"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.MANUFACUTINGREPACKING"] },
                                        ]
                                    }, then: "$ledgerdetails.quantity", else: 0
                                }
                            },
                            BFAmt: { $cond: { if: { $lt: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] }, then: { $multiply: ["$ledgerdetails.wac", "$ledgerdetails.quantity"] }, else: 0 } },
                            ReceiveAmt: { $cond: { if: { $and: [{ $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.GOODSRECEIVE"] }, { $gte: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] }] }, then: { $multiply: ["$ledgerdetails.wac", "$ledgerdetails.quantity"] }, else: 0 } },
                            IssueAmt: { $cond: { if: { $and: [{ $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.STOCKISSUE"] }, { $gte: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] }] }, then: { $multiply: ["$ledgerdetails.wac", "$ledgerdetails.quantity"] }, else: 0 } },
                            TransferInAmt: {
                                $cond: {
                                    if: {
                                        $and: [
                                            { $gte: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] },
                                            {
                                                $or: [
                                                    { $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.TRANSFERIN"] },
                                                    { $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.CANCELTRANSFER"] },
                                                    { $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.STOCKTRANSFERRETURN"] },
                                                    { $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.MANUFACTURING"] },
                                                    { $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.MANUFACUTINGREPACKING"] },
                                                ]
                                            },
                                        ]
                                    }, then: { $multiply: ["$ledgerdetails.wac", "$ledgerdetails.quantity"] }, else: 0
                                }
                            },
                            TransferOutAmt: { $cond: { if: { $and: [{ $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.TRANSFEROUT"] }, { $gte: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] }] }, then: { $multiply: ["$ledgerdetails.wac", "$ledgerdetails.quantity"] }, else: 0 } },
                            AdjustAmt: { $cond: { if: { $and: [{ $eq: ["$ledgerdetails.transactiontype", "INVENTORIES.STOCKADJUST"] }, { $gte: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] }] }, then: { $multiply: ["$ledgerdetails.wac", "$ledgerdetails.quantity"] }, else: 0 } },
                            OtherAmt: {
                                $cond: {
                                    if: {
                                        $and: [{ $gte: ["$ledgerdetails.transactiondate", dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate))] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.GOODSRECEIVE"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.STOCKISSUE"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.TRANSFERIN"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.TRANSFEROUT"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.STOCKADJUST"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.CANCELTRANSFER"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.STOCKTRANSFERRETURN"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.MANUFACTURING"] },
                                            { $ne: ["$ledgerdetails.transactiontype", "INVENTORIES.MANUFACUTINGREPACKING"] },
                                        ]
                                    }, then: { $multiply: ["$ledgerdetails.wac", "$ledgerdetails.quantity"] }, else: 0
                                }
                            },
                        }
                    },
                    {
                        $group: {
                            _id: {
                                StoreageCode: '$StoreageCode',
                                StoreageDesc: '$StoreageDesc',
                            },
                            BF: { $sum: "$BF" },
                            Receive: { $sum: "$Receive" },
                            Issue: { $sum: "$Issue" },
                            TransferIn: { $sum: "$TransferIn" },
                            TransferOut: { $sum: "$TransferOut" },
                            Adjust: { $sum: "$Adjust" },
                            Other: { $sum: "$Other" },
                            BFAmt: { $sum: "$BFAmt" },
                            ReceiveAmt: { $sum: "$ReceiveAmt" },
                            IssueAmt: { $sum: "$IssueAmt" },
                            TransferInAmt: { $sum: "$TransferInAmt" },
                            TransferOutAmt: { $sum: "$TransferOutAmt" },
                            AdjustAmt: { $sum: "$AdjustAmt" },
                            OtherAmt: { $sum: "$OtherAmt" },
                            nextwac: { $last: "$nextwac" },
                            wac: { $last: "$wac" },
                        }
                    },
                    {
                        $project: {
                            StoreageCode: '$_id.StoreageCode',
                            StoreageDesc: '$_id.StoreageDesc',
                            uBeginningQty: '$BF',
                            dBeginningAmt: '$BFAmt',
                            uBeginningUnitCost: { $cond: { if: { $eq: ["$BF", 0] }, then: 0, else: { $divide: ['$BFAmt', '$BF'] } } },
                            uReceive: '$Receive',
                            uIssue: '$Issue',
                            uTransferIn: '$TransferIn',
                            uTransferOut: '$TransferOut',
                            uAdjust: '$Adjust',
                            uOther: '$Other',
                            uEndingQty: { $add: ['$BF', '$Receive', '$Issue', '$TransferIn', '$TransferOut', '$Adjust', '$Other'] },
                            dEndingAmount: { $multiply: [{ $cond: { if: { $eq: ["$nextwac", null] }, then: "$wac", else: "$nextwac" } }, { $add: ['$BF', '$Receive', '$Issue', '$TransferIn', '$TransferOut', '$Adjust', '$Other'] }] },
                            uEndingUnitCost: { $cond: { if: { $eq: ["$nextwac", null] }, then: "$wac", else: "$nextwac" } },
                            dReceive: '$ReceiveAmt',
                            dIssue: '$IssueAmt',
                            dTransferIn: '$TransferInAmt',
                            dTransferOut: '$TransferOutAmt',
                            dAdjust: '$AdjustAmt',
                            dOther: '$OtherAmt',
                        }
                    },
                    { $sort: { StoreageDesc: 1 } },
                ])
                    .exec();
                result = resulstStockledgers;
            }
            catch (error) {
                this.logger.error('findRTCommon179sub1error:', error);
            }
            return result;
        });
    }
    findRTCommon179sub2(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let store = { $match: {} };
                if (req.storeuid != '') {
                    store = { $match: { 'storeuid': new mongoose_1.Types.ObjectId(req.storeuid) } };
                }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resulstStockledgers = yield this.StockledgersModel.aggregate([
                    { $unwind: { path: "$ledgerdetails", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            'ledgerdetails.transactiondate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'itemmasteruid': new mongoose_1.Types.ObjectId(req.itemuid)
                        }
                    }, store,
                    { $lookup: { from: "inventorystores", localField: "storeuid", foreignField: "_id", as: "inventorystores" } },
                    { $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "ledgerdetails.todepartmentuid", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "inventorystores", localField: "ledgerdetails.tostoreuid", foreignField: "_id", as: "tostore" } },
                    { $unwind: { path: "$tostore", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "itemmasters", localField: "itemmasteruid", foreignField: "_id", as: "itemmasters" } },
                    { $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "ledgerdetails.patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "ledgerdetails.careprovideruid", foreignField: "_id", as: "users" } },
                    { $unwind: { path: "$users", preserveNullAndEmptyArrays: true } },
                    { $project: { _id: 0,
                            date: "$ledgerdetails.transactiondate",
                            Store: { $ifNull: ["$inventorystores.name", "-"] },
                            Itemname: { $ifNull: ["$itemmasters.name", "-"] },
                            MovementDetail: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$ledgerdetails.transactiondate", timezone: "+07:00", onNull: "-" } },
                            Reftype: '$ledgerdetails.transactiontype',
                            RefNo: '$ledgerdetails.transactionseqnum',
                            InOty: { $cond: { if: { $gte: ["$ledgerdetails.quantity", 0] }, then: '$ledgerdetails.quantity', else: 0 } },
                            OutQty: { $cond: { if: { $lte: ["$ledgerdetails.quantity", 0] }, then: { $multiply: ["$ledgerdetails.quantity", -1] }, else: 0 } },
                            ToStore: { $ifNull: ["$tostore.name", ""] },
                            ToLocation: { $ifNull: ["$departments.name", ""] },
                            HN: { $ifNull: ["$patients.mrn", ""] },
                            PatientName: { $ifNull: [{ $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] }, "-"] },
                            UnitCost: { $ifNull: ["$ledgerdetails.wac", 0] },
                            InAmt: { $multiply: ["$ledgerdetails.wac", { $cond: { if: { $gte: ["$ledgerdetails.quantity", 0] }, then: '$ledgerdetails.quantity', else: 0 } }] },
                            OutAmt: { $multiply: ["$ledgerdetails.wac", { $cond: { if: { $lte: ["$ledgerdetails.quantity", 0] }, then: { $multiply: ["$ledgerdetails.quantity", -1] }, else: 0 } }] },
                            Doctor: { $ifNull: ["$users.description", ""] },
                            batchid: { $ifNull: ["$batchid", ""] },
                        } },
                    { $sort: { Store: 1, Itemname: 1, date: 1, batchid: 1 } }
                ])
                    .exec();
                result = resulstStockledgers;
            }
            catch (error) {
                this.logger.error('findRTCommon179sub2error:', error);
            }
            return result;
        });
    }
    findRTCommon180(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let store = { $match: {} };
                if (req.storeuid != '') {
                    store = {
                        $match: {
                            'storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    };
                }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultgoodsreceives = yield this.goodsreceivesModel.aggregate([
                    {
                        $match: {
                            'receivedate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    store,
                    { $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false } },
                    { $lookup: { from: "itemmasters", localField: "itemdetails.itemmasteruid", foreignField: "_id", as: "itemmasters" } },
                    { $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true } },
                    { $addFields: { p_index: { $indexOfArray: ['$itemmasters.handlingstores.storeuid', new mongoose_1.Types.ObjectId(req.storeuid)] } } },
                    { $addFields: { p_binuid: { $arrayElemAt: ["$itemmasters.handlingstores.binuid", "$p_index"] } } },
                    { $lookup: { from: "inventorystores", localField: "storeuid", foreignField: "_id", as: "inventorystores" } },
                    { $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true } },
                    { $addFields: { b_index: { $indexOfArray: ['$inventorystores.storebins._id', '$p_binuid'] } } },
                    { $addFields: { b_array: { $arrayElemAt: ["$inventorystores.storebins.name", { $cond: { if: { $eq: ["$b_index", -1] }, then: null, else: "$b_index" } }] }, } },
                    { $lookup: { from: "referencevalues", localField: "itemdetails.quantityuom", foreignField: "_id", as: "UOM" } },
                    { $unwind: { path: "$UOM", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "vendors", localField: "vendoruid", foreignField: "_id", as: "vendors" } },
                    { $unwind: { path: "$vendors", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "vendors", localField: "itemmasters.manufacturedby", foreignField: "_id", as: "manufacturer" } },
                    { $unwind: { path: "$manufacturer", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "receivedby", foreignField: "_id", as: "receivedby" } },
                    { $unwind: { path: "$receivedby", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            receivedby: { $ifNull: ["$receivedby.name", "-"] },
                            Store: { $ifNull: ["$inventorystores.name", "-"] },
                            code: { $ifNull: ["$itemmasters.code", "-"] },
                            name: { $ifNull: ["$itemmasters.name", "-"] },
                            qty: { $add: ["$itemdetails.quantity", "$itemdetails.freequantity"] },
                            UOM: { $ifNull: ["$UOM.valuedescription", "-"] },
                            cost: "$itemdetails.unitprice",
                            TotalCost: "$itemdetails.netamount",
                            comment: { $ifNull: ["$itemdetails.comments", "-"] },
                            receivepurchase: { $ifNull: ["$grnnumber", "-"] },
                            vendor: { $ifNull: ["$vendors.name", "-"] },
                            receivedate: '$receivedate',
                            receivedDttm: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$receivedate", timezone: "+07:00", onNull: "-" } },
                            PO: { $ifNull: ["$comments", "-"] },
                            invoice: { $ifNull: ["$invoicenumber", "-"] },
                            LOS: { $trunc: { $divide: [{ $subtract: ["$itemdetails.expirydate", new Date()] }, 1000 * 3600 * 24] } },
                            ExpiryDate: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$itemdetails.expirydate", timezone: "+07:00", onNull: "-" } },
                            binlocation: { $ifNull: ['$b_array', ''] },
                            manufacturer: { $ifNull: ["$manufacturer.name", "-"] },
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    },
                    { $sort: { Store: 1, code: 1, binlocation: 1, receivedate: 1 } },
                ])
                    .exec();
                result = resultgoodsreceives;
            }
            catch (error) {
                this.logger.error('findRTCommon180error:', error);
            }
            return result;
        });
    }
    findRTCommon181(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultStockrequest = yield this.StockrequestsModel.aggregate([
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            let: {
                                p1: '$itemdetails.itemmasteruid',
                                p2: '$tostoreuid'
                            },
                            pipeline: [
                                { $unwind: { path: "$handlingstores", preserveNullAndEmptyArrays: false } },
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$p1'] },
                                                { $eq: ['$handlingstores.storeuid', '$$p2'] }
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "itemmasters",
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            let: {
                                p1: '$itemmasters.handlingstores.storeuid',
                                p2: '$itemmasters.handlingstores.binuid'
                            },
                            pipeline: [
                                { "$unwind": "$storebins" },
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$p1'] },
                                                { $eq: ['$storebins._id', '$$p2'] }
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "inventorystores",
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "stockledgers",
                            let: {
                                p1: { $max: '$itemdetails.itemmasteruid' },
                                p2: '$tostoreuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$itemmasteruid', '$$p1'] },
                                                { $eq: ['$storeuid', '$$p2'] }
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "stockledgers",
                        }
                    },
                    {
                        $addFields: {
                            "stockledgers": {
                                $arrayElemAt: ["$stockledgers", -1]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemdetails.statusuid",
                            foreignField: "_id",
                            as: "referencevaluesStatus"
                        }
                    },
                    {
                        $unwind: { path: "$referencevaluesStatus", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "fromdeptuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "tostoreuid",
                            foreignField: "_id",
                            as: "inventorystoresTo"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystoresTo", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "users", localField: "requestedby", foreignField: "_id", as: "requestby" } },
                    { $unwind: { path: "$requestby", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "itemdetails.approvedby", foreignField: "_id", as: "approveby" } },
                    { $unwind: { path: "$approveby", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            requestby: { $ifNull: ["$requestby.description", ""] },
                            approveby: { $ifNull: ["$approveby.description", ""] },
                            RequestDate: { $dateToString: { format: "%d/%m/%Y", date: "$requestdate", timezone: "+07:00", onNull: "" } },
                            RequstTime: { $dateToString: { format: "%H:%M", date: "$requestdate", timezone: "+07:00", onNull: "" } },
                            RequstNo: { $ifNull: ["$stockreqnumber", "-"] },
                            ReqLocation: { $ifNull: ["$departments.name", ""] },
                            ReqToSource: { $ifNull: ["$inventorystoresTo.name", ""] },
                            LocBin: { $ifNull: ["$inventorystores.storebins.name", ""] },
                            LOS: { $ifNull: [{ $ceil: { $divide: [{ $subtract: ["$stockledgers.expirydate", new Date()] }, 1000 * 3600 * 24] } }, ""] },
                            ExpiryDate: { $dateToString: { format: "%d/%m/%Y", date: "$stockledgers.expirydate", timezone: "+07:00", onNull: "" } },
                            ItemCode: { $ifNull: ["$itemmasters.code", ""] },
                            Description: { $ifNull: ["$itemmasters.name", ""] },
                            Qty: { $ifNull: ["$itemdetails.quantity", 0] },
                            UOM: { $ifNull: ["$referencevalues.valuedescription", ""] },
                            AvgCost: { $ifNull: [{ $arrayElemAt: ["$stockledgers.ledgerdetails.wac", -1] }, 0] },
                            Amount: { $ifNull: [{ $multiply: ["$itemdetails.quantity", { $arrayElemAt: ["$stockledgers.ledgerdetails.wac", -1] }] }, 0] },
                            Status: { $ifNull: ["$referencevaluesStatus.valuedescription", ""] },
                            Note: { $ifNull: [{ $ifNull: ["$itemdetails.comments", "$comments"] }, ""] },
                            user: _user.name
                        }
                    },
                    {
                        $sort: { ReqLocation: 1, ReqToSource: 1 }
                    }
                ])
                    .exec();
                result = resultStockrequest;
            }
            catch (error) {
                this.logger.error('findRTCommon181error:', error);
            }
            return result;
        });
    }
    findRTCommon182(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let item = { $match: {} };
                let store = { $match: {} };
                if (req.itemuid != '') {
                    item = {
                        $match: {
                            'itemdetails.itemmasteruid': new mongoose_1.Types.ObjectId(req.itemuid),
                        }
                    };
                }
                ;
                if (req.storeuid != '') {
                    store = {
                        $match: {
                            'fromstoreuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    };
                }
                ;
                const resultStocktransfers = yield this.StocktransfersModel.aggregate([
                    store,
                    {
                        $match: {
                            'transferdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'stockrequesttype': 'COMMON.TRANSFER',
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false }
                    },
                    item,
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters1"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$itemmasters1.handlingstores", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$itemmasters1.handlingstores.storeuid', '$fromstoreuid'] }
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "itemmasters1.handlingstores.storeuid",
                            foreignField: "_id",
                            as: "inventorystores1"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$inventorystores1.storebins", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$itemmasters1.handlingstores.binuid', '$inventorystores1.storebins._id'] }
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters2"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$itemmasters2.handlingstores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$itemmasters2.handlingstores.storeuid', '$tostoreuid'] }
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "itemmasters2.handlingstores.storeuid",
                            foreignField: "_id",
                            as: "inventorystores2"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$inventorystores2.storebins", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$itemmasters2.handlingstores.binuid', '$inventorystores2.storebins._id'] }
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemmasters1.baseuomuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            FromStore: { $ifNull: ["$inventorystores1.name", "-"] },
                            ToStore: { $ifNull: ["$inventorystores2.name", "-"] },
                            ItemCode: { $ifNull: ["$itemmasters1.code", "-"] },
                            ItemName: { $ifNull: ["$itemmasters1.name", "-"] },
                            FromBin: { $ifNull: ["$inventorystores1.storebins.name", "-"] },
                            ToBin: { $ifNull: ["$inventorystores2.storebins.name", "-"] },
                            BatchNo: { $ifNull: ["$itemdetails.batchid", "-"] },
                            ExpDate: { $dateToString: { format: "%d/%m/%Y", date: "$itemdetails.expirydate", timezone: "+07:00", onNull: "-" } },
                            FromStoreOnhand: { $ifNull: ["$itemdetails.fromstorestockinhand", "-"] },
                            Qty: "$itemdetails.quantity",
                            UOM: { $ifNull: ["$referencevalues.valuedescription", "-"] },
                            Amount: { $multiply: ["$itemdetails.quantity", "$itemdetails.wac"] },
                            Comment: { $ifNull: ["$itemdetails.comments", "-"] },
                            UOMfromSAP: { $ifNull: ["$referencevalues2.valuedescription", "-"] },
                            tranfersNo: "$stocktransfernumber",
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    }
                ])
                    .exec();
                result = resultStocktransfers;
            }
            catch (error) {
                this.logger.error('findRTCommon182error:', error);
            }
            return result;
        });
    }
    findRTCommon183(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let item = { $match: {} };
                let store = { $match: {} };
                if (req.itemuid != '') {
                    item = {
                        $match: {
                            'itemdetails.itemmasteruid': new mongoose_1.Types.ObjectId(req.itemuid),
                        }
                    };
                }
                ;
                if (req.storeuid != '') {
                    store = {
                        $match: {
                            'fromstoreuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    };
                }
                ;
                const resultStocktransfers = yield this.StocktransfersModel.aggregate([
                    store,
                    {
                        $match: {
                            'transferdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'stockrequesttype': 'COMMON.TRANSFER',
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false }
                    },
                    item,
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters1"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$itemmasters1.handlingstores", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$itemmasters1.handlingstores.storeuid', '$fromstoreuid'] }
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "itemmasters1.handlingstores.storeuid",
                            foreignField: "_id",
                            as: "inventorystores1"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$inventorystores1.storebins", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$itemmasters1.handlingstores.binuid', '$inventorystores1.storebins._id'] }
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters2"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$itemmasters2.handlingstores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$itemmasters2.handlingstores.storeuid', '$tostoreuid'] }
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "itemmasters2.handlingstores.storeuid",
                            foreignField: "_id",
                            as: "inventorystores2"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$inventorystores2.storebins", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$itemmasters2.handlingstores.binuid', '$inventorystores2.storebins._id'] }
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            From_Store: { $ifNull: ["$inventorystores1.name", "-"] },
                            RefNo: { $ifNull: ["$stocktransfernumber", "-"] },
                            Request_Store: { $ifNull: ["$inventorystores2.name", "-"] },
                            dDate: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$transferdate", timezone: "+07:00", onNull: "-" } },
                            Code: { $ifNull: ["$itemmasters1.code", "-"] },
                            Description: { $ifNull: ["$itemmasters1.name", "-"] },
                            Qty: { $ifNull: ["$itemdetails.quantity", 0] },
                            UOM: { $ifNull: ["$referencevalues.valuedescription", "-"] },
                            From_Bin_name: { $ifNull: ["$inventorystores1.storebins.name", "-"] },
                            Batch_No: { $ifNull: ["$itemdetails.batchid", "-"] },
                            Exp_Date: { $dateToString: { format: "%d/%m/%Y", date: "$itemdetails.expirydate", timezone: "+07:00", onNull: "-" } },
                            Bal_Qty: { $ifNull: ["$itemdetails.fromstorestockinhand", 0] },
                            Unit_Cost: { $ifNull: ["$itemdetails.wac", 0] },
                            Amount: { $ifNull: [{ $multiply: ["$itemdetails.wac", "$itemdetails.quantity"] }, 0] },
                            To_Bin_Location: { $ifNull: ["$inventorystores2.storebins.name", "-"] },
                            Comment: { $ifNull: ["$itemdetails.comments", "-"] },
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $sort: { From_Store: 1, RefNo: 1 }
                    }
                ]).exec();
                result = resultStocktransfers;
            }
            catch (error) {
                this.logger.error('findRTCommon183error:', error);
            }
            return result;
        });
    }
    findRTCommon184(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultItemmasters = yield this.itemmastersModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'activeto': null,
                            'reorderdetails.storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                            'handlingstores.storeuid': new mongoose_1.Types.ObjectId(req.storeuid)
                        }
                    },
                    {
                        $unwind: { path: "$reorderdetails", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            'reorderdetails.storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    },
                    {
                        $unwind: { path: "$handlingstores", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            'handlingstores.storeuid': new mongoose_1.Types.ObjectId(req.storeuid)
                        }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "handlingstores.storeuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "stockledgers",
                            let: {
                                w1: '$_id',
                                w2: '$inventorystores.parentstoreuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$itemmasteruid', '$$w1'] },
                                                { $eq: ['$storeuid', '$$w2'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "stockledgers1"
                        }
                    },
                    {
                        $unwind: { path: "$stockledgers1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            let: {
                                w1: '$reorderdetails.storeuid',
                                w2: '$handlingstores.binuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$w1'] }
                                            ]
                                        }
                                    }
                                },
                                { "$unwind": "$storebins" },
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$storebins._id', '$$w2'] }
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "inventorystores2",
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "purchasinguomuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            vendoruid_min: { $min: "$vendordetails.vendoruid" },
                        }
                    },
                    {
                        $lookup: {
                            from: "vendors",
                            localField: "vendoruid_min",
                            foreignField: "_id",
                            as: "vendors"
                        }
                    },
                    {
                        $unwind: { path: "$vendors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "inventorystores.parentstoreuid",
                            foreignField: "_id",
                            as: "inventorystoresparent"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystoresparent", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "itemmasters", localField: "_id", foreignField: "_id", as: "parentbin" } },
                    { $unwind: { path: "$parentbin", preserveNullAndEmptyArrays: true } },
                    { $addFields: { parentbinuid_index: { $indexOfArray: ['$parentbin.handlingstores.storeuid', '$inventorystoresparent._id'] } } },
                    { $addFields: { parentbinuid_lookup: { $arrayElemAt: ["$parentbin.handlingstores.binuid", { $cond: { if: { $eq: ["$parentbinuid_index", -1] }, then: null, else: "$parentbinuid_index" } }] }, } },
                    { $addFields: { parentbinname_index: { $indexOfArray: ['$inventorystoresparent.storebins._id', '$parentbinuid_lookup'] } } },
                    { $addFields: { parentbinname_lookup: { $arrayElemAt: ["$inventorystoresparent.storebins.name", { $cond: { if: { $eq: ["$parentbinname_index", -1] }, then: null, else: "$parentbinname_index" } }] }, } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                orgname: { $ifNull: ["$organisations.name", "-"] },
                                _id: { $ifNull: ['$_id', '-'] },
                                _storeuid: { $ifNull: ['$reorderdetails.storeuid', '-'] },
                                _binuid: { $ifNull: ['$handlingstores.binuid', '-'] },
                                _parentuid: { $ifNull: ['$parentstoreuid', '-'] },
                                ParentStoreCode: { $ifNull: ['$inventorystoresparent.code', '-'] },
                                StoreCode: { $ifNull: ['$inventorystores.code', '-'] },
                                StoreName: { $ifNull: ['$inventorystores.name', '-'] },
                                ItemCode: { $ifNull: ['$code', '-'] },
                                ItemName: { $ifNull: ['$name', '-'] },
                                ReorderLevel: { $ifNull: ['$reorderdetails.reorderlevel', ""] },
                                ReorderQty: { $ifNull: ['$reorderdetails.reorderquantity', 0] },
                                saleUOMdesc: { $ifNull: ['$referencevalues.valuedescription', '-'] },
                                FromBillLoc: { $ifNull: ['$parentbinname_lookup', '-'] },
                                ToBillLoc: { $ifNull: ['$inventorystores2.storebins.name', '-'] },
                                Vendor: { $ifNull: ['$vendors.name', '-'] }
                            },
                            sumFromStore: { $sum: { $ifNull: ['$stockledgers1.quantity', 0] } },
                        }
                    },
                    {
                        $match: {
                            '_id.ReorderLevel': { $ne: "" }
                        }
                    },
                    {
                        $lookup: {
                            from: "stockledgers",
                            let: {
                                w1: '$_id._id',
                                w2: '$_id._storeuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$itemmasteruid', '$$w1'] },
                                                { $eq: ['$storeuid', '$$w2'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "stockledgers2"
                        }
                    },
                    {
                        $unwind: { path: "$stockledgers2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $group: {
                            _id: {
                                orgname: '$_id.orgname',
                                ParentStoreCode: '$_id.ParentStoreCode',
                                StoreCode: '$_id.StoreCode',
                                StoreName: '$_id.StoreName',
                                ItemCode: '$_id.ItemCode',
                                ItemName: '$_id.ItemName',
                                ReorderLevel: '$_id.ReorderLevel',
                                ReorderQty: '$_id.ReorderQty',
                                saleUOMdesc: '$_id.saleUOMdesc',
                                FromBillLoc: '$_id.FromBillLoc',
                                ToBillLoc: '$_id.ToBillLoc',
                                Vendor: '$_id.Vendor',
                                sumFromStore: '$sumFromStore',
                                user: _user.name
                            },
                            sumToStore: { $sum: { $ifNull: ['$stockledgers2.quantity', 0] } }
                        }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $ne: ['$_id.ReorderLevel', 0] },
                                    { $lte: ['$sumToStore', '$_id.ReorderLevel'] }
                                ]
                            }
                        }
                    },
                    {
                        $sort: { '_id.ParentStoreCode': 1, '_id.StoreCode': 1, '_id.Vendor': 1, '_id.ItemCode': 1 }
                    }
                ]).exec();
                result = resultItemmasters;
            }
            catch (error) {
                this.logger.error('findRTCommon184 error:', error);
            }
            return result;
        });
    }
    findRTCommon185(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let patientt = { $match: {} };
                try {
                    if (req.patientuid != '' && req.patientuid != null) {
                        patientt = {
                            $match: {
                                'patients._id': new mongoose_1.Types.ObjectId(req.patientuid),
                            }
                        };
                    }
                }
                catch (res) {
                    req.patientuid = '';
                }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientbills = yield this.WelfaresModel.aggregate([
                    { $match: {
                            'relationship': "SELLF",
                            'plancode': { $ne: "9999" },
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A", 'activeto': { $eq: null }
                        } },
                    { $addFields: { employee: { $concat: ["$empnumberforsap", '00'] } } },
                    { $lookup: { from: "welfares", localField: "empnumberforsap", foreignField: "empnumberforsap", as: "welemp" } },
                    { $unwind: { path: "$welemp", preserveNullAndEmptyArrays: true } },
                    { $match: { "welemp.orguid": new mongoose_1.Types.ObjectId(req.organisationuid), "welemp.relationship": "SELLF" } },
                    { $lookup: { from: "plangroups", localField: "plancode", foreignField: "groupcode", as: "plangroups" } },
                    { $unwind: { path: "$plangroups", preserveNullAndEmptyArrays: true } },
                    { $match: { "plangroups.orguid": new mongoose_1.Types.ObjectId(req.organisationuid), } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "nationalid", foreignField: "nationalid", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $match: { "patients.orguid": new mongoose_1.Types.ObjectId(req.organisationuid), } },
                    patientt,
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientbills", localField: "patients._id", foreignField: "patientuid", as: "patientbills" } },
                    { $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: false } },
                    { $match: {
                            "patientbills.orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            'patientbills.statusflag': 'A', 'patientbills.iscancelled': false
                        } },
                    { $addFields: { IO: { $substr: ["$patientbills.sequencenumber", 3, 1] } } },
                    { $match: { IO: 'C' } },
                    { $match: {
                            "patientbills.billdate": {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            }
                        } },
                    { $lookup: { from: "tpas", localField: "patientbills.tpauid", foreignField: "_id", as: "tpas" } },
                    { $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "tpas.arcategoryuid", foreignField: "_id", as: "referencevalues" } },
                    { $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true } },
                    { $match: { $expr: { $or: [
                                    { $eq: ['$referencevalues.valuecode', 'T007'] },
                                    { $eq: ['$referencevalues.valuecode', 'T014'] },
                                ] } } },
                    { $unwind: { path: "$balanceamount", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            _id: 0,
                            employee: '$welfareid',
                            empnumberforsap: { $ifNull: ["$empnumberforsap", ""] },
                            Employee_ID: { $ifNull: ["$employee", ""] },
                            Docment_Date: { $dateToString: { format: "%Y/%m/%d %H:%m", date: "$patientbills.billdate", timezone: "+07:00", onNull: "-" } },
                            Document_Number: { $ifNull: ["$patientbills.sequencenumber", "-"] },
                            Amount: "$patientbills.totalbillamount",
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            Patient_Name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] }
                                        }
                                    },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] }
                                        }
                                    }
                                }
                            },
                            Employee_Name: { $concat: [{ $ifNull: ["$welemp.firstname", ""] }, " ", { $ifNull: ["$welemp.lastname", ""] }, " "] },
                            nationalid: { $ifNull: ["$nationalid", ""] },
                            interfacename: { $ifNull: ["$interfacename", ""] },
                            relationship: { $ifNull: ["$relationship", ""] },
                            doctorflag: { $ifNull: ["$doctorflag", ""] },
                            isnolimit: { $ifNull: ["$isnolimit", "0"] },
                            HCM_Plan_Group: { $ifNull: ["$plancode", ""] },
                            HIS_Plan_Group: { $ifNull: ["$plancode", ""] },
                            Balance: { $ifNull: ["$balanceamount.balance", "0"] },
                            Limit: { $ifNull: ["$plangroups.limitamount", "0"] },
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    { $sort: { 'Employee_ID': 1, 'Docment_Date': 1, 'Document_Number': 1 } }
                ])
                    .exec();
                result = resultpatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon185 error:', error);
            }
            return result;
        });
    }
    findRTCommon186(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let fromdate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let todate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const resultLabresults = yield this.labresultsModel.aggregate([
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            "createdat": {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate),
                            },
                            "patientuid": new mongoose_1.Types.ObjectId(req.patientuid),
                        }
                    },
                    {
                        $group: {
                            _id: {
                                patientuid: '$patientuid',
                                createdat: '$createdat',
                            },
                            labresultuid: { $push: '$_id' }
                        }
                    },
                    {
                        $sort: { '_id.createdat': -1 }
                    },
                    {
                        $limit: 5
                    },
                    {
                        $unwind: '$labresultuid'
                    },
                    {
                        $match: {
                            'labresultuid': { $ne: null }
                        }
                    },
                    {
                        $addFields: { 'labresult_and_date.labresultuid': '$labresultuid' }
                    },
                    {
                        $addFields: { 'labresult_and_date.createdat': '$_id.createdat' }
                    },
                    {
                        $group: {
                            _id: {
                                patientuid: '$_id.patientuid',
                            },
                            labresult_and_date: { $push: '$labresult_and_date' },
                            datedistinct: { $addToSet: "$_id.createdat" }
                        }
                    },
                    {
                        $unwind: '$datedistinct'
                    },
                    {
                        $sort: { 'datedistinct': -1 }
                    },
                    {
                        $group: {
                            _id: {
                                patientuid: '$_id.patientuid',
                                labresult_and_date: '$labresult_and_date'
                            },
                            datedistinct: { $push: "$datedistinct" }
                        }
                    },
                    {
                        $addFields: { 'labresult_and_date': '$_id.labresult_and_date' }
                    },
                    {
                        $lookup: {
                            from: 'patients',
                            localField: "_id.patientuid",
                            foreignField: "_id",
                            as: 'patients'
                        }
                    },
                    {
                        $unwind: { path: '$patients', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: '$patients.address'
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.genderuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.nationalityuid",
                            foreignField: "_id",
                            as: "referencevalues3"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues3", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "areas",
                            localField: "patients.address.areauid",
                            foreignField: "_id",
                            as: "areas"
                        }
                    },
                    {
                        $unwind: { path: "$areas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "cities",
                            localField: "patients.address.cityuid",
                            foreignField: "_id",
                            as: "cities"
                        }
                    },
                    {
                        $unwind: { path: "$cities", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "states",
                            localField: "patients.address.stateuid",
                            foreignField: "_id",
                            as: "states"
                        }
                    },
                    {
                        $unwind: { path: "$states", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "countries",
                            localField: "patients.address.countryuid",
                            foreignField: "_id",
                            as: "countries"
                        }
                    },
                    {
                        $unwind: { path: "$countries", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "allergies",
                            localField: "_id.patientvisituid",
                            foreignField: "patientvisituid",
                            as: "allergies"
                        }
                    },
                    {
                        $unwind: { path: "$allergies", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            year: {
                                $subtract: [
                                    {
                                        $toInt: { $substr: [{ $add: [{ $year: { "date": new Date(), "timezone": "+07:00" } }, 543] }, 0, 4] },
                                    },
                                    {
                                        $toInt: { $substr: [{ $add: [{ $year: { "date": "$patients.dateofbirth", "timezone": "+07:00" } }, 543] }, 0, 4] }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        $addFields: {
                            month: {
                                $cond: {
                                    if: {
                                        $lt: [
                                            { $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] },
                                            0
                                        ]
                                    }, then: { $add: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 11] },
                                    else: { $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            date: {
                                $subtract: [
                                    {
                                        $toInt: { $dateToString: { format: "%d", date: new Date(), timezone: "+07:00", onNull: "-" } }
                                    },
                                    {
                                        $toInt: { $dateToString: { format: "%d", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        $addFields: {
                            date1: { $arrayElemAt: ['$datedistinct', 0] },
                        }
                    },
                    {
                        $addFields: {
                            date2: { $arrayElemAt: ['$datedistinct', 1] },
                        }
                    },
                    {
                        $addFields: {
                            date3: { $arrayElemAt: ['$datedistinct', 2] },
                        }
                    },
                    {
                        $addFields: {
                            date4: { $arrayElemAt: ['$datedistinct', 3] },
                        }
                    },
                    {
                        $addFields: {
                            date5: { $arrayElemAt: ['$datedistinct', 4] },
                        }
                    },
                    {
                        $lookup: {
                            from: "labresults",
                            localField: "labresult_and_date.labresultuid",
                            foreignField: "_id",
                            as: "labresults"
                        }
                    },
                    {
                        $unwind: { path: "$labresults", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "labresults.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: { 'labresults.resultvalues.date': '$labresults.createdat' }
                    },
                    {
                        $addFields: {
                            monthvalue: {
                                $let: {
                                    vars: {
                                        monthsInString: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', { $subtract: ['$month', 1] }]
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            month1: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } },
                        }
                    },
                    {
                        $addFields: {
                            Month1name: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month1']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            Month1nameTH: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฏาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month1']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $unwind: '$labresults.resultvalues'
                    },
                    {
                        $project: {
                            _id: 0,
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            EN: { $ifNull: ['$patientvisits.visitid', '-'] },
                            name: {
                                $ifNull: [{
                                        $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                            },
                                            { $ifNull: ['$patients.lastname', ""] }]
                                    }, '-']
                            },
                            nameTH: {
                                $ifNull: [{
                                        $concat: ['$localnametitle.valuedescription', ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                            },
                                            { $ifNull: ["$patients.locallastname", ""] }]
                                    }, '-']
                            },
                            age: {
                                $concat: [
                                    {
                                        $toString: {
                                            $cond: {
                                                if: {
                                                    $and: [{ $lt: ['$date', 0] }, { $eq: ['$month', 0] }]
                                                }, then: { $subtract: ['$year', 1] },
                                                else: '$year'
                                            }
                                        }
                                    },
                                    'Y ',
                                    {
                                        $toString: {
                                            $cond: {
                                                if: {
                                                    $and: [{ $lt: ['$date', 0] }, { $eq: ['$month', 0] }]
                                                }, then: { $sum: ['$month', 11] },
                                                else: {
                                                    $cond: {
                                                        if: {
                                                            $and: [{ $lt: ['$date', 0] }]
                                                        }, then: { $subtract: ['$month', 1] },
                                                        else: '$month'
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    'M ',
                                    {
                                        $toString: {
                                            $cond: {
                                                if: {
                                                    $and: [{ $lt: ['$date', 0] }]
                                                }, then: { $sum: ['$date', '$monthvalue'] },
                                                else: '$date'
                                            }
                                        }
                                    },
                                    'D'
                                ]
                            },
                            ageTH: {
                                $concat: [
                                    {
                                        $toString: {
                                            $cond: {
                                                if: {
                                                    $and: [{ $lt: ['$date', 0] }, { $eq: ['$month', 0] }]
                                                }, then: { $subtract: ['$year', 1] },
                                                else: '$year'
                                            }
                                        }
                                    },
                                    ' ปี ',
                                    {
                                        $toString: {
                                            $cond: {
                                                if: {
                                                    $and: [{ $lt: ['$date', 0] }, { $eq: ['$month', 0] }]
                                                }, then: { $sum: ['$month', 11] },
                                                else: {
                                                    $cond: {
                                                        if: {
                                                            $and: [{ $lt: ['$date', 0] }]
                                                        }, then: { $subtract: ['$month', 1] },
                                                        else: '$month'
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    ' เดือน ',
                                    {
                                        $toString: {
                                            $cond: {
                                                if: {
                                                    $and: [{ $lt: ['$date', 0] }]
                                                }, then: { $sum: ['$date', '$monthvalue'] },
                                                else: '$date'
                                            }
                                        }
                                    },
                                    ' วัน'
                                ]
                            },
                            DOB: {
                                $concat: [
                                    { $dateToString: { format: "%d", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "" } },
                                    ' ',
                                    { $ifNull: ['$Month1name', '-'] },
                                    ' ',
                                    { $dateToString: { format: "%Y", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "" } }
                                ]
                            },
                            DOBTH: {
                                $concat: [
                                    { $dateToString: { format: "%d", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "" } },
                                    ' ',
                                    { $ifNull: ['$Month1nameTH', '-'] },
                                    ' ',
                                    { $substr: [{ $add: [{ $year: { "date": "$patients.dateofbirth", "timezone": "+07:00" } }, 543] }, 0, 4] },
                                ]
                            },
                            sex: { $concat: ['$referencevalues2.locallanguagedesc', '(', '$referencevalues2.valuedescription', ')'] },
                            nation: { $ifNull: ['$referencevalues3.valuedescription', '-'] },
                            address: { $concat: [{ $ifNull: ['$patients.address.address', ''] }, ' ', { $ifNull: ['$areas.name', ''] }, ' ', { $ifNull: ['$cities.name', ''] }, ' ', { $ifNull: ['$states.name', ''] }, ' ', { $ifNull: ['$patients.address.zipcodecode', ''] }, ' ', { $ifNull: ['$countries.name', ''] }] },
                            allergies: { $arrayElemAt: ['$allergies.drugallergies.allergenname', 0] },
                            date1: '$date1',
                            date2: '$date2',
                            date3: '$date3',
                            date4: '$date4',
                            date5: '$date5',
                            orderitemname: '$orderitems.name',
                            resultitem: {
                                $ifNull: [
                                    {
                                        $concat: [
                                            '$labresults.resultvalues.name',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ['$labresults.resultvalues.normalrange', ''] }, ""] }, then: "", else: ' ( ' }
                                            },
                                            { $ifNull: ['$labresults.resultvalues.normalrange', ''] },
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ['$labresults.resultvalues.normalrange', ''] }, ""] }, then: "", else: ' )' }
                                            },
                                        ]
                                    },
                                    ''
                                ]
                            },
                            value: ['$labresults.resultvalues.resultvalue', '$labresults.resultvalues.date', '$labresults.resultvalues.orderresultitemuid']
                        }
                    },
                    {
                        $group: {
                            _id: {
                                HN: '$HN',
                                EN: '$EN',
                                name: '$name',
                                age: '$age',
                                DOB: '$DOB',
                                nameTH: '$nameTH',
                                ageTH: '$ageTH',
                                DOBTH: '$DOBTH',
                                sex: '$sex',
                                nation: '$nation',
                                address: '$address',
                                date1: '$date1',
                                date2: '$date2',
                                date3: '$date3',
                                date4: '$date4',
                                date5: '$date5',
                                resultitem: '$resultitem',
                                allergies: '$allergies',
                                orderitemname: '$orderitemname',
                                orderresultitemuid: { $arrayElemAt: ["$value", 2] }
                            },
                            value: { $push: '$value' }
                        }
                    },
                    {
                        $addFields: {
                            month1: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$_id.date1", timezone: "+07:00", onNull: null } } } } },
                        }
                    },
                    {
                        $addFields: {
                            month2: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$_id.date2", timezone: "+07:00", onNull: null } } } } },
                        }
                    },
                    {
                        $addFields: {
                            month3: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$_id.date3", timezone: "+07:00", onNull: null } } } } },
                        }
                    },
                    {
                        $addFields: {
                            month4: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$_id.date4", timezone: "+07:00", onNull: null } } } } },
                        }
                    },
                    {
                        $addFields: {
                            month5: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$_id.date5", timezone: "+07:00", onNull: null } } } } },
                        }
                    },
                    {
                        $addFields: {
                            Month1name: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month1']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            Month2name: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month2']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            Month3name: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month3']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            Month4name: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month4']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            Month5name: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month5']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "orderresultitems",
                            localField: "_id.orderresultitemuid",
                            foreignField: "_id",
                            as: "orderresultitems"
                        }
                    },
                    {
                        $unwind: "$orderresultitems"
                    },
                    {
                        $project: {
                            _id: 0,
                            HN: { $ifNull: ['$_id.HN', '-'] },
                            EN: { $ifNull: ['$_id.EN', '-'] },
                            name: { $ifNull: ['$_id.name', '-'] },
                            age: { $ifNull: ['$_id.age', '-'] },
                            DOB: { $ifNull: ['$_id.DOB', '-'] },
                            nameTH: { $ifNull: ['$_id.nameTH', '-'] },
                            ageTH: { $ifNull: ['$_id.ageTH', '-'] },
                            DOBTH: { $ifNull: ['$_id.DOBTH', '-'] },
                            sex: { $ifNull: ['$_id.sex', '-'] },
                            nation: { $ifNull: ['$_id.nation', '-'] },
                            address: { $ifNull: ['$_id.address', '-'] },
                            resultitem: { $ifNull: ['$_id.resultitem', '-'] },
                            date1: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d ", date: '$_id.date1', timezone: "+07:00", onNull: "" } },
                                            '$Month1name',
                                            { $dateToString: { format: " %Y %H:%M", date: '$_id.date1', timezone: "+07:00", onNull: "" } },
                                        ]
                                    }, '']
                            },
                            date2: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d ", date: '$_id.date2', timezone: "+07:00", onNull: "" } },
                                            '$Month2name',
                                            { $dateToString: { format: " %Y %H:%M", date: '$_id.date2', timezone: "+07:00", onNull: "" } },
                                        ]
                                    }, '']
                            },
                            date3: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d ", date: '$_id.date3', timezone: "+07:00", onNull: "" } },
                                            '$Month3name',
                                            { $dateToString: { format: " %Y %H:%M", date: '$_id.date3', timezone: "+07:00", onNull: "" } },
                                        ]
                                    }, '']
                            },
                            date4: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d ", date: '$_id.date4', timezone: "+07:00", onNull: "" } },
                                            '$Month4name',
                                            { $dateToString: { format: " %Y %H:%M", date: '$_id.date4', timezone: "+07:00", onNull: "" } },
                                        ]
                                    }, '']
                            },
                            date5: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d ", date: '$_id.date5', timezone: "+07:00", onNull: "" } },
                                            '$Month5name',
                                            { $dateToString: { format: " %Y %H:%M", date: '$_id.date5', timezone: "+07:00", onNull: "" } },
                                        ]
                                    }, '']
                            },
                            allergies: { $ifNull: ['$_id.allergies', '-'] },
                            value1: {
                                $ifNull: [{
                                        $cond: {
                                            if: {
                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 0] }, 1] }, '$_id.date1']
                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 0] }, 0] }, else: {
                                                $cond: {
                                                    if: {
                                                        $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 1] }, 1] }, '$_id.date1']
                                                    }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 1] }, 0] }, else: {
                                                        $cond: {
                                                            if: {
                                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 2] }, 1] }, '$_id.date1']
                                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 2] }, 0] }, else: {
                                                                $cond: {
                                                                    if: {
                                                                        $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 3] }, 1] }, '$_id.date1']
                                                                    }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 3] }, 0] }, else: {
                                                                        $cond: {
                                                                            if: {
                                                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 4] }, 1] }, '$_id.date1']
                                                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 4] }, 0] }, else: ''
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }, '']
                            },
                            value2: {
                                $ifNull: [{
                                        $cond: {
                                            if: {
                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 0] }, 1] }, '$_id.date2']
                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 0] }, 0] }, else: {
                                                $cond: {
                                                    if: {
                                                        $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 1] }, 1] }, '$_id.date2']
                                                    }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 1] }, 0] }, else: {
                                                        $cond: {
                                                            if: {
                                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 2] }, 1] }, '$_id.date2']
                                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 2] }, 0] }, else: {
                                                                $cond: {
                                                                    if: {
                                                                        $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 3] }, 1] }, '$_id.date2']
                                                                    }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 3] }, 0] }, else: {
                                                                        $cond: {
                                                                            if: {
                                                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 4] }, 1] }, '$_id.date2']
                                                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 4] }, 0] }, else: ''
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }, '']
                            },
                            value3: {
                                $ifNull: [{
                                        $cond: {
                                            if: {
                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 0] }, 1] }, '$_id.date3']
                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 0] }, 0] }, else: {
                                                $cond: {
                                                    if: {
                                                        $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 1] }, 1] }, '$_id.date3']
                                                    }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 1] }, 0] }, else: {
                                                        $cond: {
                                                            if: {
                                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 2] }, 1] }, '$_id.date3']
                                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 2] }, 0] }, else: {
                                                                $cond: {
                                                                    if: {
                                                                        $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 3] }, 1] }, '$_id.date3']
                                                                    }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 3] }, 0] }, else: {
                                                                        $cond: {
                                                                            if: {
                                                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 4] }, 1] }, '$_id.date3']
                                                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 4] }, 0] }, else: ''
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }, '']
                            },
                            value4: {
                                $ifNull: [{
                                        $cond: {
                                            if: {
                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 0] }, 1] }, '$_id.date4']
                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 0] }, 0] }, else: {
                                                $cond: {
                                                    if: {
                                                        $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 1] }, 1] }, '$_id.date4']
                                                    }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 1] }, 0] }, else: {
                                                        $cond: {
                                                            if: {
                                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 2] }, 1] }, '$_id.date4']
                                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 2] }, 0] }, else: {
                                                                $cond: {
                                                                    if: {
                                                                        $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 3] }, 1] }, '$_id.date4']
                                                                    }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 3] }, 0] }, else: {
                                                                        $cond: {
                                                                            if: {
                                                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 4] }, 1] }, '$_id.date4']
                                                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 4] }, 0] }, else: ''
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }, '']
                            },
                            value5: {
                                $ifNull: [{
                                        $cond: {
                                            if: {
                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 0] }, 1] }, '$_id.date5']
                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 0] }, 0] }, else: {
                                                $cond: {
                                                    if: {
                                                        $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 1] }, 1] }, '$_id.date5']
                                                    }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 1] }, 0] }, else: {
                                                        $cond: {
                                                            if: {
                                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 2] }, 1] }, '$_id.date5']
                                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 2] }, 0] }, else: {
                                                                $cond: {
                                                                    if: {
                                                                        $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 3] }, 1] }, '$_id.date5']
                                                                    }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 3] }, 0] }, else: {
                                                                        $cond: {
                                                                            if: {
                                                                                $eq: [{ $arrayElemAt: [{ $arrayElemAt: ['$value', 4] }, 1] }, '$_id.date5']
                                                                            }, then: { $arrayElemAt: [{ $arrayElemAt: ['$value', 4] }, 0] }, else: ''
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }, '']
                            },
                            orderitemname: { $ifNull: ['$_id.orderitemname', '-'] },
                            displayorder: { $ifNull: ['$orderresultitems.code', '-'] },
                            fromdate: fromdate,
                            todate: todate,
                            user: _user.name
                        }
                    },
                    {
                        $sort: { orderitemname: 1, displayorder: 1 }
                    }
                ]).exec();
                result = resultLabresults;
            }
            catch (error) {
                this.logger.error('findRTCommon186 error:', error);
            }
            return result;
        });
    }
    findRTCommon192(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultOrderitems = yield this.orderitemsModel.aggregate([
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $lookup: {
                            from: "tariffs",
                            localField: "_id",
                            foreignField: "orderitemuid",
                            as: "tariffs"
                        }
                    },
                    {
                        $unwind: { path: "$tariffs", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'tariffs.activeto': { $eq: null },
                            'tariffs.tariffordersetuid': { $eq: null }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "tariffs.tarifftypeuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $or: [
                                {
                                    'referencevalues.valuecode': "GENER"
                                },
                                {
                                    'referencevalues.valuecode': "I"
                                },
                                {
                                    'referencevalues.valuecode': "F"
                                }
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: "ordercategories",
                            localField: "ordercatuid",
                            foreignField: "_id",
                            as: "orderCat"
                        }
                    },
                    {
                        $unwind: { path: "$orderCat", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'orderCat.ordercattype': "LAB"
                        }
                    },
                    {
                        $lookup: {
                            from: "ordercategories",
                            localField: "ordersubcatuid",
                            foreignField: "_id",
                            as: "orderSubCat"
                        }
                    },
                    {
                        $unwind: { path: "$orderSubCat", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'orderSubCat.ordercattype': "LAB"
                        }
                    },
                    {
                        $group: {
                            _id: {
                                Code: { $ifNull: ["$code", "-"] },
                                Item_Name: { $ifNull: ["$name", "-"] },
                                Alias_Name: { $ifNull: [{ $arrayElemAt: ["$aliasnames", 0] }, "-"] },
                                OrderSubcate: { $ifNull: ["$orderSubCat.description", "-"] },
                                OrderCate: { $ifNull: ["$orderCat.description", "-"] },
                                ActiveFrom: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$activefrom", timezone: "+07:00", onNull: "-" } },
                                ActiveTo: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$activeto", timezone: "+07:00", onNull: "-" } },
                                user: _user.name
                            },
                            Foreigner_Tariff: { $sum: { $cond: { if: { $eq: ["$referencevalues.valuecode", "F"] }, then: "$tariffs.unitprice", else: null } } },
                            OPD_Tariff: { $sum: { $cond: { if: { $eq: ["$referencevalues.valuecode", "GENER"] }, then: "$tariffs.unitprice", else: null } } },
                            IPD_Tariff: { $sum: { $cond: { if: { $eq: ["$referencevalues.valuecode", "I"] }, then: "$tariffs.unitprice", else: null } } }
                        }
                    },
                    {
                        $sort: { '_id.Code': 1 }
                    }
                ])
                    .exec();
                result = resultOrderitems;
            }
            catch (error) {
                this.logger.error('findRTCommon192 error:', error);
            }
            return result;
        });
    }
    findRTCommon249(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultout = yield this.DrugmastersModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'isnarcoticdrug': true,
                            'orderitemuid': { $ne: null },
                        },
                    },
                    { $lookup: { from: "referencevalues", localField: "narcoticdrugtypeuid", foreignField: "_id", as: "narcoticdrugtype" } },
                    { $unwind: { path: "$narcoticdrugtype", preserveNullAndEmptyArrays: true } },
                    { $match: { $or: [{ 'narcoticdrugtype.valuecode': 'P2' }] } },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$organisations.address", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: 'itemmasters',
                            localField: "orderitemuid",
                            foreignField: "orderitemuid",
                            as: 'itemmaster'
                        }
                    },
                    { $unwind: '$itemmaster' },
                    {
                        $lookup: {
                            from: 'vendors',
                            localField: "itemmaster.manufacturedby",
                            foreignField: "_id",
                            as: 'manufacturedby'
                        }
                    },
                    { $unwind: { path: "$manufacturedby", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'stockledgers',
                            localField: "itemmaster._id",
                            foreignField: "itemmasteruid",
                            as: 'ledger'
                        }
                    },
                    { $unwind: { path: "$ledger", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'inventorystores',
                            localField: "ledger.storeuid",
                            foreignField: "_id",
                            as: 'store'
                        }
                    },
                    { $unwind: { path: "$store", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$ledger.ledgerdetails", preserveNullAndEmptyArrays: true } },
                    { $match: { 'ledger.ledgerdetails.transactiondate': { $lte: new Date(req.todate) }, }, },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "ledger.quantityuom",
                            foreignField: "_id",
                            as: "uom"
                        }
                    },
                    { $unwind: { path: "$uom", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "vendors",
                            localField: "ledger.ledgerdetails.vendoruid",
                            foreignField: "_id",
                            as: "vendor"
                        }
                    },
                    { $unwind: { path: "$vendor", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "ledger.ledgerdetails.patientuid",
                            foreignField: "_id",
                            as: "patient"
                        }
                    },
                    { $unwind: { path: "$patient", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patient.localnametitleuid",
                            foreignField: "_id",
                            as: 'title'
                        }
                    },
                    { $unwind: { path: "$title", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            'narcotic_valuecode': '$referencevalues_n2_n3.valuecode',
                            'OrgName': "$organisations.description",
                            'OrgNo': { $ifNull: ["$organisations.address.address", "-"] },
                            'OrgDistrict': "$organisations.address.area",
                            'OrgPrefecture': "$organisations.address.city",
                            'OrgProvince': "$organisations.address.state",
                            'OrgWorkPhone': "$organisations.contact.workphone",
                            '_id': 0,
                            'ITEMNAME': '$itemmaster.name',
                            'ITEMCODE': '$itemmaster.code',
                            'REPDATE': {
                                $cond: {
                                    if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] },
                                    then: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    else: { $dateToString: { format: "%d/%m/%Y", date: "$ledger.ledgerdetails.transactiondate", timezone: "+07:00", onNull: "-" } },
                                }
                            },
                            'NARR': {
                                $cond: {
                                    if: {
                                        $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)]
                                    },
                                    then: "*B/F",
                                    else: { $concat: ['$ledger.ledgerdetails.transactiontype', " : ", '$ledger.ledgerdetails.transactionseqnum'] }
                                }
                            },
                            'DOCDATE': { $dateToString: { format: "%Y-%m-%d", date: "$ledger.ledgerdetails.transactiondate", timezone: "+07:00", onNull: "-" } },
                            'DOCNO': { $cond: { if: { $eq: ["$ledger.ledgerdetails.transactionseqnum", null] }, then: "", else: "$ledger.ledgerdetails.transactionseqnum" } },
                            'DOCTYPE': '$ledger.ledgerdetails.transactiontype',
                            'TITLE': '$title.valuedescription',
                            'FIRSTNAME': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.firstname" } },
                            'LASTNAME': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.lastname" } },
                            'NATIONID': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.nationalid" } },
                            'DOB': '$patient.dateofbirth',
                            "AGE": { $subtract: [{ $toInt: { $year: new Date() } }, { $toInt: { $year: '$patient.dateofbirth' } }] },
                            'ADDRESS': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.address.address" } },
                            'AREA': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.address.area" } },
                            'CITY': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.address.city" } },
                            'STATE': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.address.state" } },
                            'QTY': '$ledger.ledgerdetails.quantity',
                            'BF': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "$ledger.ledgerdetails.quantity", else: 0 } },
                            'STKIN': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: 0, else: { $cond: { if: { $gt: ["$ledger.ledgerdetails.quantity", 0] }, then: "$ledger.ledgerdetails.quantity", else: 0 } } } },
                            'STKOUT': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: 0, else: { $cond: { if: { $lt: ["$ledger.ledgerdetails.quantity", 0] }, then: "$ledger.ledgerdetails.quantity", else: 0 } } } },
                            'CF': { $cond: { if: { $gte: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "$ledger.ledgerdetails.quantity", else: 0 } },
                            'MM': {
                                $cond: {
                                    if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] },
                                    then: { $dateToString: { format: "%m", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    else: { $dateToString: { format: "%m", date: "$ledger.ledgerdetails.transactiondate", timezone: "+07:00", onNull: "-" } },
                                }
                            },
                            'UOM': '$uom.valuedescription',
                            'BATCH': '$ledger.batchid',
                            'expirydate': '$ledger.expirydate',
                            'HN': '$patient.mrn',
                            'ORG': '$orguid',
                            'NARCOTIC': '$isnarcoticdrug',
                            'ITEMUID': '$itemmaster._id',
                            'BFCF': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "BF", else: "CF" } },
                            'STORE': '$store.code',
                            'PERIOD': { $dateToString: { format: "%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            'DISPENSE': {
                                $cond: {
                                    if: {
                                        "$and": [
                                            { $gte: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] },
                                            {
                                                "$or": [
                                                    { $eq: ["$ledger.ledgerdetails.transactiontype", "INVENTORIES.STOCKDISPENSE"] },
                                                    { $eq: ["$ledger.ledgerdetails.transactiontype", "PHARMACYMASTER.IPFILL"] }
                                                ]
                                            }
                                        ]
                                    }, then: 1, else: 0
                                }
                            },
                            'LDGDATE': "$ledger.ledgerdetails.transactiondate",
                            'manufacturedby': '$manufacturedby.name',
                            'VENDOR': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$vendor.name" } },
                        }
                    },
                ])
                    .exec();
                result = resultout;
            }
            catch (error) {
                this.logger.error('findRTCommon249 error:', error);
            }
            return result;
        });
    }
    findRTCommon250(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultout = yield this.DrugmastersModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'isnarcoticdrug': true,
                            'orderitemuid': { $ne: null },
                        },
                    },
                    { $lookup: { from: "referencevalues", localField: "narcoticdrugtypeuid", foreignField: "_id", as: "referencevalues_n2_n3" } },
                    { $unwind: { path: "$referencevalues_n2_n3", preserveNullAndEmptyArrays: true } },
                    { $match: { $or: [{ 'referencevalues_n2_n3.valuecode': 'N2' }, { 'referencevalues_n2_n3.valuecode': 'N3' }] } },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$organisations.address", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: 'itemmasters',
                            localField: "orderitemuid",
                            foreignField: "orderitemuid",
                            as: 'itemmaster'
                        }
                    },
                    { $unwind: '$itemmaster' },
                    {
                        $lookup: {
                            from: 'vendors',
                            localField: "itemmaster.manufacturedby",
                            foreignField: "_id",
                            as: 'manufacturedby'
                        }
                    },
                    { $unwind: { path: "$manufacturedby", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'stockledgers',
                            localField: "itemmaster._id",
                            foreignField: "itemmasteruid",
                            as: 'ledger'
                        }
                    },
                    { $unwind: { path: "$ledger", preserveNullAndEmptyArrays: true } },
                    { $match: { 'ledger.ledgerdetails.transactiondate': { $lte: new Date(req.todate) }, }, },
                    {
                        $lookup: {
                            from: 'inventorystores',
                            localField: "ledger.storeuid",
                            foreignField: "_id",
                            as: 'store'
                        }
                    },
                    { $unwind: { path: "$store", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$ledger.ledgerdetails", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "ledger.quantityuom",
                            foreignField: "_id",
                            as: "uom"
                        }
                    },
                    { $unwind: { path: "$uom", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "vendors",
                            localField: "ledger.ledgerdetails.vendoruid",
                            foreignField: "_id",
                            as: "vendor"
                        }
                    },
                    { $unwind: { path: "$vendor", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "ledger.ledgerdetails.patientuid",
                            foreignField: "_id",
                            as: "patient"
                        }
                    },
                    { $unwind: { path: "$patient", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patient.localnametitleuid",
                            foreignField: "_id",
                            as: 'title'
                        }
                    },
                    { $unwind: { path: "$title", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            'narcotic_valuecode': '$referencevalues_n2_n3.valuecode',
                            'OrgName': "$organisations.description",
                            'OrgNo': { $ifNull: ["$organisations.address.address", "-"] },
                            'OrgDistrict': "$organisations.address.area",
                            'OrgPrefecture': "$organisations.address.city",
                            'OrgProvince': "$organisations.address.state",
                            'OrgWorkPhone': "$organisations.contact.workphone",
                            '_id': 0,
                            'ITEMNAME': '$itemmaster.name',
                            'ITEMCODE': '$itemmaster.code',
                            'REPDATE': {
                                $cond: {
                                    if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] },
                                    then: { $dateToString: { format: "%Y-%m-%d", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    else: { $dateToString: { format: "%Y-%m-%d", date: "$ledger.ledgerdetails.transactiondate", timezone: "+07:00", onNull: "-" } },
                                }
                            },
                            'NARR': {
                                $cond: {
                                    if: {
                                        $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)]
                                    },
                                    then: "*B/F",
                                    else: { $concat: ['$ledger.ledgerdetails.transactiontype', " : ", '$ledger.ledgerdetails.transactionseqnum'] }
                                }
                            },
                            'DOCDATE': { $dateToString: { format: "%Y-%m-%d", date: "$ledger.ledgerdetails.transactiondate", timezone: "+07:00", onNull: "-" } },
                            'DOCNO': { $cond: { if: { $eq: ["$ledger.ledgerdetails.transactionseqnum", null] }, then: "", else: "$ledger.ledgerdetails.transactionseqnum" } },
                            'DOCTYPE': '$ledger.ledgerdetails.transactiontype',
                            'TITLE': '$title.valuedescription',
                            'FIRSTNAME': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.firstname" } },
                            'LASTNAME': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.lastname" } },
                            'NATIONID': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.nationalid" } },
                            'DOB': '$patient.dateofbirth',
                            'AGE': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: 0, else: { $divide: [{ $subtract: [new Date(), "$patient.dateofbirth"] }, (365 * 24 * 60 * 60 * 1000)] } } },
                            'ADDRESS': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.address.address" } },
                            'AREA': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.address.area" } },
                            'CITY': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.address.city" } },
                            'STATE': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$patient.address.state" } },
                            'QTY': '$ledger.ledgerdetails.quantity',
                            'BF': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "$ledger.ledgerdetails.quantity", else: 0 } },
                            'STKIN': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: 0, else: { $cond: { if: { $gt: ["$ledger.ledgerdetails.quantity", 0] }, then: "$ledger.ledgerdetails.quantity", else: 0 } } } },
                            'STKOUT': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: 0, else: { $cond: { if: { $lt: ["$ledger.ledgerdetails.quantity", 0] }, then: "$ledger.ledgerdetails.quantity", else: 0 } } } },
                            'CF': { $cond: { if: { $gte: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "$ledger.ledgerdetails.quantity", else: 0 } },
                            'MM': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: { $month: new Date(req.fromdate) }, else: { $month: "$ledger.ledgerdetails.transactiondate" } } },
                            'UOM': '$uom.valuedescription',
                            'BATCH': '$ledger.batchid',
                            'HN': '$patient.mrn',
                            'ORG': '$orguid',
                            'NARCOTIC': '$isnarcoticdrug',
                            'ITEMUID': '$itemmaster._id',
                            'BFCF': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "BF", else: "CF" } },
                            'STORE': '$store.code',
                            'PERIOD': new Date(req.fromdate),
                            'DISPENSE': {
                                $cond: {
                                    if: {
                                        "$and": [
                                            { $gte: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] },
                                            {
                                                "$or": [
                                                    { $eq: ["$ledger.ledgerdetails.transactiontype", "INVENTORIES.STOCKDISPENSE"] },
                                                    { $eq: ["$ledger.ledgerdetails.transactiontype", "PHARMACYMASTER.IPFILL"] }
                                                ]
                                            }
                                        ]
                                    }, then: 1, else: 0
                                }
                            },
                            'LDGDATE': "$ledger.ledgerdetails.transactiondate",
                            'manufacturedby': '$manufacturedby.name',
                            'VENDOR': { $cond: { if: { $lt: ["$ledger.ledgerdetails.transactiondate", new Date(req.fromdate)] }, then: "", else: "$vendor.name" } },
                        }
                    },
                ])
                    .exec();
                result = resultout;
            }
            catch (error) {
                this.logger.error('findRTCommon250 error:', error);
            }
            return result;
        });
    }
    findRTCommon253(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    { $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            'enddate': null,
                            'bedoccupancy.isactive': true
                        }
                    },
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $addFields: {
                            IO: { $substr: ["$visitid", 0, 1] }
                        }
                    },
                    {
                        $match: {
                            IO: 'I'
                        }
                    },
                    {
                        $lookup: {
                            from: 'patients',
                            localField: "patientuid",
                            foreignField: "_id",
                            as: 'patients'
                        }
                    },
                    {
                        $unwind: { path: '$patients', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'beds',
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: 'beds'
                        }
                    },
                    {
                        $unwind: { path: '$beds', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'patientorders',
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: 'patientorders'
                        }
                    },
                    {
                        $unwind: { path: '$patientorders', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientorders.ordercattype': 'MEDICINE',
                            'patientorders.patientorderitems.enddate': { $exists: false }
                        }
                    },
                    {
                        $lookup: {
                            from: 'departments',
                            localField: "patientorders.orderdepartmentuid",
                            foreignField: "_id",
                            as: 'departments'
                        }
                    },
                    {
                        $unwind: { path: '$departments', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: '$patientorders.patientorderitems', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorders.patientorderitems.statusuid",
                            foreignField: "_id",
                            as: 'referencevalues1'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues1', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'referencevalues1.valuedescription': 'Ordered'
                        }
                    },
                    {
                        $lookup: {
                            from: 'drugmasters',
                            localField: "patientorders.patientorderitems.drugmasteruid",
                            foreignField: "_id",
                            as: 'drugmasters'
                        }
                    },
                    {
                        $unwind: { path: '$drugmasters', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "drugmasters.formuid",
                            foreignField: "_id",
                            as: 'referencevalues2'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues2', preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: 'referencevalues', localField: "drugmasters.defaultdosageuom", foreignField: "_id", as: 'dosageuom' } },
                    { $unwind: { path: "$dosageuom", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'frequencies', localField: "drugmasters.defaultfrequencyuid", foreignField: "_id", as: 'frequency' } },
                    { $unwind: { path: "$frequency", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorders.patientorderitems.quantityUOM",
                            foreignField: "_id",
                            as: 'referencevalues3'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues3', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            let: {
                                invstoreuid: '$patientorders.invstoreuid',
                                orderitemuid: '$patientorders.patientorderitems.orderitemuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$orderitemuid', '$$orderitemuid'] }
                                            ]
                                        }
                                    }
                                },
                                {
                                    $unwind: { path: '$handlingstores', preserveNullAndEmptyArrays: true }
                                },
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$handlingstores.storeuid', '$$invstoreuid'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "stockledgers",
                            let: {
                                itemmasteruid: '$itemmasters._id',
                                storeuid: '$itemmasters.handlingstores.storeuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$itemmasteruid', '$$itemmasteruid'] }
                                            ]
                                        }
                                    }
                                },
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$storeuid', '$$storeuid'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "stockledgers"
                        }
                    },
                    { $addFields: { 'onhand': { $sum: '$stockledgers.quantity' } } },
                    {
                        $lookup: {
                            from: "inventorystores",
                            let: {
                                binuid: '$itemmasters.handlingstores.binuid',
                                storeuid: '$itemmasters.handlingstores.storeuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$storeuid'] },
                                            ]
                                        }
                                    }
                                },
                                { $unwind: '$storebins' },
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$storebins._id', '$$binuid'] }
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $group: {
                            _id: {
                                POM: { $cond: { if: { $eq: [{ $ifNull: ['$patientorders.patientorderitems.broughtfromoutside', false] }, true] }, then: "Yes", else: "No" } },
                                dosage: { $ifNull: ['$drugmasters.defaultdosage', ''] },
                                dosageuom: { $ifNull: ['$dosageuom.valuedescription', ''] },
                                frequency: { $ifNull: ['$frequency.description', ''] },
                                HN: { $ifNull: ['$patients.mrn', ''] },
                                EN: { $ifNull: ['$visitid', ''] },
                                StoreName: { $ifNull: ['$inventorystores.name', '-'] },
                                OrderFromLocation: { $ifNull: ["$departments.name", '-'] },
                                Type: { $ifNull: ['$referencevalues2.valuedescription', '-'] },
                                ItemCode: { $ifNull: ['$patientorders.patientorderitems.chargecode', '-'] },
                                ItemName: { $ifNull: ['$patientorders.patientorderitems.orderitemname', '-'] },
                                UOM: { $ifNull: ['$referencevalues3.valuedescription', '-'] },
                                BedNo: { $ifNull: ['$beds.name', '-'] },
                                patientLocation: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                                binlocation: { $ifNull: ['$inventorystores.storebins.name', '-'] },
                                onhand: '$onhand',
                            },
                            Qty: { $sum: '$patientorders.patientorderitems.quantity' },
                        }
                    },
                    {
                        $project: {
                            POM: '$_id.POM',
                            user: _user.name,
                            patientLocation: '$_id.patientLocation',
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            StoreName: '$_id.StoreName',
                            OrderFromLocation: "$_id.OrderFromLocation",
                            Type: '$_id.Type',
                            ItemCode: '$_id.ItemCode',
                            ItemName: '$_id.ItemName',
                            Qty: '$Qty',
                            UOM: '$_id.UOM',
                            BedNo: '$_id.BedNo',
                            onhand: '$_id.onhand',
                            binlocation: '$_id.binlocation',
                            dosage: '$_id.dosage',
                            dosageuom: '$_id.dosageuom',
                            frequency: '$_id.frequency',
                        }
                    },
                    { $sort: { StoreName: 1, patientLocation: 1, BedNo: 1, HN: 1, ItemCode: 1 } }
                ])
                    .exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon253 error:', error);
            }
            return result;
        });
    }
    findRTCommon256(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let fromdate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let todate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const resultAllergies = yield this.allergiesModel.aggregate([
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "drugallergies.createdon": {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                        }
                    },
                    {
                        $lookup: {
                            from: 'patients',
                            localField: "patientuid",
                            foreignField: "_id",
                            as: 'patients'
                        }
                    },
                    {
                        $unwind: { path: '$patients', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            'drugallergies.Type': 'Drug'
                        }
                    },
                    {
                        $addFields: {
                            'foodallergies.Type': 'Food'
                        }
                    },
                    {
                        $addFields: {
                            'otherallergies.Type': 'Other'
                        }
                    },
                    {
                        $addFields: {
                            allallergies: {
                                $concatArrays: [
                                    '$drugallergies', '$otherallergies', '$foodallergies'
                                ]
                            }
                        }
                    },
                    {
                        $unwind: '$allallergies'
                    },
                    {
                        $match: {
                            "allallergies.createdon": {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                        }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "allallergies.eventtypeuid",
                            foreignField: "_id",
                            as: 'referencevalues'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'orderresultitems',
                            localField: "allallergies.resultitemuid",
                            foreignField: "_id",
                            as: 'orderresultitems'
                        }
                    },
                    {
                        $unwind: { path: '$orderresultitems', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            fromdate: fromdate,
                            todate: todate,
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            PatientName: { $ifNull: [{ $concat: [{ $ifNull: ['$patients.firstname', ""] }, ' ', { $ifNull: ['$patients.lastname', ""] }] }, "-"] },
                            allergyDescription: { $ifNull: ['$allallergies.comments', "-"] },
                            ALRGEVNTUID: { $ifNull: ['$referencevalues.valuedescription', 'Allergy'] },
                            AllergicTo: {
                                $cond: {
                                    if: {
                                        $eq: ['$allallergies.Type', 'Food']
                                    },
                                    then: { $ifNull: ["$orderresultitems.name", "-"] },
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: ['$allallergies.Type', 'Other']
                                            },
                                            then: { $ifNull: ["$allallergies.freetext", "-"] },
                                            else: {
                                                $ifNull: [
                                                    "$allallergies.allergenname",
                                                    {
                                                        $ifNull: [
                                                            "$allallergies.tradename",
                                                            {
                                                                $ifNull: [
                                                                    "$allallergies.druggroupname",
                                                                    {
                                                                        $ifNull: [
                                                                            "$allallergies.freetext", "-"
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            },
                            Type: { $ifNull: ['$allallergies.Type', "-"] },
                            Status: { $cond: { if: { $eq: ['$allallergies.isactive', true] }, then: "Active", else: 'Inactive' } },
                            IsHistorical: { $cond: { if: { $eq: ['$allallergies.isobservedinvisit', true] }, then: "Y", else: 'N' } },
                            cWhen: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$allallergies.onsetdate", timezone: "+07:00", onNull: "-" } },
                            user: _user.name
                        }
                    },
                ]).exec();
                result = resultAllergies;
            }
            catch (error) {
                this.logger.error('findRTCommon256 error:', error);
            }
            return result;
        });
    }
    findRTCommon257(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientvisits = yield this.ipfillordersModel.aggregate([
                    { $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "orderdate": {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'statusflag': "A"
                        } },
                    { $unwind: { path: '$ipfillorderitems', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'referencevalues', localField: "ipfillorderitems.statusuid", foreignField: "_id", as: 'status' } },
                    { $unwind: { path: '$status', preserveNullAndEmptyArrays: true } },
                    { $match: { $expr: { $and: [
                                    { $ne: ['$status.valuedescription', 'Dispensed'] },
                                    { $ne: ['$status.valuedescription', 'Cancelled'] }
                                ] } } },
                    { $lookup: { from: 'beds', localField: "ipfillorderitems.beduid", foreignField: "_id", as: 'beds' } },
                    { $unwind: { path: '$beds', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'referencevalues', localField: "ipfillorderitems.quantityUOM", foreignField: "_id", as: 'uom' } },
                    { $unwind: { path: '$uom', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'wards', localField: "warduid", foreignField: "_id", as: 'wards' } },
                    { $unwind: { path: '$wards', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'inventorystores', localField: "invstoreuid", foreignField: "_id", as: 'inventorystores' } },
                    { $unwind: { path: '$inventorystores', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'orderitems', localField: "ipfillorderitems.orderitemuid", foreignField: "_id", as: 'orderitems' } },
                    { $unwind: { path: '$orderitems', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'referencevalues', localField: "ipfillorderitems.routeuid", foreignField: "_id", as: 'route' } },
                    { $unwind: { path: '$route', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'patients', localField: "ipfillorderitems.patientuid", foreignField: "_id", as: 'patients' } },
                    { $unwind: { path: '$patients', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'patientvisits', localField: "ipfillorderitems.patientvisituid", foreignField: "_id", as: 'patientvisits' } },
                    { $unwind: { path: '$patientvisits', preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            StoreName: { $ifNull: ['$inventorystores.name', '-'] },
                            OrderFromLocation: { $ifNull: ["$wards.name", '-'] },
                            ipfillnumber: { $ifNull: ['$ipfillnumber', '-'] },
                            orderdate: { $dateToString: { format: "%d/%m/%Y", date: "$orderdate", timezone: "+07:00", onNull: "-" } },
                            Type: { $ifNull: ['$route.valuedescription', '-'] },
                            ItemCode: { $ifNull: ['$orderitems.code', '-'] },
                            ItemName: { $ifNull: ['$orderitems.name', '-'] },
                            Qty: { $ifNull: ['$ipfillorderitems.quantity', '-'] },
                            UOM: { $ifNull: ['$uom.valuedescription', '-'] },
                            BedNo: { $ifNull: ['$beds.name', '-'] },
                            Status: { $ifNull: ['$status.valuedescription', '-'] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            EN: { $ifNull: ['$patientvisits.visitid', '-'] },
                        }
                    },
                ])
                    .exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon257 error:', error);
            }
            return result;
        });
    }
    findRTCommon258(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultItemmasters = yield this.itemmastersModel.aggregate([
                    {
                        $match: {
                            "handlingstores.storeuid": new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    },
                    {
                        $unwind: '$handlingstores'
                    },
                    {
                        $match: {
                            "handlingstores.storeuid": new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    },
                    {
                        $lookup: {
                            from: 'stockledgers',
                            localField: "_id",
                            foreignField: "itemmasteruid",
                            as: 'stockledgers'
                        }
                    },
                    {
                        $unwind: { path: '$stockledgers', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$handlingstores.storeuid', '$stockledgers.storeuid'] }
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: 'inventorystores',
                            localField: "handlingstores.storeuid",
                            foreignField: "_id",
                            as: 'inventorystores'
                        }
                    },
                    {
                        $unwind: { path: '$inventorystores', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "baseuomuid",
                            foreignField: "_id",
                            as: 'referencevalues'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'inventorystores',
                            localField: "handlingstores.binuid",
                            foreignField: "storebins._id",
                            as: 'inventorystores2'
                        }
                    },
                    {
                        $unwind: { path: '$inventorystores2', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$handlingstores.storeuid', '$inventorystores2._id'] }
                                ]
                            }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                StoreName: { $ifNull: ['$inventorystores.name', '-'] },
                                Code: { $ifNull: ['$code', '-'] },
                                ItemName: { $ifNull: ['$name', '-'] },
                                UOM: { $ifNull: ['$referencevalues.valuedescription', '-'] },
                            },
                            Amount: { $sum: '$Amount' },
                            Quantity: { $sum: '$stockledgers.quantity' },
                            SubItemCost: { $push: { $arrayElemAt: ['$stockledgers.ledgerdetails.wac', -1] } },
                        }
                    },
                    {
                        $addFields: { Amount: { $multiply: [{ $arrayElemAt: ['$SubItemCost', -1] }, '$Quantity'] } }
                    },
                    {
                        $project: {
                            _id: 0,
                            StoreName: { $ifNull: ['$_id.StoreName', '-'] },
                            Code: { $ifNull: ['$_id.Code', '-'] },
                            ItemName: { $ifNull: ['$_id.ItemName', '-'] },
                            Quantity: { $ifNull: ['$Quantity', '-'] },
                            UOM: { $ifNull: ['$_id.UOM', '-'] },
                            SubItemCost: { $arrayElemAt: ['$SubItemCost', -1] },
                            Amount: { $ifNull: ['$Amount', '-'] },
                            BinLocation: '',
                            user: _user.name
                        }
                    }
                ]).exec();
                result = resultItemmasters;
            }
            catch (error) {
                this.logger.error('findRTCommon258 error:', error);
            }
            return result;
        });
    }
    findRTCommon259(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultItemmasters = yield this.itemmastersModel.aggregate([
                    {
                        $match: {
                            "handlingstores.storeuid": new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    },
                    {
                        $unwind: '$handlingstores'
                    },
                    {
                        $match: {
                            "handlingstores.storeuid": new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    },
                    {
                        $lookup: {
                            from: 'stockledgers',
                            localField: "_id",
                            foreignField: "itemmasteruid",
                            as: 'stockledgers'
                        }
                    },
                    {
                        $unwind: { path: '$stockledgers', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$handlingstores.storeuid', '$stockledgers.storeuid'] }
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: 'inventorystores',
                            localField: "handlingstores.storeuid",
                            foreignField: "_id",
                            as: 'inventorystores'
                        }
                    },
                    {
                        $unwind: { path: '$inventorystores', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "baseuomuid",
                            foreignField: "_id",
                            as: 'referencevalues'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'inventorystores',
                            localField: "handlingstores.binuid",
                            foreignField: "storebins._id",
                            as: 'inventorystores2'
                        }
                    },
                    {
                        $unwind: { path: '$inventorystores2', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: '$inventorystores2.storebins'
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$handlingstores.binuid', '$inventorystores2.storebins._id'] }
                                ]
                            }
                        }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$handlingstores.storeuid', '$inventorystores2._id'] }
                                ]
                            }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                StoreName: { $ifNull: ['$inventorystores.name', '-'] },
                                Code: { $ifNull: ['$code', '-'] },
                                ItemName: { $ifNull: ['$name', '-'] },
                                UOM: { $ifNull: ['$referencevalues.valuedescription', '-'] },
                                StoreBin: { $ifNull: ['$inventorystores2.storebins.name', '-'] }
                            },
                            StockQty: { $sum: '$stockledgers.quantity' },
                            SubItemCost: { $push: { $arrayElemAt: ['$stockledgers.ledgerdetails.wac', -1] } },
                        }
                    },
                    {
                        $addFields: { Amount: { $multiply: [{ $arrayElemAt: ['$SubItemCost', -1] }, '$StockQty'] } }
                    },
                    {
                        $project: {
                            StoreName: { $ifNull: ['$_id.StoreName', '-'] },
                            Code: { $ifNull: ['$_id.Code', '-'] },
                            ItemName: { $ifNull: ['$_id.ItemName', '-'] },
                            StockQty: { $ifNull: ['$StockQty', '-'] },
                            UOM: { $ifNull: ['$_id.UOM', '-'] },
                            SubItemCost: { $arrayElemAt: ['$SubItemCost', -1] },
                            Amount: { $ifNull: ['$Amount', '-'] },
                            StoreBin: { $ifNull: ['$_id.StoreBin', '-'] },
                            user: _user.name
                        }
                    }
                ]).exec();
                result = resultItemmasters;
            }
            catch (error) {
                this.logger.error('findRTCommon259 error:', error);
            }
            return result;
        });
    }
    findRTCommon265(req) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('patientvisituid = ' + req.patientvisituid);
            let result = [];
            try {
                const resultpatientorder = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            "patientvisituid": new mongoose_1.Types.ObjectId(req.patientvisituid),
                        }
                    },
                    { $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: 'ordersts'
                        }
                    },
                    { $unwind: { path: "$ordersts", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorderitems.quantityUOM",
                            foreignField: "_id",
                            as: 'quantityUOM'
                        }
                    },
                    { $unwind: { path: "$quantityUOM", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorderitems.dosageUOM",
                            foreignField: "_id",
                            as: 'dosageUOM'
                        }
                    },
                    { $unwind: { path: "$dosageUOM", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorderitems.routeuid",
                            foreignField: "_id",
                            as: 'routeuid'
                        }
                    },
                    { $unwind: { path: "$routeuid", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'frequencies', localField: "patientorderitems.frequencyuid", foreignField: "_id", as: 'dosagefrequency' } },
                    { $unwind: { path: "$dosagefrequency", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "drugmasters",
                            localField: "patientorderitems.drugmasteruid",
                            foreignField: "_id",
                            as: "drug"
                        }
                    },
                    { $unwind: { path: "$drug", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "drug.narcoticdrugtypeuid",
                            foreignField: "_id",
                            as: "referencevalues_n2_n3"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues_n2_n3", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "drug.prescibeuomuid",
                            foreignField: "_id",
                            as: 'uom'
                        }
                    },
                    {
                        $unwind: { path: "$uom", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: 'nametitle'
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    { $addFields: { max_bedoccupancy: { $max: "$patientvisits.bedoccupancy._id" }, } },
                    { $unwind: { path: "$patientvisits.bedoccupancy", preserveNullAndEmptyArrays: true } },
                    { $addFields: { _id_bedoccupancy: { $cond: { if: { $eq: ['$max_bedoccupancy', null] }, then: null, else: '$patientvisits.bedoccupancy._id' } } } },
                    { $match: { $expr: { $and: [{ $eq: ['$_id_bedoccupancy', '$max_bedoccupancy'] }] } } },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "patientvisits.bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "patientvisits.bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientorderitems.careprovideruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "users.defaultdepartment.uid",
                            foreignField: "_id",
                            as: "doctordepartment"
                        }
                    },
                    {
                        $unwind: { path: "$doctordepartment", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$organisations.address", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: "areas",
                            localField: "patients.address.areauid",
                            foreignField: "_id",
                            as: "area"
                        }
                    },
                    {
                        $unwind: { path: "$area", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "cities",
                            localField: "patients.address.cityuid",
                            foreignField: "_id",
                            as: "city"
                        }
                    },
                    {
                        $unwind: { path: "$city", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "states",
                            localField: "patients.address.stateuid",
                            foreignField: "_id",
                            as: "state"
                        }
                    },
                    {
                        $unwind: { path: "$state", preserveNullAndEmptyArrays: true }
                    },
                    { $match: { 'ORDSTSDESC': { $ne: 'Cancelled' } } },
                    {
                        $addFields: {
                            visitjourneysuid: { $max: "$patientvisits.visitjourneys.departmentuid" },
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "visitjourneysuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            PatientNameEN: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                        }
                    },
                    {
                        $addFields: {
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            'narcotic_valuecode': '$referencevalues_n2_n3.valuecode',
                            'Ward': { $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: { $ifNull: ["$wards.name", "-"] }, else: { $ifNull: ["$departments.name", "-"] } } },
                            'DoctorName': { $ifNull: ['$users.description', "-"] },
                            'DoctorLicense': { $ifNull: ['$users.licensenumber', "-"] },
                            'OrgNo': { $ifNull: ["$organisations.address.address", "-"] },
                            'OrgDistrict': { $ifNull: ["$organisations.address.area", "-"] },
                            'OrgPrefecture': { $ifNull: ["$organisations.address.city", "-"] },
                            'OrgProvince': { $ifNull: ["$organisations.address.state", "-"] },
                            'OrgWorkPhone': { $ifNull: ["$organisations.contact.workphone", "-"] },
                            _id: 0,
                            'OrderItemName': { $ifNull: ['$patientorderitems.orderitemname', "-"] },
                            'Instruction': 'ตามแพทย์สั่ง',
                            'Qty': { $ifNull: ['$patientorderitems.quantity', "-"] },
                            'Unit': { $ifNull: ['$uom.valuedescription', "-"] },
                            'narcotic': { $ifNull: ['$drug.isnarcoticdrug', "-"] },
                            'PatientName': {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$PatientNameTH", ""] }, ""] },
                                    else: { $ifNull: ["$PatientNameEN", ""] }
                                }
                            },
                            'AddressNo': { $ifNull: ["$patients.address.address", "-"] },
                            'AddressDistrict': { $ifNull: ["$area.name", "-"] },
                            'AddressPrefecture': { $ifNull: ["$city.name", "-"] },
                            'AddressProvince ': { $ifNull: ["$state.name", "-"] },
                            'AddressPhone ': { $ifNull: ["$patients.contact.mobilephone", "-"] },
                            'NationalID': { $ifNull: ['$patients.nationalid', "-"] },
                            'OrderDate': { $dateToString: { date: "$orderdate", timezone: "+07:00" } },
                            'HN': { $ifNull: ['$patients.mrn', "-"] },
                            'UserCode': { $ifNull: ['$users.code', "-"] },
                            'DoctorDepartment5': { $ifNull: ['$doctordepartment.name', "-"] },
                            'OrderNo': { $ifNull: ['$ordernumber', "-"] },
                            'Bed': { $ifNull: ["$beds.name", "-"] },
                            'EN': { $ifNull: ['$patientvisits.visitid', "-"] },
                            'PatientVisitUID': { $ifNull: ['$patientvisits._id', "-"] },
                            'PatientUID': { $ifNull: ['$patients._id', "-"] },
                            'FM': { $ifNull: ['$repcfg.documentno', "-"] },
                            'TEMPLATE': { $ifNull: ['$reptemplate.code', "-"] },
                            'ORDSTSDESC': { $ifNull: ["$ordersts.valuedescription", "-"] },
                            'DoctorDepartment': { $ifNull: ['$doctordepartment.code', "-"] },
                            'dosage': { $ifNull: ['$patientorderitems.dosage', "-"] },
                            'dosageUOM': { $ifNull: ['$dosageUOM.valuedescription', "-"] },
                            'dosagefrequency': { $ifNull: ['$dosagefrequency.description', "-"] },
                            'routeuid': { $ifNull: ['$routeuid.valuedescription', "-"] },
                            'orderdepartmentuid': { $ifNull: ['$patientorders.orderdepartmentuid', "-"] },
                            'quantityUOM': { $ifNull: ['$quantityUOM.valuedescription', "-"] }
                        }
                    },
                    { $match: { "narcotic": true,
                            'ORDSTSDESC': { $ne: 'Cancelled' } } },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$narcotic_valuecode', 'N2'] },
                                    { $eq: ['$narcotic_valuecode', 'N3'] },
                                ]
                            }
                        }
                    },
                ])
                    .exec();
                result = resultpatientorder;
            }
            catch (error) {
                console.log('findRTCommon265 error:', error);
            }
            return result;
        });
    }
    findRTCommon267(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const _division = yield this.findDivisionByCodeANDOrg('RTCOMMON267', req.organisationuid);
                const resultpatients = yield this.patientsModel.aggregate([
                    {
                        $match: {
                            '_id': new mongoose_1.Types.ObjectId(req.patientuid),
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A"
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "titleuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            mrn: "$mrn",
                            patientName: { $concat: ["$referencevalues.valuedescription", " ", "$firstname", " ", { $ifNull: ["$middlename", ""] }, " ", "$lastname"] },
                            orgdecsc: "$organisations.description",
                            orgcompany: "$organisations.companyname",
                            division: _division
                        }
                    }
                ])
                    .exec();
                result = resultpatients;
            }
            catch (error) {
                this.logger.error('findRTCommon267 error:', error);
            }
            return result;
        });
    }
    findRTCommon285(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = {
                    $match: {
                        'isBill': 'billed'
                    }
                };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientbills",
                            localField: "patientchargecodes.chargecodes.patientbilluid",
                            foreignField: "_id",
                            as: "patientbills"
                        }
                    },
                    {
                        $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: ['$patients.lastname', ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: ["$departments.name", "-"] },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: { $ifNull: ['$orderitems.name', '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            BILLNUMBER: { $ifNull: ['$patientbills.sequencenumber', '-'] },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $ifNull: ['$uomdesc.valuedescription', ' '] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                BILLNUMBER: '$BILLNUMBER',
                                uom: '$uom',
                                los: '$los',
                                itemnameTH: '$itemnameTH',
                                datefromto: '$datefromto'
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            BILLNUMBER: '$_id.BILLNUMBER',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            payoragreementTH: '$_id.payoragreementTH',
                            payoragreementEN: '$_id.payoragreementEN',
                            uom: '$_id.uom',
                            los: '$_id.los',
                            itemnameTH: '$_id.itemnameTH',
                            datefromto: '$_id.datefromto'
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { Department: 1, BILLNUMBER: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon285 error:', error);
            }
            return result;
        });
    }
    findRTCommon286(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let fromdttm = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let todttm = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let billingSubGroupUidsString = req.billingSubGroupUids === null || req.billingSubGroupUids === undefined || req.billingSubGroupUids === '' ? null : req.billingSubGroupUids.split(",");
                let billingGroupUidsString = req.billingGroupUids === null || req.billingGroupUids === undefined || req.billingGroupUids === '' ? null : req.billingGroupUids.split(",");
                let billingSubGroupUids = [];
                if (billingSubGroupUidsString != null) {
                    billingSubGroupUidsString.forEach(function (s) {
                        billingSubGroupUids.push(new mongoose_1.Types.ObjectId(s));
                    });
                }
                let billingGroupUids = [];
                if (billingGroupUidsString != null) {
                    billingGroupUidsString.forEach(function (s) {
                        billingGroupUids.push(new mongoose_1.Types.ObjectId(s));
                    });
                }
                let patientbill = { $match: {} };
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria) } };
                }
                else {
                    patientbill = { $match: { 'chargecodes.patientbilluid': null } };
                }
                if (req.reporttemplateuid == '5bebdddc7a789a015391a428') {
                    patientbill = { $match: {} };
                }
                let group = { $match: {} };
                let supGroup = { $match: {} };
                if (billingSubGroupUids[0] != undefined) {
                    supGroup = {
                        $match: {
                            "billinggroups2._id": {
                                $in: billingSubGroupUids
                            }
                        }
                    };
                }
                else {
                    if (billingGroupUids[0] != undefined) {
                        group = {
                            $match: {
                                "billinggroups1._id": {
                                    $in: billingGroupUids
                                }
                            }
                        };
                    }
                }
                const resultPatientbills = yield this.PatientchargecodesModel.aggregate([
                    {
                        $match: {
                            'patientvisituid': new mongoose_1.Types.ObjectId(req.patientvisituid),
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    { $unwind: { path: "$patientvisits.bedoccupancy", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$patientvisits.bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "patientvisits.bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "patientvisits.bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    { $unwind: "$chargecodes" },
                    {
                        $match: {
                            "chargecodes.statusflag": "A",
                            "$or": [{ "isr2c": { "$eq": null } }, { "isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "chargecodes.careprovideruid",
                            foreignField: "_id",
                            as: "doctor"
                        }
                    },
                    {
                        $unwind: { path: "$doctor", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    group,
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    supGroup,
                    {
                        $lookup: {
                            from: "users",
                            localField: "modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "chargecodes.patientorderuid", foreignField: "_id", as: "patientorders1" } },
                    {
                        $unwind: { path: "$patientorders1", preserveNullAndEmptyArrays: true }
                    },
                    { $addFields: { orderdate: "$patientorders1.orderdate" } },
                    { $lookup: { from: "patientorders", localField: "chargecodes.patientorderitemuid", foreignField: "patientorderitems._id", as: "patientorders2" } },
                    {
                        $unwind: { path: "$patientorders2", preserveNullAndEmptyArrays: true }
                    },
                    { $addFields: { patientorders2_index: { $indexOfArray: ['$patientorders2.patientorderitems._id', '$chargecodes.patientorderitemuid'] } } },
                    { $addFields: { patientorders2_last: { $arrayElemAt: ["$patientorders2.patientorderitems", { $cond: { if: { $eq: ["$patientorders2_index", -1] }, then: null, else: "$patientorders2_index" } }] }, } },
                    { $addFields: { ordercattype: '$patientorders2_last.ordercattype', } },
                    { $lookup: { from: "referencevalues", localField: "patientorders2_last.instructionuid", foreignField: "_id", as: "instruction" } },
                    { $unwind: { path: "$instruction", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "frequencies", localField: "patientorders2_last.frequencyuid", foreignField: "_id", as: "frequency" } },
                    { $unwind: { path: "$frequency", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "orderitems", localField: "chargecodes.orderitemuid", foreignField: "_id", as: "orderitems" } },
                    { $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            PatientNameEN: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                        }
                    },
                    {
                        $addFields: {
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            billno: {
                                $cond: {
                                    if: { $eq: [{ $ifNull: ['$chargecodes.patientbilluid', '*'] }, '*'] },
                                    then: '*',
                                    else: ''
                                }
                            },
                            preflang: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: true,
                                    else: false
                                }
                            },
                            doctorEN: { $cond: { if: { $eq: [{ $ifNull: ["$doctor.iscareprovider", false] }, true] }, then: { $ifNull: ['$doctor.printname', ''] }, else: '' } },
                            doctorTH: { $cond: { if: { $eq: [{ $ifNull: ["$doctor.iscareprovider", false] }, true] }, then: { $ifNull: ['$doctor.description', ''] }, else: '' } },
                            doctor: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $cond: { if: { $eq: [{ $ifNull: ["$doctor.iscareprovider", false] }, true] }, then: { $ifNull: ['$doctor.description', ''] }, else: '' } },
                                    else: { $cond: { if: { $eq: [{ $ifNull: ["$doctor.iscareprovider", false] }, true] }, then: { $ifNull: ['$doctor.printname', ''] }, else: '' } }
                                }
                            },
                            instructionEN: { $concat: [{ $ifNull: ["$instruction.valuedescription", ""] }, " ", { $ifNull: ["$frequency.description", ""] }] },
                            instructionTH: { $concat: [{ $ifNull: ["$instruction.locallanguagedesc", ""] }, " ", { $ifNull: ["$frequency.locallangdesc", ""] }] },
                            fromdttm: fromdttm,
                            todttm: todttm,
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            ward: { $ifNull: ['$wards.name', '-'] },
                            bed: { $ifNull: ['$beds.name', '-'] },
                            admissiondate: { $dateToString: { format: "%d/%m/%Y", date: "$patientvisits.startdate", timezone: "+07:00", onNull: "-" } },
                            EN: { $ifNull: ['$patientvisits.visitid', '-'] },
                            fullname: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$PatientNameTH", ""] }, ""] },
                                    else: { $ifNull: ["$PatientNameEN", ""] }
                                }
                            },
                            groupDescription: { $ifNull: ['$billinggroups1.description', '-'] },
                            subGroupDescription: { $ifNull: ['$billinggroups2.description', '-'] },
                            description: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$orderitems.description", ""] }, ""] },
                                    else: { $ifNull: ["$orderitems.name", ""] }
                                }
                            },
                            billdatesort: { $ifNull: ['$orderdate', '-'] },
                            billdate: { $dateToString: { format: "%d/%m/%Y", date: "$orderdate", timezone: "+07:00", onNull: "-" } },
                            quantity: { $ifNull: ['$chargecodes.quantity', 0] },
                            unitprice: { $ifNull: [{ $abs: '$chargecodes.unitprice' }, 0] },
                            unitcost: { $ifNull: [{ $multiply: ["$chargecodes.quantity", { $abs: "$chargecodes.unitprice" }] }, 0] },
                            payordiscount: { $ifNull: ['$chargecodes.payordiscount', 0] },
                            netamount: { $ifNull: ['$chargecodes.netamount', 0] },
                            CashierEN: { $ifNull: ['$users.printnname', '-'] },
                            CashierTH: { $ifNull: ['$users.description', '-'] },
                            groupDescriptionEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            subGroupDescriptionEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            user: _user.name,
                            ordercattype: { $ifNull: ['$ordercattype', ''] },
                            isdoctorshareitem: { $ifNull: ['$orderitems.isdoctorshareitem', ''] },
                            groupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            subGroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                        }
                    },
                    {
                        $group: {
                            _id: {
                                billno: '$billno',
                                preflang: '$preflang',
                                doctorEN: { $cond: { if: { $or: [{ $eq: ["$ordercattype", "MEDICINE"] }, { $eq: ["$isdoctorshareitem", true] }] }, then: '$doctorEN', else: "" } },
                                doctorTH: { $cond: { if: { $or: [{ $eq: ["$ordercattype", "MEDICINE"] }, { $eq: ["$isdoctorshareitem", true] }] }, then: '$doctorTH', else: "" } },
                                doctor: { $cond: { if: { $or: [{ $eq: ["$ordercattype", "MEDICINE"] }, { $eq: ["$isdoctorshareitem", true] }] }, then: '$doctor', else: "" } },
                                instructionEN: '$instructionEN',
                                instructionTH: '$instructionTH',
                                fromdttm: '$fromdttm',
                                todttm: '$todttm',
                                HN: '$HN',
                                ward: '$ward',
                                bed: '$bed',
                                admissiondate: '$admissiondate',
                                EN: '$EN',
                                fullname: '$fullname',
                                groupDescription: '$groupDescription',
                                subGroupDescription: '$subGroupDescription',
                                description: '$description',
                                billdate: '$billdate',
                                billdatesort: '$billdatesort',
                                unitprice: '$unitprice',
                                CashierEN: '$CashierEN',
                                CashierTH: '$CashierTH',
                                groupDescriptionEN: '$groupDescriptionEN',
                                subGroupDescriptionEN: '$subGroupDescriptionEN',
                                user: '$user',
                                ordercattype: '$ordercattype',
                                isdoctorshareitem: '$isdoctorshareitem',
                                groupCode: { $ifNull: ['$groupCode', '-'] },
                                subGroupCode: { $ifNull: ['$subGroupCode', '-'] },
                            },
                            netamount: { $sum: '$netamount' },
                            payordiscount: { $sum: '$payordiscount' },
                            unitcost: { $sum: '$unitcost' },
                            quantity: { $sum: '$quantity' },
                        }
                    },
                    {
                        $project: {
                            billno: '$_id.billno',
                            preflang: '$_id.preflang',
                            groupCode: { $ifNull: ['$_id.groupCode', '-'] },
                            subGroupCode: { $ifNull: ['$_id.subGroupCode', '-'] },
                            ordercattype: '$_id.ordercattype',
                            isdoctorshareitem: '$_id.isdoctorshareitem',
                            doctorEN: '$_id.doctorEN',
                            doctorTH: '$_id.doctorTH',
                            doctor: '$_id.doctor',
                            instructionEN: '$_id.instructionEN',
                            instructionTH: '$_id.instructionTH',
                            fromdttm: '$_id.fromdttm',
                            todttm: '$_id.todttm',
                            HN: '$_id.HN',
                            ward: '$_id.ward',
                            bed: '$_id.bed',
                            admissiondate: '$_id.admissiondate',
                            EN: '$_id.EN',
                            fullname: '$_id.fullname',
                            groupDescription: '$_id.groupDescription',
                            subGroupDescription: '$_id.subGroupDescription',
                            description: '$_id.description',
                            billdate: '$_id.billdate',
                            billdatesort: '$_id.billdatesort',
                            unitprice: '$_id.unitprice',
                            CashierEN: '$_id.CashierEN',
                            CashierTH: '$_id.CashierTH',
                            groupDescriptionEN: '$_id.groupDescriptionEN',
                            subGroupDescriptionEN: '$_id.subGroupDescriptionEN',
                            user: _user.name,
                            unitcost: '$unitcost',
                            quantity: '$quantity',
                            payordiscount: '$payordiscount',
                            netamount: '$netamount',
                        }
                    },
                    patientbill,
                    { $sort: { groupCode: 1, subGroupCode: 1, billdatesort: 1, description: 1 } }
                ])
                    .exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon286 error:', error);
            }
            return result;
        });
    }
    findRTCommon287(req) {
        return __awaiter(this, void 0, void 0, function* () {
            const _user = yield this.findOrgByLoginId(req.loginuid);
            let result = [];
            let fromamount = { $match: {} };
            if (req.fromamount != '' && req.fromamount != null) {
                fromamount = {
                    $match: {
                        'sumunitprice': { $gte: parseInt(req.fromamount) },
                    }
                };
            }
            else {
                req.fromamount = '';
            }
            let toamount = { $match: {} };
            if (req.toamount != '' && req.toamount != null) {
                toamount = {
                    $match: {
                        'sumunitprice': { $lte: parseInt(req.toamount) },
                    }
                };
            }
            else {
                req.toamount = '';
            }
            try {
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    { $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$visitpayors", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            enddate: { $ifNull: ['$enddate', null] }
                        }
                    },
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'enddate': { $eq: null },
                            'visitid': { $regex: /I/ },
                            'bedoccupancy.isactive': true,
                            "bedoccupancy.islodgerbed": { "$ne": true }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "visitstatusuid",
                            foreignField: "_id",
                            as: "referencevalues_financial_discharge"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues_financial_discharge", preserveNullAndEmptyArrays: true }
                    },
                    { $addFields: { visitjourneys_FinalDischarge: { $indexOfArray: ['$visitjourneys.comments', 'Final Discharge'] } } },
                    { $match: { $expr: { $eq: ['$visitjourneys_FinalDischarge', -1] } } },
                    { $addFields: { visitcareproviders_index: { $indexOfArray: ['$visitcareproviders.isprimarycareprovider', true] } } },
                    { $addFields: { visitcareproviders_lookup: { $arrayElemAt: ["$visitcareproviders.careprovideruid", { $cond: { if: { $eq: ["$visitcareproviders_index", -1] }, then: null, else: "$visitcareproviders_index" } }] }, } },
                    {
                        $group: {
                            _id: {
                                idvisit: "$_id",
                                EN: "$visitid",
                                idpatient: "$patientuid",
                                firstcare: '$visitcareproviders_lookup',
                                patientbilluid_isnull: '$patientbilluid_isnull'
                            },
                            sumunitprice: { $sum: '$unitprice' },
                            sumpayordiscount: { $sum: '$payordiscount' },
                            sumtotalprice: { $sum: '$totalprice' },
                            firststartdate: { $first: "$startdate" },
                            firstbed: { $last: "$bedoccupancy.beduid" },
                            firstward: { $last: "$bedoccupancy.warduid" },
                            firsttpa: { $first: "$visitpayors.tpauid" },
                            firstpayor: { $first: "$visitpayors.payoragreementuid" }
                        }
                    },
                    {
                        $project: {
                            idvisit: "$_id.idvisit",
                            EN: "$_id.EN",
                            idpatient: "$_id.idpatient",
                            sumunitprice: "$sumunitprice",
                            sumpayordiscount: "$sumpayordiscount",
                            sumtotalprice: "$sumtotalprice",
                            firststartdate: "$firststartdate",
                            firstbed: "$firstbed",
                            firstward: "$firstward",
                            firstcare: "$_id.firstcare",
                            firsttpa: "$firsttpa",
                            firstpayor: "$firstpayor",
                        }
                    },
                    {
                        $lookup: {
                            from: "deposits",
                            localField: "_id.idpatient",
                            foreignField: "patientuid",
                            as: "deposits"
                        }
                    },
                    {
                        $unwind: { path: "$deposits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            idvisit: "$_id.idvisit",
                            EN: "$_id.EN",
                            idpatient: "$_id.idpatient",
                            sumunitprice: "$sumunitprice",
                            sumpayordiscount: "$sumpayordiscount",
                            sumtotalprice: "$sumtotalprice",
                            firststartdate: "$firststartdate",
                            firstbed: "$firstbed",
                            firstward: "$firstward",
                            firstcare: "$firstcare",
                            firsttpa: "$firsttpa",
                            firstpayor: "$firstpayor",
                            sumdeposit: "$deposits.paidamount"
                        }
                    },
                    {
                        $group: {
                            _id: {
                                idvisit: "$idvisit",
                                EN: "$EN",
                                idpatient: "$idpatient",
                                sumunitprice: "$sumunitprice",
                                sumpayordiscount: "$sumpayordiscount",
                                sumtotalprice: "$sumtotalprice",
                                firststartdate: "$firststartdate",
                                firstbed: "$firstbed",
                                firstward: "$firstward",
                                firstcare: "$firstcare",
                                firsttpa: "$firsttpa",
                                firstpayor: "$firstpayor",
                            },
                            sumdeposit: { $sum: "$sumdeposit" }
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "_id.idpatient",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "_id.firstbed",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    { $addFields: { bedtemp: { $ifNull: ['$beds.iscensusbed', false] } } },
                    {
                        $lookup: {
                            from: "users",
                            localField: "_id.firstcare",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            let: { p1: "$_id.firsttpa" },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$p1'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            let: { p1: "$_id.firstpayor" },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$p1'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "diagnoses",
                            localField: "_id.idvisit",
                            foreignField: "patientvisituid",
                            as: "diagnoses"
                        }
                    },
                    {
                        $unwind: { path: "$diagnoses", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            problemuid_last: { $max: "$diagnoses.diagnosis.problemuid" },
                        }
                    },
                    {
                        $lookup: {
                            from: "problems",
                            localField: "problemuid_last",
                            foreignField: "_id",
                            as: "problems"
                        }
                    },
                    {
                        $unwind: { path: "$problems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "_id.firstward",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.genderuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            PatientNameEN: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                        }
                    },
                    {
                        $addFields: {
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            }
                        }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.nationalityuid", foreignField: "_id", as: "nationality" } },
                    { $unwind: { path: "$nationality", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                "idvisit": "$_id.idvisit",
                                "Time": { $dateToString: { format: "%Y/%m/%d %H:%M", date: "$_id.firststartdate", timezone: "+07:00", onNull: "-" } },
                                "EN": "$_id.EN",
                                "HN": "$patients.mrn",
                                "nationality": { $ifNull: ["$nationality.valuedescription", ""] },
                                "PatientName": {
                                    $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $ifNull: [{ $ifNull: ["$PatientNameTH", ""] }, ""] },
                                        else: { $ifNull: ["$PatientNameEN", ""] }
                                    }
                                },
                                "Room": { $ifNull: ["$beds.name", "-"] },
                                "istemporarybed": { $ifNull: ["$beds.istemporarybed", false] },
                                "DOB": { $dateToString: { format: "%Y/%m/%d", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } },
                                "Age": { $trunc: { $divide: [{ $subtract: [new Date(), "$patients.dateofbirth"] }, (365 * 24 * 60 * 60 * 1000)] } },
                                "Doctor": { $concat: [{ $ifNull: ["$users.name", ""] }, " ", { $ifNull: ["$users.lastname", ""] }] },
                                "Payor_Office": { $ifNull: ["$tpas.name", "-"] },
                                "Plan": { $ifNull: ["$payors.name", "-"] },
                                "LOS": { $floor: { $divide: [{ $subtract: [new Date(), "$_id.firststartdate"] }, 1000 * 3600 * 24] } },
                                "Deposit": { $ifNull: ["$sumdeposit", 0] },
                                "Amount": { $ifNull: ["$_id.sumunitprice", 0] },
                                "Discount": { $ifNull: ["$_id.sumpayordiscount", 0] },
                                "Net_Balance": { $ifNull: ["$_id.sumtotalprice", 0] },
                                "Type": { $cond: { if: { $lte: [{ $divide: [{ $subtract: [new Date(), "$patients.createdat"] }, (1000 * 3600 * 24)] }, 2] }, then: 'NEW', else: 'OLD' } },
                                "Ward": { $ifNull: ["$wards.name", "-"] },
                                "MALE": { $cond: { if: { $eq: ["$referencevalues2.valuedescription", "MALE"] }, then: 'MALE', else: null } },
                                "FEMALE": { $cond: { if: { $eq: ["$referencevalues2.valuedescription", "FEMALE"] }, then: 'FEMALE', else: null } },
                            },
                            "Diagnosis": { $push: "$problems._id" }
                        }
                    },
                    {
                        $addFields: {
                            Diagnosis_last: { $max: "$Diagnosis" },
                        }
                    },
                    {
                        $lookup: {
                            from: "problems",
                            localField: "Diagnosis_last",
                            foreignField: "_id",
                            as: "problems_last"
                        }
                    },
                    {
                        $unwind: { path: "$problems_last", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            _id: 0,
                            'istemporarybed': '$_id.istemporarybed',
                            "idvisit": "$_id.idvisit",
                            "Time": "$_id.Time",
                            "EN": "$_id.EN",
                            "HN": "$_id.HN",
                            "PatientName": "$_id.PatientName",
                            "Room": "$_id.Room",
                            "DOB": "$_id.DOB",
                            "Age": "$_id.Age",
                            "Doctor": "$_id.Doctor",
                            "Payor_Office": "$_id.Payor_Office",
                            "Plan": "$_id.Plan",
                            "LOS": "$_id.LOS",
                            "Deposit": "$_id.Deposit",
                            "Amount": "$_id.Amount",
                            "Discount": "$_id.Discount",
                            "Net_Balance": "$_id.Net_Balance",
                            "Type": "$_id.Type",
                            "Ward": "$_id.Ward",
                            "MALE": "$_id.MALE",
                            "FEMALE": "$_id.FEMALE",
                            "Diagnosis": { $ifNull: ["$problems_last.description", '-'] },
                            "fromamount": { $cond: { if: { $eq: [req.fromamount, ""] }, then: 'min', else: req.fromamount } },
                            "toamount": { $cond: { if: { $eq: [req.toamount, ""] }, then: 'max', else: req.toamount } },
                            "nationality": "$_id.nationality",
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "idvisit",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    { $addFields: { patientbilluid_isnull: { $cond: { if: { $eq: [{ $ifNull: ['$patientchargecodes.chargecodes.patientbilluid', null] }, null] }, then: '-', else: '$patientchargecodes.chargecodes.patientbilluid' } }, } },
                    { $addFields: { totalprice: { $cond: { if: { $eq: [{ $ifNull: ['$patientchargecodes.chargecodes.patientbilluid', null] }, null] }, then: '$patientchargecodes.chargecodes.netamount', else: 0 } }, } },
                    {
                        $addFields: {
                            payordiscount: {
                                $cond: {
                                    if: { $eq: [{ $ifNull: ['$patientchargecodes.chargecodes.patientbilluid', null] }, null] },
                                    then: '$patientchargecodes.chargecodes.payordiscount',
                                    else: 0
                                }
                            },
                        }
                    },
                    {
                        $addFields: {
                            unitprice: {
                                $cond: {
                                    if: { $eq: [{ $ifNull: ['$patientchargecodes.chargecodes.patientbilluid', null] }, null] },
                                    then: { $multiply: ['$patientchargecodes.chargecodes.orgquantity', '$patientchargecodes.chargecodes.unitprice'] },
                                    else: 0
                                }
                            },
                        }
                    },
                    {
                        $group: {
                            _id: {
                                'istemporarybed': '$istemporarybed',
                                "Time": "$Time",
                                "EN": "$EN",
                                "HN": "$HN",
                                "PatientName": "$PatientName",
                                "Room": "$Room",
                                "DOB": "$DOB",
                                "Age": "$Age",
                                "Doctor": "$Doctor",
                                "Payor_Office": "$Payor_Office",
                                "Plan": "$Plan",
                                "LOS": "$LOS",
                                "Deposit": "$Deposit",
                                "Amount": "$Amount",
                                "Discount": "$Discount",
                                "Net_Balance": "$Net_Balance",
                                "Type": "$Type",
                                "Ward": "$Ward",
                                "MALE": "$MALE",
                                "FEMALE": "$FEMALE",
                                "Diagnosis": "$Diagnosis",
                                "nationality": "$nationality",
                            },
                            sumunitprice: { $sum: '$unitprice' },
                            sumpayordiscount: { $sum: '$payordiscount' },
                            sumtotalprice: { $sum: '$totalprice' },
                            firststartdate: { $first: "$startdate" },
                            firstbed: { $last: "$bedoccupancy.beduid" },
                            firstward: { $last: "$bedoccupancy.warduid" },
                            firsttpa: { $first: "$visitpayors.tpauid" },
                            firstpayor: { $first: "$visitpayors.payoragreementuid" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            'istemporarybed': '$_id.istemporarybed',
                            "idvisit": "$_id.idvisit",
                            "Time": "$_id.Time",
                            "EN": "$_id.EN",
                            "HN": "$_id.HN",
                            "PatientName": "$_id.PatientName",
                            "Room": "$_id.Room",
                            "DOB": "$_id.DOB",
                            "Age": "$_id.Age",
                            "Doctor": "$_id.Doctor",
                            "Payor_Office": "$_id.Payor_Office",
                            "Plan": "$_id.Plan",
                            "LOS": "$_id.LOS",
                            "Deposit": "$_id.Deposit",
                            "Amount": "$sumtotalprice",
                            "Discount": "$sumpayordiscount",
                            "Net_Balance": "$sumtotalprice",
                            "Type": "$_id.Type",
                            "Ward": "$_id.Ward",
                            "MALE": "$_id.MALE",
                            "FEMALE": "$_id.FEMALE",
                            "Diagnosis": "$_id.Diagnosis",
                            "user": _user.name,
                            "nationality": "$_id.nationality",
                        }
                    },
                    {
                        $sort: { Ward: 1, EN: 1 }
                    }
                ])
                    .exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon287 error:', error);
            }
            return result;
        });
    }
    findRTCommon287sub1(req) {
        return __awaiter(this, void 0, void 0, function* () {
            const _user = yield this.findOrgByLoginId(req.loginuid);
            let result = [];
            try {
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    { $addFields: { enddate: { $ifNull: ['$enddate', null] } } },
                    { $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'enddate': { $eq: null },
                            'visitid': { $regex: /I/ },
                            'bedoccupancy.isactive': true,
                            "bedoccupancy.islodgerbed": { "$ne": true }
                        }
                    },
                    { $lookup: { from: "referencevalues", localField: "visitstatusuid", foreignField: "_id", as: "referencevalues_financial_discharge" } },
                    { $unwind: { path: "$referencevalues_financial_discharge", preserveNullAndEmptyArrays: true } },
                    { $addFields: { visitjourneys_FinalDischarge: { $indexOfArray: ['$visitjourneys.comments', 'Final Discharge'] } } },
                    { $match: { $expr: { $eq: ['$visitjourneys_FinalDischarge', -1] } } },
                    { $lookup: { from: "wards", localField: "bedoccupancy.warduid", foreignField: "_id", as: "wards" } },
                    { $unwind: { path: "$wards", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "beds", localField: "bedoccupancy.beduid", foreignField: "_id", as: "beds" } },
                    { $unwind: { path: "$beds", preserveNullAndEmptyArrays: true } },
                    { $addFields: { bedtemp: { $ifNull: ['$beds.iscensusbed', false] } } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.nationalityuid", foreignField: "_id", as: "nationality" } },
                    { $unwind: { path: "$nationality", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            Ward: { $ifNull: ['$wards.name', '-'] },
                            cnt_total1: { $cond: { if: { $ne: ['$nationality.valuecode', "TH"] }, then: 1, else: 1 } },
                            cnt_inter1: { $cond: { if: { $ne: ['$nationality.valuecode', "TH"] }, then: 1, else: 0 } },
                            cnt_thai1: { $cond: { if: { $eq: ['$nationality.valuecode', "TH"] }, then: 1, else: 0 } },
                            cnt_total: { $cond: { if: { $and: [{ $eq: ['$beds.iscensusbed', true] }] }, then: 1, else: 0 } },
                            cnt_inter: { $cond: { if: { $and: [{ $eq: ['$beds.iscensusbed', true] }, { $ne: ['$nationality.valuecode', 'TH'] }] }, then: 1, else: 0 } },
                            cnt_thai: { $cond: { if: { $and: [{ $eq: ['$beds.iscensusbed', true] }, { $eq: ['$nationality.valuecode', 'TH'] }] }, then: 1, else: 0 } },
                        }
                    },
                    { $group: { _id: { Ward: '$Ward', },
                            cnt_total: { $sum: '$cnt_total' },
                            cnt_inter: { $sum: '$cnt_inter' },
                            cnt_thai: { $sum: '$cnt_thai' },
                            cnt_total1: { $sum: '$cnt_total1' },
                            cnt_inter1: { $sum: '$cnt_inter1' },
                            cnt_thai1: { $sum: '$cnt_thai1' } } },
                    { $project: { _id: 0, Ward: '$_id.Ward',
                            cnt_total: '$cnt_total',
                            cnt_inter: '$cnt_inter',
                            cnt_thai: '$cnt_thai',
                            cnt_total1: '$cnt_total1',
                            cnt_inter1: '$cnt_inter1',
                            cnt_thai1: '$cnt_thai1'
                        } },
                    { $sort: { Ward: 1 } }
                ])
                    .exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon287sub1 error:', error);
            }
            return result;
        });
    }
    findRTCommon289(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const _division = yield this.findDivisionByCodeANDOrg('RTCOMMON289', req.organisationuid);
                const resultpatientvisit = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'patientuid': new mongoose_1.Types.ObjectId(req.patientuid)
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            NamePatient: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            LOS: { $ifNull: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, ""] },
                            year: { $dateToString: { format: " %Y", date: new Date(), timezone: "+07:00", onNull: "-" } },
                            month: { $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } },
                            date: { $dateToString: { format: "%d ", date: new Date(), timezone: "+07:00", onNull: "-" } },
                            styear: { $dateToString: { format: " %Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            stmonth: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$startdate", timezone: "+07:00", onNull: null } } } } },
                            stdate: { $dateToString: { format: "%d ", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            endyear: { $dateToString: { format: " %Y", date: "$enddate", timezone: "+07:00", onNull: null } },
                            endmonth: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$enddate", timezone: "+07:00", onNull: null } } } } },
                            endate: { $dateToString: { format: "%d ", date: "$enddate", timezone: "+07:00", onNull: "" } },
                            division: _division
                        }
                    },
                    {
                        $addFields: {
                            monthnow: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            monthstart: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$stmonth']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            monthend: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$endmonth']
                                    }
                                }
                            }
                        }
                    }
                ])
                    .exec();
                result = resultpatientvisit;
            }
            catch (error) {
                this.logger.error('findRTCommon289 error:', error);
            }
            return result;
        });
    }
    findRTCommon290(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let orderset = { $match: {} };
            if (req.orderset != '') {
                orderset = {
                    $match: {
                        "ordersetuid": new mongoose_1.Types.ObjectId(req.orderset)
                    }
                };
            }
            ;
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultorderset = yield this.tariffsModel.aggregate([
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "statusflag": "A",
                        }
                    }, orderset,
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "tarifftypeuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$ordersets.orderitems", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            'ordersets.orderitems.activeto': { $eq: null },
                        }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "ordersets.orderitems.orderitemuid",
                            foreignField: "_id",
                            as: "Corderitems"
                        }
                    },
                    {
                        $unwind: { path: "$Corderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                OrderSetCode: { $ifNull: ['$ordersets.code', "-"] },
                                NameSet: { $ifNull: ['$ordersets.name', "-"] },
                                TypeOrder: {
                                    $cond: {
                                        if: { $eq: ['$ordersets.packagebilling', false] }, then: "OrderSet",
                                        else: {
                                            $cond: {
                                                if: { $eq: ['$ordersets.isflexipackage', true] }, then: "FixPrice", else: 'Package'
                                            }
                                        }
                                    }
                                },
                                Activefrom: { $dateToString: { format: "%d/%m/%Y", date: "$ordersets.activefrom", timezone: "+07:00", onNull: "-" } },
                                ActiveTo: { $dateToString: { format: "%d/%m/%Y", date: "$ordersets.activeto", timezone: "+07:00", onNull: "-" } },
                                NoofDay: { $ifNull: ['$ordersets.numberofdays', '-'] },
                                Duration: { $ifNull: ['$ordersets.orderitems.duration', '-'] },
                                Tariff: { $ifNull: ['$referencevalues2.valuedescription', '-'] },
                                Tariffcode: { $ifNull: ['$referencevalues2.valuecode', '-'] },
                                unitprice: { $ifNull: ['$unitprice', 0] },
                                CodeItem: { $ifNull: ['$Corderitems.code', '-'] },
                                NameItem: { $ifNull: ['$Corderitems.name', '-'] },
                                Qty: { $ifNull: ['$ordersets.orderitems.quantity', 0] },
                                Amount: { $multiply: [{ $ifNull: ['$ordersets.orderitems.packageitemprice', 0] }, { $ifNull: ['$ordersets.orderitems.quantity', 0] }] },
                                user: _user.name,
                                keywordSearch: req.orderset
                            }
                        }
                    },
                    {
                        $sort: { 'results.OrderSetCode': 1, 'results.Tariff': -1, 'results.CodeItem': 1, }
                    }
                ])
                    .exec();
                result = resultorderset;
            }
            catch (error) {
                this.logger.error('findRTCommon290 error:', error);
            }
            return result;
        });
    }
    findRTCommon291(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let careprovideruids = { $match: {} };
            if (req.careprovideruids != '') {
                careprovideruids = {
                    $match: {
                        'patientorderitems.careprovideruid': new mongoose_1.Types.ObjectId(req.careprovideruids),
                    }
                };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientorders = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orderdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientbills",
                            localField: "patientvisituid",
                            foreignField: "patientvisituid",
                            as: "patientbills"
                        }
                    },
                    { $addFields: { sequencenumber: { $ifNull: ["$patientbills.sequencenumber", "-"] } } },
                    { $unwind: { path: "$sequencenumber", preserveNullAndEmptyArrays: false } },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientorderitems.careprovideruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "orderdepartmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    { $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: false } },
                    careprovideruids,
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientorderitems.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'orderitems.isdoctorshareitem': { $eq: true },
                            'orderitems.istaskgenerationreqd': { $eq: true }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: "referenWher"
                        }
                    },
                    {
                        $unwind: { path: "$referenWher", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'referenWher.valuedescription': { $eq: "Executed" }
                        }
                    },
                    {
                        $project: {
                            DoctorCode: { $ifNull: ["$users.code", "-"] },
                            DoctorName: { $ifNull: ["$users.description", "-"] },
                            PASID: "$patients.mrn",
                            name: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            EN: "$patientvisits.visitid",
                            DateTime: { $dateToString: { format: "%Y/%m/%d", date: "$patientorderitems.startdate", timezone: "+07:00", onNull: "-" } },
                            ItemCode: "$patientorderitems.chargecode",
                            ItemName: "$patientorderitems.orderitemname",
                            BillNumber: { $ifNull: ["$sequencenumber", "-"] },
                            GroupCodeCareprovider: { $ifNull: ["$users.usergroupcodes.groupcode", "-"] },
                            GroupNameCareproider: { $ifNull: ["$users.usergroupcodes.groupname", "-"] },
                            location: { $ifNull: ["$departments.name", "-"] },
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate))),
                            user: _user.name
                        }
                    },
                    {
                        $sort: { DoctorCode: 1 }
                    }
                ])
                    .exec();
                result = resultpatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon291 error:', error);
            }
            return result;
        });
    }
    findRTCommon292(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            let fromdate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
            let todate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
            try {
                const resultpatientorders = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orderdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientbills",
                            localField: "patientvisituid",
                            foreignField: "patientvisituid",
                            as: "patientbills"
                        }
                    },
                    { $addFields: { sequencenumber: { $ifNull: ["$patientbills.sequencenumber", "-"] } } },
                    { $unwind: { path: "$sequencenumber", preserveNullAndEmptyArrays: false } },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "orderdepartmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    { $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: false } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $and: [
                                {
                                    "referencevalues2.valuedescription": { $ne: "Report Authorised" }
                                },
                                {
                                    "referencevalues2.valuedescription": { $ne: "Executed" }
                                },
                                {
                                    "referencevalues2.valuedescription": { $ne: "Cancelled" }
                                },
                            ]
                        }
                    },
                    {
                        $unwind: "$patientorderitems"
                    },
                    {
                        $match: {
                            $expr: {
                                $eq: ['$patientorderitems.statusuid', '$referencevalues2._id']
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientorderitems.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            "orderitems.isdoctorshareitem": true,
                            "orderitems.istaskgenerationreqd": true
                        }
                    },
                    {
                        $project: {
                            startdate: fromdate,
                            enddate: todate,
                            pasid: { $ifNull: ['$patients.mrn', "-"] },
                            name: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            EN: { $ifNull: ["$patientvisits.visitid", "-"] },
                            itemcode: { $ifNull: ["$patientorderitems.chargecode", "-"] },
                            itemname: { $ifNull: ["$patientorderitems.orderitemname", "-"] },
                            ordernumber: { $ifNull: ["$sequencenumber", "-"] },
                            totalprice: { $ifNull: ["$patientorderitems.totalprice", "-"] },
                            status: { $ifNull: ["$referencevalues2.valuedescription", "-"] },
                            location: { $ifNull: ["$departments.name", "-"] },
                            DoctorFee: { $ifNull: ["$orderitems.isdoctorshareitem", "-"] },
                            Execute: { $ifNull: ["$orderitems.istaskgenerationreqd", "-"] },
                            user: _user.name
                        }
                    }
                ]).exec();
                result = resultpatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon292 error:', error);
            }
            return result;
        });
    }
    findRTCommon293() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Method not implemented.");
        });
    }
    findRTCommon294(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultWelfares = yield this.WelfaresModel.aggregate([
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            "doctorflag": "N"
                        }
                    },
                    {
                        $project: {
                            BUEMP: { $ifNull: ["$businessunitempid", "-"] },
                            IDCARD: { $ifNull: ["$nationalid", "-"] },
                            STATUS: { $ifNull: ["$status", "-"] },
                            Department: { $ifNull: ["$departmentcodefull", "-"] },
                            EmployeeRelation: { $ifNull: ["$relationship", "-"] },
                            Name: { $ifNull: ["$firstname", "-"] },
                            LastName: { $ifNull: ["$lastname", "-"] },
                            DateofBirth: { $dateToString: { format: "%d/%m/%Y", date: "$dateofbirth", timezone: "+07:00", onNull: "-" } },
                            Sex: { $ifNull: ["$gender", "-"] },
                            EmployeeFlag: { $ifNull: ["$worktype", "-"] },
                            PlanCode: { $ifNull: ["$plancode", "-"] },
                            PassportNo: { $ifNull: ["$passportnumber", "-"] },
                            user: _user.name
                        }
                    }
                ])
                    .exec();
                result = resultWelfares;
            }
            catch (error) {
                this.logger.error('findRTCommon294 error:', error);
            }
            return result;
        });
    }
    findRTCommon295(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultWelfares = yield this.WelfaresModel.aggregate([
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            "doctorflag": "Y"
                        }
                    },
                    {
                        $project: {
                            BUEMP: { $ifNull: ["$businessunitempid", "-"] },
                            IDCARD: { $ifNull: ["$nationalid", "-"] },
                            STATUS: { $ifNull: ["$status", "-"] },
                            Department: { $ifNull: ["$departmentcodefull", "-"] },
                            EmployeeRelation: { $ifNull: ["$relationship", "-"] },
                            Name: { $ifNull: ["$firstname", "-"] },
                            LastName: { $ifNull: ["$lastname", "-"] },
                            DateofBirth: { $dateToString: { format: "%d/%m/%Y", date: "$dateofbirth", timezone: "+07:00", onNull: "-" } },
                            Sex: { $ifNull: ["$gender", "-"] },
                            EmployeeFlag: { $ifNull: ["$worktype", "-"] },
                            PlanCode: { $ifNull: ["$plancode", "-"] },
                            PassportNo: { $ifNull: ["$passportnumber", "-"] },
                            user: _user.name
                        }
                    }
                ])
                    .exec();
                result = resultWelfares;
            }
            catch (error) {
                this.logger.error('findRTCommon295 error:', error);
            }
            return result;
        });
    }
    findRTCommon298(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDispensereturns = yield this.DispensereturnsModel.aggregate([
                    {
                        $match: {
                            'returndate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'patientuid': new mongoose_1.Types.ObjectId(req.patientuid),
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $match: {
                            'patientvisits.visitid': { $regex: /I/ }
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "statusuid",
                            foreignField: "_id",
                            as: "conreferencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$conreferencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "storeuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "returnedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            Patient_HN: { $ifNull: ["$patients.mrn", "-"] },
                            Patient_AN: { $ifNull: ["$patientvisits.visitid", "-"] },
                            NamePatient: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            DocNo: { $ifNull: ["$dispensereturnnumber", "-"] },
                            Location: { $ifNull: ["$inventorystores.name", "-"] },
                            ReturnDate: { $dateToString: { format: "%d/%m/%Y", date: "$returndate", timezone: "+07:00", onNull: "-" } },
                            ReturnTime: { $dateToString: { format: "%H:%M:%S", date: "$returndate", timezone: "+07:00", onNull: "-" } },
                            GRNType: "SALE RETURN",
                            Code: "$itemmasters.code",
                            Description: "$itemmasters.name",
                            Qty: "$itemdetails.quantity",
                            Unit: { $ifNull: ["$referencevalues2.valuedescription", 0] },
                            UnitPrice: { $ifNull: ["$itemdetails.wac", 0] },
                            TotalCost: { $ifNull: [{ $multiply: ["$itemdetails.wac", "$itemdetails.quantity"] }, 0] },
                            Status: { $ifNull: ["$conreferencevalues.valuedescription", "-"] },
                            comments: { $ifNull: ["$comments", ""] },
                            PatReturn: { $ifNull: ["$users.description", ""] }
                        }
                    }
                ])
                    .exec();
                result = resultDispensereturns;
            }
            catch (error) {
                this.logger.error('findRTCommon298 error:', error);
            }
            return result;
        });
    }
    findRTCommon299(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultCreditnotes = yield this.CreditnotesModel.aggregate([
                    {
                        $match: {
                            'creditdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'patientvisituid': new mongoose_1.Types.ObjectId(req.patientvisituid),
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "statusuid", foreignField: "_id", as: "conreferencevalues" } },
                    { $unwind: { path: "$conreferencevalues", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "useruid", foreignField: "_id", as: "users" } },
                    { $unwind: { path: "$users", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$creditnoteitems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "creditnoteitems.patientbilledcareprovideruid", foreignField: "_id", as: "doctor" } },
                    { $unwind: { path: "$doctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "orderitems", localField: "creditnoteitems.orderitemuid", foreignField: "_id", as: "orderitems" } },
                    { $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "itemmasters", localField: "creditnoteitems.orderitemuid", foreignField: "orderitemuid", as: "itemmasters" } },
                    { $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "itemmasters.baseuomuid", foreignField: "_id", as: "referencevalues2" } },
                    { $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientbills", localField: "orginvoicerefuid", foreignField: "_id", as: "patientbills" } },
                    { $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patientbills.patientbilleditems", preserveNullAndEmptyArrays: true } },
                    { $match: { $expr: { $and: [{ $eq: ['$creditnoteitems.patientbilleditemuid', '$patientbills.patientbilleditems._id'] },] } } },
                    {
                        $project: {
                            Patient_HN: { $ifNull: ["$patients.mrn", "-"] },
                            Patient_AN: { $ifNull: ["$patientvisits.visitid", "-"] },
                            NamePatient: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] }
                                        }
                                    },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] }
                                        }
                                    }
                                }
                            },
                            DocNo: { $ifNull: ["$sequencenumber", ""] },
                            Location: { $ifNull: ["$inventorystores.name", "-"] },
                            ReturnDate: { $dateToString: { format: "%d/%m/%Y", date: "$creditdate", timezone: "+07:00", onNull: "-" } },
                            ReturnTime: { $dateToString: { format: "%H:%M:%S", date: "$creditdate", timezone: "+07:00", onNull: "-" } },
                            GRNType: "SALE RETURN",
                            Code: "$orderitems.code",
                            Description: "$orderitems.name",
                            Qty: "$creditnoteitems.quantity",
                            Unit: { $ifNull: ["$referencevalues2.valuedescription", ''] },
                            UnitPrice: "$patientbills.patientbilleditems.unitprice",
                            payordiscount: { $subtract: [{ $multiply: ["$creditnoteitems.quantity", "$patientbills.patientbilleditems.unitprice"] }, '$creditnoteitems.creditamount'] },
                            TotalCost: "$creditnoteitems.creditamount",
                            Status: { $ifNull: ["$conreferencevalues.valuedescription", "-"] },
                            comments: { $cond: { if: { $eq: [{ $ifNull: ["$comments", ""] }, ""] }, then: '$doctor.description', else: { $concat: [{ $ifNull: ["$comments", ""] }, '/', '$doctor.description'] } } },
                            PatReturn: { $cond: { if: { $eq: [{ $ifNull: ["$users.description", ""] }, ""] }, then: '$users.printname', else: '$users.description' } },
                            billsequencenumber: { $ifNull: ["$patientbills.sequencenumber", ""] },
                            billdate: { $dateToString: { format: "%d/%m/%Y", date: "$patientbills.billdate", timezone: "+07:00", onNull: "-" } },
                        }
                    }
                ])
                    .exec();
                result = resultCreditnotes;
            }
            catch (error) {
                this.logger.error('findRTCommon299 error:', error);
            }
            return result;
        });
    }
    findRTCommon300(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientorders = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orderdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A',
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: '$patientorderitems', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "drugmasters",
                            localField: "patientorderitems.drugmasteruid",
                            foreignField: "_id",
                            as: "drugmasters"
                        }
                    },
                    {
                        $unwind: { path: "$drugmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'drugmasters.isantibiotic': true
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "drugmasters.defaultdosageuom",
                            foreignField: "_id",
                            as: "referencevalues_defaultdosageuom"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues_defaultdosageuom", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorderitems.routeuid",
                            foreignField: "_id",
                            as: "referencevalues_route"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues_route", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorderitems.frequencyuid",
                            foreignField: "_id",
                            as: "referencevalues_frequency"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues_frequency", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "druggroups",
                            localField: "drugmasters.druggroups",
                            foreignField: "_id",
                            as: "druggroups"
                        }
                    },
                    {
                        $unwind: { path: "$druggroups", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorderitems.quantityUOM",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'referencevalues2.valuedescription': { $ne: 'Cancelled' }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "orderdepartmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "diagnoses",
                            localField: "patientvisituid",
                            foreignField: "patientvisituid",
                            as: "diagnoses"
                        }
                    },
                    {
                        $unwind: { path: "$diagnoses", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            firstProblemuid: { $arrayElemAt: ['$diagnoses.diagnosis.problemuid', 0] },
                        }
                    },
                    {
                        $lookup: {
                            from: "problems",
                            localField: "firstProblemuid",
                            foreignField: "_id",
                            as: "problems"
                        }
                    },
                    {
                        $unwind: { path: "$problems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $group: {
                            _id: {
                                EN: { $ifNull: ['$patientvisits.visitid', '-'] },
                                orderNumber: { $ifNull: ['$ordernumber', '-'] },
                                howToUseDrug: {
                                    $ifNull: [{
                                            $concat: [
                                                { $ifNull: [{ $toString: '$drugmasters.defaultdosage' }, ""] },
                                                ' ',
                                                { $ifNull: ['$referencevalues_defaultdosageuom.valuedescription', ""] },
                                                ' ',
                                                { $ifNull: ['$referencevalues_route.valuedescription', ""] },
                                                ' ',
                                                { $ifNull: ['$referencevalues_frequency.valuedescription', ""] },
                                            ]
                                        }, '-']
                                },
                                department: { $ifNull: ['$departments.name', '-'] },
                                code: { $ifNull: ['$drugmasters.code', '-'] },
                                name: { $ifNull: ['$drugmasters.name', '-'] },
                                uom: { $ifNull: ['$referencevalues.valuedescription', '-'] },
                                drugGroup: { $ifNull: ['$druggroups.name', '-'] },
                                diag: { $ifNull: ['$problems.name', '-'] },
                                HN: { $ifNull: ['$patients.mrn', '-'] },
                                status: { $ifNull: ['$referencevalues2.valuedescription', '-'] },
                            },
                            qty: { $sum: '$patientorderitems.quantity' },
                            totalprice: { $sum: '$patientorderitems.totalprice' }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            EN: '$_id.EN',
                            orderNumber: '$_id.orderNumber',
                            howToUseDrug: '$_id.howToUseDrug',
                            department: '$_id.department',
                            code: '$_id.code',
                            name: '$_id.name',
                            qty: '$qty',
                            totalprice: '$totalprice',
                            uom: '$_id.uom',
                            drugGroup: '$_id.drugGroup',
                            diag: '$_id.diag',
                            HN: '$_id.HN',
                            status: '$_id.status',
                            user: _user.name,
                            fromdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            todate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $sort: { department: 1 }
                    }
                ]).exec();
                result = resultPatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon300 error:', error);
            }
            return result;
        });
    }
    findRTCommon301(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultStocktransfers = yield this.StocktransfersModel.aggregate([
                    {
                        $match: {
                            'transferdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'stockrequesttype': "COMMON.ISSUE"
                        }
                    },
                    {
                        $unwind: "$itemdetails"
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "fromstoreuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: "$inventorystores"
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: "$itemmasters"
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: "$referencevalues"
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "todeptuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: "$departments"
                    },
                    {
                        $lookup: {
                            from: "stockrequests",
                            localField: "itemdetails.stockrequestuid",
                            foreignField: "_id",
                            as: "stockrequests"
                        }
                    },
                    {
                        $unwind: { path: "$stockrequests", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            "results": {
                                orgname: { $ifNull: ["$organisations.name", "-"] },
                                "dDate": { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$transferdate", timezone: "+07:00", onNull: "-" } },
                                "dTime": { $dateToString: { format: "%H:%M", date: "$transferdate", timezone: "+07:00", onNull: "-" } },
                                "From_Store": { $ifNull: ["$departments.name", "-"] },
                                "Request_Store": { $ifNull: ["$inventorystores.name", "-"] },
                                "Code": { $ifNull: ["$itemmasters.code", "-"] },
                                "Description": { $ifNull: ["$itemmasters.name", "-"] },
                                "Batch_No": { $ifNull: ["$itemdetails.batchid", "-"] },
                                "From_Bin_name": "- -",
                                "Exp_Date": { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$itemdetails.expirydate", timezone: "+07:00", onNull: "-" } },
                                "Bal_Qty": "$itemdetails.fromstorestockinhand",
                                "Qty": "$itemdetails.quantity",
                                "UOM": "$referencevalues.valuedescription",
                                "TotalCost": { $multiply: ["$itemdetails.wac", "$itemdetails.quantity"] },
                                "Comment": { $ifNull: ["$itemdetails.comments", "-"] },
                                "transferno": { $ifNull: ["$stocktransfernumber", "-"] },
                                "requestno": { $ifNull: ["$stockrequests.stockreqnumber", "-"] }
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                orgname: "$results.orgname",
                                dDate: "$results.dDate",
                                dTime: "$results.dTime",
                                From_Store: "$results.From_Store",
                                Request_Store: "$results.Request_Store",
                                Code: "$results.Code",
                                Description: "$results.Description",
                                Batch_No: "$results.Batch_No",
                                From_Bin_name: "$results.From_Bin_name",
                                Exp_Date: "$results.Exp_Date",
                                Bal_Qty: "$results.Bal_Qty",
                                Qty: "$results.Qty",
                                UOM: "$results.UOM",
                                TotalCost: "$results.TotalCost",
                                Comment: "$results.Comment",
                                transferno: "$results.transferno",
                                requestno: "$results.requestno"
                            }
                        }
                    },
                    {
                        $sort: { _id: 1 }
                    },
                    {
                        $project: {
                            orgname: "$_id.orgname",
                            dDate: "$_id.dDate",
                            dTime: "$_id.dTime",
                            From_Store: "$_id.From_Store",
                            Request_Store: "$_id.Request_Store",
                            Code: "$_id.Code",
                            Description: "$_id.Description",
                            Batch_No: "$_id.Batch_No",
                            From_Bin_name: "$_id.From_Bin_name",
                            Exp_Date: "$_id.Exp_Date",
                            Bal_Qty: "$_id.Bal_Qty",
                            Qty: "$_id.Qty",
                            UOM: "$_id.UOM",
                            TotalCost: "$_id.TotalCost",
                            Comment: "$_id.Comment",
                            transferno: "$_id.transferno",
                            requestno: "$_id.requestno",
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    }
                ])
                    .exec();
                result = resultStocktransfers;
            }
            catch (error) {
                this.logger.error('findRTCommon301 error:', error);
            }
            return result;
        });
    }
    findRTCommon302(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultStocktransfers = yield this.StocktransfersModel.aggregate([
                    {
                        $match: {
                            'transferdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'stockrequesttype': "COMMON.ISSUE"
                        }
                    },
                    {
                        $unwind: "$itemdetails"
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "fromstoreuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: "$inventorystores"
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "todeptuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: "$departments"
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: "$itemmasters"
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: "$referencevalues"
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            "results": {
                                orgname: { $ifNull: ["$organisations.name", "-"] },
                                "dDate": { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$transferdate", timezone: "+07:00", onNull: "-" } },
                                "dTime": { $dateToString: { format: "%H:%M", date: "$transferdate", timezone: "+07:00", onNull: "-" } },
                                "From_Store": { $ifNull: ["$departments.name", "-"] },
                                "Request_Store": { $ifNull: ["$inventorystores.name", "-"] },
                                "RefNo": { $ifNull: ["$stocktransfernumber", "-"] },
                                "Code": { $ifNull: ["$itemmasters.code", "-"] },
                                "Description": { $ifNull: ["$itemmasters.name", "-"] },
                                "Batch_No": { $ifNull: ["$itemdetails.batchid", "-"] },
                                "From_Bin_name": "- -",
                                "Exp_Date": { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$itemdetails.expirydate", timezone: "+07:00", onNull: "-" } },
                                "Bal_Qty": "$itemdetails.fromstorestockinhand",
                                "Qty": "$itemdetails.quantity",
                                "UOM": "$referencevalues.valuedescription",
                                "TotalCost": { $multiply: ["$itemdetails.wac", "$itemdetails.quantity"] },
                                "Comment": { $ifNull: ["$itemdetails.comments", "-"] }
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                orgname: "$results.orgname",
                                dDate: "$results.dDate",
                                dTime: "$results.dTime",
                                From_Store: "$results.From_Store",
                                Request_Store: "$results.Request_Store",
                                RefNo: "$results.RefNo",
                                Code: "$results.Code",
                                Description: "$results.Description",
                                Batch_No: "$results.Batch_No",
                                From_Bin_name: "$results.From_Bin_name",
                                Exp_Date: "$results.Exp_Date",
                                Bal_Qty: "$results.Bal_Qty",
                                Qty: "$results.Qty",
                                UOM: "$results.UOM",
                                TotalCost: "$results.TotalCost",
                                Comment: "$results.Comment"
                            }
                        }
                    },
                    {
                        $sort: { _id: 1 }
                    },
                    {
                        $project: {
                            orgname: "$_id.orgname",
                            dDate: "$_id.dDate",
                            dTime: "$_id.dTime",
                            From_Store: "$_id.From_Store",
                            Request_Store: "$_id.Request_Store",
                            RefNo: "$_id.RefNo",
                            Code: "$_id.Code",
                            Description: "$_id.Description",
                            Batch_No: "$_id.Batch_No",
                            From_Bin_name: "$_id.From_Bin_name",
                            Exp_Date: "$_id.Exp_Date",
                            Bal_Qty: "$_id.Bal_Qty",
                            Qty: "$_id.Qty",
                            UOM: "$_id.UOM",
                            TotalCost: "$_id.TotalCost",
                            Comment: "$_id.Comment",
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    }
                ])
                    .exec();
                result = resultStocktransfers;
            }
            catch (error) {
                this.logger.error('findRTCommon302 error:', error);
            }
            return result;
        });
    }
    findRTCommon303(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let fromdate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let todate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultItemmasters = yield this.StockdispensesModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            "fromstoreuid": new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    },
                    { $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false } },
                    { $addFields: { M1: { $dateToString: { format: "%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: 0 } } } },
                    { $addFields: { M2: { $dateToString: { format: "%m/%Y", date: { $add: [new Date(req.fromdate), 31 * 24 * 60 * 60000] }, timezone: "+07:00", onNull: 0 } } } },
                    { $addFields: { M3: { $dateToString: { format: "%m/%Y", date: { $add: [new Date(req.fromdate), 62 * 24 * 60 * 60000] }, timezone: "+07:00", onNull: 0 } } } },
                    { $addFields: { Mcmp: { $dateToString: { format: "%m/%Y", date: '$dispensedate', timezone: "+07:00", onNull: 0 } } } },
                    {
                        $group: {
                            _id: {
                                orguid: { $ifNull: ['$orguid', ""] },
                                fromstoreuid: '$fromstoreuid',
                                itemmasteruid: '$itemdetails.itemmasteruid',
                                Month1name: '$M1',
                                Month2name: '$M2',
                                Month3name: '$M3'
                            },
                            AvgCost: { $avg: { $ifNull: ['$itemdetails.wac', 0] } },
                            Month1: { $sum: { $cond: { if: { $eq: ['$Mcmp', '$M1'] }, then: { $sum: '$itemdetails.quantity' }, else: 0 } } },
                            Month2: { $sum: { $cond: { if: { $eq: ['$Mcmp', '$M2'] }, then: { $sum: '$itemdetails.quantity' }, else: 0 } } },
                            Month3: { $sum: { $cond: { if: { $eq: ['$Mcmp', '$M3'] }, then: { $sum: '$itemdetails.quantity' }, else: 0 } } },
                        }
                    },
                    { $lookup: { from: "inventorystores", localField: "_id.fromstoreuid", foreignField: "_id", as: "inventorystores" } },
                    { $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "organisations", localField: "_id.orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "itemmasters", localField: "_id.itemmasteruid", foreignField: "_id", as: "itemmasters" } },
                    { $unwind: "$itemmasters" },
                    { $match: { 'itemmasters.statusflag': "A", 'itemmasters.activeto': null, } },
                    { $unwind: { path: "$itemmasters.reorderdetails", preserveNullAndEmptyArrays: false } },
                    { $match: { 'itemmasters.reorderdetails.storeuid': new mongoose_1.Types.ObjectId(req.storeuid) } },
                    { $lookup: { from: "referencevalues", localField: "itemmasters.baseuomuid", foreignField: "_id", as: "referencevalues" } },
                    { $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            _id: 0,
                            user: _user.name,
                            fromdate: fromdate,
                            todate: todate,
                            orguidName: { $ifNull: ['$organisations.name', '-'] },
                            Store: { $ifNull: ['$inventorystores.name', '-'] },
                            itemcode: { $ifNull: ['$itemmasters.code', '-'] },
                            Itemname: { $ifNull: ['$itemmasters.name', '-'] },
                            UOMcode: { $ifNull: ['$referencevalues.valuedescription', '-'] },
                            ReorderLevel: { $ifNull: [{ $sum: '$itemmasters.reorderdetails.reorderlevel' }, 0] },
                            ReOrderQty: { $ifNull: [{ $sum: '$itemmasters.reorderdetails.reorderquantity' }, 0] },
                            AvgCost: { $ifNull: ['$AvgCost', '-'] },
                            Month1name: { $ifNull: ['$_id.Month1name', '-'] },
                            Month2name: { $ifNull: ['$_id.Month2name', '-'] },
                            Month3name: { $ifNull: ['$_id.Month3name', '-'] },
                            Month1: { $ifNull: ['$Month1', '-'] },
                            Month2: { $ifNull: ['$Month2', '-'] },
                            Month3: { $ifNull: ['$Month3', '-'] },
                            UsageAverage: { $ifNull: [{ $avg: ['$Month1', '$Month2', '$Month3'] }, '-'] },
                        }
                    },
                    { $sort: { itemcode: 1 } }
                ]).exec();
                result = resultItemmasters;
            }
            catch (error) {
                this.logger.error('findRTCommon303 error:', error);
            }
            return result;
        });
    }
    findRTCommon304(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientorders = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            'orderdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            "statusflag": 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: 'patientorderitems.statusuid',
                            foreignField: '_id',
                            as: 'referencevalues1'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues1', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'referencevalues1.valuedescription': { $ne: 'Cancelled' }
                        }
                    },
                    {
                        $lookup: {
                            from: 'orderitems',
                            localField: 'patientorderitems.orderitemuid',
                            foreignField: '_id',
                            as: 'orderitems'
                        }
                    },
                    {
                        $unwind: { path: '$orderitems', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'orderitems.billingserviceuid': null
                        }
                    },
                    {
                        $lookup: {
                            from: 'ordercategories',
                            localField: 'patientorderitems.ordercatuid',
                            foreignField: '_id',
                            as: 'ordercategories1'
                        }
                    },
                    {
                        $unwind: { path: '$ordercategories1', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'ordercategories',
                            localField: 'patientorderitems.ordersubcatuid',
                            foreignField: '_id',
                            as: 'ordercategories2'
                        }
                    },
                    {
                        $unwind: { path: '$ordercategories2', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'tariffs',
                            localField: 'patientorderitems.tariffuid',
                            foreignField: '_id',
                            as: 'tariffs'
                        }
                    },
                    {
                        $unwind: { path: '$tariffs', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: 'tariffs.tarifftypeuid',
                            foreignField: '_id',
                            as: 'referencevalues_tariffs'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues_tariffs', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $or: [
                                {
                                    'referencevalues_tariffs.valuecode': /^I$/i
                                },
                                {
                                    'referencevalues_tariffs.valuecode': /^F$/i
                                },
                                {
                                    'referencevalues_tariffs.valuecode': /^GENER$/i
                                }
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: 'patientvisits',
                            localField: 'patientvisituid',
                            foreignField: '_id',
                            as: 'patientvisits'
                        }
                    },
                    {
                        $unwind: { path: '$patientvisits', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: 'patientvisits.visitstatusuid',
                            foreignField: '_id',
                            as: 'referencevalues2'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues2', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'departments',
                            localField: 'orderdepartmentuid',
                            foreignField: '_id',
                            as: 'departments'
                        }
                    },
                    {
                        $unwind: { path: '$departments', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'inventorystores',
                            localField: 'invstoreuid',
                            foreignField: '_id',
                            as: 'inventorystores'
                        }
                    },
                    {
                        $unwind: { path: '$inventorystores', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'users',
                            localField: 'orderinguseruid',
                            foreignField: '_id',
                            as: 'users1'
                        }
                    },
                    {
                        $unwind: { path: '$users1', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'users',
                            localField: 'createdby',
                            foreignField: '_id',
                            as: 'users2'
                        }
                    },
                    {
                        $unwind: { path: '$users2', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'patientbills',
                            localField: 'patientvisituid',
                            foreignField: 'patientvisituid',
                            as: 'patientbills'
                        }
                    },
                    {
                        $unwind: { path: '$patientbills', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'patientpackages',
                            localField: 'patientvisituid',
                            foreignField: 'patientvisituid',
                            as: 'patientpackages'
                        }
                    },
                    {
                        $unwind: { path: '$patientpackages', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: '$patientbills.patientbilleditems'
                    },
                    {
                        $unwind: '$patientorderitems'
                    },
                    {
                        $match: {
                            'patientorderitems.ordercattype': { $ne: 'DOCTORFEE' }
                        }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$patientorderitems.orderitemuid', '$patientbills.patientbilleditems.orderitemuid'] }
                                ]
                            }
                        }
                    },
                    {
                        $unwind: { path: '$orderitems.aliasnames', preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            user: _user.name,
                            OrderDate: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$orderdate", timezone: "+07:00", onNull: "-" } },
                            Status: { $ifNull: ['$referencevalues1.valuedescription', '-'] },
                            Code: { $ifNull: ['$orderitems.code', '-'] },
                            Orderitemlist: { $ifNull: ['$orderitems.aliasnames', '-'] },
                            ordercategory: { $ifNull: ['$ordercategories1.description', '-'] },
                            ordersubcategory: { $ifNull: ['$ordercategories2.description', '-'] },
                            Qty: { $ifNull: ['$patientorderitems.quantity', '-'] },
                            billablecost: { $ifNull: ['$patientbills.patientbilleditems.unitcost', 0] },
                            PriceSaleOPD: { $ifNull: [{ $cond: { if: { $eq: ['$referencevalues_tariffs.valuecode', "GENER"] }, then: "$tariffs.unitprice", else: 0 } }, 0] },
                            PriceSaleIPD: { $ifNull: [{ $cond: { if: { $eq: ['$referencevalues_tariffs.valuecode', "I"] }, then: "$tariffs.unitprice", else: 0 } }, 0] },
                            PriceSaleForeigner: { $ifNull: [{ $cond: { if: { $eq: ['$referencevalues_tariffs.valuecode', "F"] }, then: "$tariffs.unitprice", else: 0 } }, 0] },
                            NetAmount: { $ifNull: ['$patientbills.patientbilleditems.netamount', 0] },
                            UserOrder: { $ifNull: ['$users1.description', '-'] },
                            OrderRaisedby: { $ifNull: ['$users2.description', '-'] },
                            PaymentStatus: { $ifNull: ['$referencevalues2.valuedescription', '-'] },
                            FromLocation: { $ifNull: ['$departments.name', '-'] },
                            ToLocation: { $ifNull: ['$inventorystores.name', '-'] },
                            PackageName: { $ifNull: ['$patientpackages.packagename', '-'] },
                            Remark: { $ifNull: ['$patientbills.comments', '-'] }
                        }
                    }
                ]).exec();
                result = resultPatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon304 error:', error);
            }
            return result;
        });
    }
    findRTCommon305(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultStocktransfers = yield this.StocktransfersModel.aggregate([
                    {
                        $match: {
                            'transferdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'stockrequesttype': "COMMON.TRANSFER"
                        }
                    },
                    {
                        $unwind: "$itemdetails"
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "fromstoreuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: "$inventorystores"
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "tostoreuid",
                            foreignField: "_id",
                            as: "inventorystores2"
                        }
                    },
                    {
                        $unwind: "$inventorystores2"
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: "$itemmasters"
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: "$referencevalues"
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            "results": {
                                orgname: { $ifNull: ["$organisations.name", "-"] },
                                "dDate2": "$transferdate",
                                "dDate": { $dateToString: { format: "%d/%m/%Y", date: "$transferdate", timezone: "+07:00", onNull: "-" } },
                                "RefNo": { $ifNull: ["$stocktransfernumber", "-"] },
                                "From_Store": { $ifNull: ["$inventorystores.name", "-"] },
                                "To_Store": { $ifNull: ["$inventorystores2.name", "- -"] },
                                "Qty": "$itemdetails.quantity",
                                "NetAmout": { $multiply: ["$itemdetails.wac", "$itemdetails.quantity"] }
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                orgname: "$results.orgname",
                                dDate2: "$results.dDate2",
                                dDate: "$results.dDate",
                                RefNo: "$results.RefNo",
                                From_Store: "$results.From_Store",
                                To_Store: "$results.To_Store",
                            },
                            Qty: { $sum: "$results.Qty" },
                            NetAmout: { $sum: "$results.NetAmout" }
                        }
                    }, { $sort: { "_id.dDate2": 1 } },
                    {
                        $project: {
                            orgname: "$_id.orgname",
                            dDate: "$_id.dDate",
                            RefNo: "$_id.RefNo",
                            From_Store: "$_id.From_Store",
                            To_Store: "$_id.To_Store",
                            Qty: "$Qty",
                            NetAmout: "$NetAmout",
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    }
                ])
                    .exec();
                result = resultStocktransfers;
            }
            catch (error) {
                this.logger.error('findRTCommon305 error:', error);
            }
            return result;
        });
    }
    findRTCommon306(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let matchorderitemuid = { $match: {} };
                try {
                    if (req.orderitemuid != "") {
                        matchorderitemuid = { $match: { 'patientorderitems.orderitemuid': new mongoose_1.Types.ObjectId(req.orderitemuid) } };
                    }
                }
                catch (res) { }
                let matchdruggroupuid = { $match: {} };
                try {
                    if (req.druggroupuid != "") {
                        matchdruggroupuid = { $match: { 'druggroups._id': new mongoose_1.Types.ObjectId(req.druggroupuid) } };
                    }
                }
                catch (res) { }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientorders = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'patientuid': new mongoose_1.Types.ObjectId(req.patientuid)
                        }
                    },
                    {
                        $match: {
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $match: {
                            'patientorderitems.startdate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate),
                            },
                            'patientorderitems.ordercattype': 'MEDICINE'
                        }
                    },
                    matchorderitemuid,
                    {
                        $match: {
                            "$or": [
                                {
                                    'ordernumber': { $regex: /^O/ }
                                },
                                {
                                    'ordernumber': { $regex: /^I/ }
                                }
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientvisits.entypeuid",
                            foreignField: "_id",
                            as: "referencevalues1"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "orderpriorityuid",
                            foreignField: "_id",
                            as: "referencevalues11"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues11", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "drugmasters",
                            localField: "patientorderitems.drugmasteruid",
                            foreignField: "_id",
                            as: "drugmasters"
                        }
                    },
                    {
                        $unwind: { path: "$drugmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "frequencies",
                            localField: "patientorderitems.frequencyuid",
                            foreignField: "_id",
                            as: "frequencies"
                        }
                    },
                    {
                        $unwind: { path: "$frequencies", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: '$patientorderitems'
                    },
                    {
                        $match: {
                            'patientorderitems.startdate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate),
                            },
                            'patientorderitems.ordercattype': 'MEDICINE'
                        }
                    },
                    {
                        $match: {
                            $expr: {
                                $eq: ['$patientorderitems.statusuid', '$referencevalues2._id']
                            }
                        }
                    },
                    {
                        $match: {
                            $expr: {
                                $eq: ['$patientorderitems.drugmasteruid', '$drugmasters._id']
                            }
                        }
                    },
                    {
                        $match: {
                            $expr: {
                                $eq: ['$patientorderitems.formuid', '$referencevalues3._id']
                            }
                        }
                    },
                    {
                        $match: {
                            $expr: {
                                $eq: ['$frequencies._id', '$patientorderitems.frequencyuid']
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "druggroups",
                            localField: "drugmasters.druggroups",
                            foreignField: "_id",
                            as: "druggroups"
                        }
                    },
                    {
                        $unwind: { path: "$druggroups", preserveNullAndEmptyArrays: true }
                    },
                    matchdruggroupuid,
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "drugmasters.instructionuid",
                            foreignField: "_id",
                            as: "referencevalues4"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues4", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'referencevalues2.valuedescription': { $ne: 'Cancelled' }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "drugmasters.formuid",
                            foreignField: "_id",
                            as: "referencevalues3"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues3", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $group: {
                            _id: {
                                HN: '$patients.mrn',
                                PatientName: {
                                    $ifNull: [{
                                            $concat: [{ $ifNull: ['$patients.firstname', ""] }, ' ',
                                                {
                                                    $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                },
                                                { $ifNull: ['$patients.lastname', ""] }]
                                        }, '-']
                                },
                                EN: '$patientvisits.visitid',
                                visittype: '$referencevalues1.valuedescription',
                                PrescriptionDate: '$orderdate',
                                PresPriority: '$referencevalues11.valuedescription',
                                PresitemStatus: '$referencevalues2.valuedescription',
                                Quantity: '$patientorderitems.quantity',
                                DrugName: '$drugmasters.name',
                                DrugForm: '$referencevalues3.valuedescription',
                                Frequency: '$frequencies.description',
                                Instruction: '$referencevalues4.valuedescription',
                                OwnMed: '$patientorderitems.broughtfromoutside'
                            },
                            DrugGroup: { $push: "$druggroups.name" },
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            HN: { $ifNull: ['$_id.HN', '-'] },
                            PatientName: { $ifNull: ['$_id.PatientName', '-'] },
                            EN: { $ifNull: ['$_id.EN', '-'] },
                            visittype: { $ifNull: ['$_id.visittype', '-'] },
                            PrescriptionDate: { $dateToString: { format: "%d-%m-%Y", date: "$_id.PrescriptionDate", timezone: "+07:00", onNull: "-" } },
                            PresPriority: { $ifNull: ['$_id.PresPriority', '-'] },
                            PresitemStatus: { $ifNull: ['$_id.PresitemStatus', '-'] },
                            Quantity: { $ifNull: ['$_id.Quantity', '-'] },
                            DrugName: { $ifNull: ['$_id.DrugName', '-'] },
                            DrugForm: { $ifNull: ['$_id.DrugForm', '-'] },
                            Frequency: { $ifNull: ['$_id.Frequency', '-'] },
                            DrugGroup1: { $ifNull: [{ $arrayElemAt: ["$DrugGroup", 0] }, '-'] },
                            DrugGroup2: { $ifNull: [{ $arrayElemAt: ["$DrugGroup", 1] }, '-'] },
                            DrugGroup3: { $ifNull: [{ $arrayElemAt: ["$DrugGroup", 2] }, '-'] },
                            Instruction: { $ifNull: ['$_id.Instruction', '-'] },
                            OwnMed: { $ifNull: ['$_id.OwnMed', '-'] },
                            user: _user.name
                        }
                    },
                    {
                        $sort: { EN: 1 }
                    }
                ]).exec();
                result = resultPatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon306 error:', error);
            }
            return result;
        });
    }
    findRTCommon308(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let startdate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let enddate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const resultManufacturedetails = yield this.ManufacturedetailsModel.aggregate([
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "manufacturedate": {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "storeuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: "$outputdetails"
                    },
                    {
                        $unwind: "$inputdetails"
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "outputdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters1"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "inputdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters2"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            let: {
                                inputdetails: '$inputdetails.itemmasteruid',
                                storeuid: '$storeuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$inputdetails'] },
                                            ]
                                        }
                                    }
                                },
                                { $unwind: '$handlingstores' },
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$handlingstores.storeuid', '$$storeuid'] }
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "itemmasters3"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters3", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            let: {
                                binuid: '$itemmasters3.handlingstores.binuid',
                                storeuid: '$storeuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$storeuid'] },
                                            ]
                                        }
                                    }
                                },
                                { $unwind: '$storebins' },
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$storebins._id', '$$binuid'] }
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "inventorystores2"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "inputdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            fromdate: startdate,
                            todate: enddate,
                            user: _user.name,
                            DrugMenu: { $dateToString: { format: "%d/%m/%Y", date: "$manufacturedate", timezone: "+07:00", onNull: "-" } },
                            DrugMenu2: { $dateToString: { format: "%H:%M:%S", date: "$manufacturedate", timezone: "+07:00", onNull: "-" } },
                            Store: { $ifNull: ['$inventorystores.name', '-'] },
                            itemcode: { $ifNull: ['$itemmasters1.code', '-'] },
                            itemname: { $ifNull: ['$itemmasters1.name', '-'] },
                            Qty1: { $ifNull: ['$outputdetails.quantity', '-'] },
                            BatchID1: { $ifNull: ['$outputdetails.batchid', '-'] },
                            Iteminput: { $ifNull: ['$itemmasters2.code', '-'] },
                            Iteminputname: { $ifNull: ['$itemmasters2.name', '-'] },
                            ToBin: { $ifNull: ['$inventorystores2.storebins.name', '-'] },
                            Qty2: { $ifNull: ['$inputdetails.quantity', '-'] },
                            UOM: { $ifNull: ['$referencevalues.valuedescription', '-'] },
                            BatchID2: { $ifNull: ['$inputdetails.batchid', '-'] },
                            ExpiryDate: { $dateToString: { format: "%d/%m/%Y", date: "$inputdetails.expirydate", timezone: "+07:00", onNull: "-" } },
                        }
                    },
                    {
                        $sort: { Store: 1 }
                    }
                ]).exec();
                result = resultManufacturedetails;
            }
            catch (error) {
                this.logger.error('findRTCommon308 error:', error);
            }
            return result;
        });
    }
    findRTCommon310(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let careprovideruids = { $match: {} };
            if (req.careprovideruids != '') {
                careprovideruids = {
                    $match: {
                        'patientorders.patientorderitems.careprovideruid': new mongoose_1.Types.ObjectId(req.careprovideruids),
                    }
                };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let fromdate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let todate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const resultPatientorders = yield this.patientbillsModel.aggregate([
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            'iscancelled': false,
                            "statusflag": "A",
                            'billdate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                        }
                    },
                    { $unwind: '$patientbilleditems' },
                    { $lookup: { from: "orderitems", localField: "patientbilleditems.orderitemuid", foreignField: "_id", as: "orderitems" } },
                    { $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true } },
                    { $match: { 'orderitems.isdoctorshareitem': true } },
                    { $lookup: { from: "patientorders", localField: "patientbilleditems.patientorderitemuid", foreignField: "patientorderitems._id", as: "patientorders" } },
                    { $unwind: { path: "$patientorders", preserveNullAndEmptyArrays: true } },
                    careprovideruids,
                    { $lookup: { from: "users", localField: "patientorders.patientorderitems.careprovideruid", foreignField: "_id", as: "doctor" } },
                    { $unwind: { path: "$doctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "patientorders.orderdepartmentuid", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "ordercategories", localField: "orderitems.ordercatuid", foreignField: "_id", as: "ordercategories2" } },
                    { $unwind: { path: "$ordercategories2", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patientorders.patientorderitems.statusuid", foreignField: "_id", as: "ordersts" } },
                    { $unwind: { path: "$ordersts", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "patientorders.patientorderitems.executedby", foreignField: "_id", as: "executedby" } },
                    { $unwind: { path: "$executedby", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            fromdate: fromdate,
                            todate: todate,
                            user: _user.name,
                            DoctorCode: { $ifNull: ['$doctor.code', '-'] },
                            DoctorName: { $ifNull: ['$doctor.description', '-'] },
                            Type: { $ifNull: [{ $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "I", else: "O" } }, '-'] },
                            ordernumber: { $ifNull: ['$patientorders.ordernumber', '-'] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            EN: { $ifNull: ['$patientvisits.visitid', '-'] },
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] }
                                        }
                                    },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] }
                                        }
                                    }
                                }
                            },
                            PatientOrderDate: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$patientorders.orderdate", timezone: "+07:00", onNull: "-" } },
                            OrderItem: { $ifNull: ['$orderitems.name', '-'] },
                            CodeOrder: { $ifNull: ['$orderitems.code', '-'] },
                            DoctorFee: { $ifNull: ['$orderitems.isdoctorshareitem', '-'] },
                            Execute: { $ifNull: ['$orderitems.istaskgenerationreqd', '-'] },
                            DF: { $ifNull: ['$patientbilleditems.netamount', '-'] },
                            StatusOrder: { $ifNull: ['$ordersts.valuedescription', '-'] },
                            TypeOrder: { $ifNull: ['$ordercategories2.description', '-'] },
                            Location: { $ifNull: ['$departments.name', '-'] },
                            VerifyDate: { $dateToString: { format: "%d/%m/%Y", date: "$patientorders.waitingtime", timezone: "+07:00", onNull: "-" } },
                            VerifyTime: { $dateToString: { format: "%H:%M", date: "$patientorders.waitingtime", timezone: "+07:00", onNull: "-" } },
                            BillDate: { $dateToString: { format: "%d/%m/%Y", date: '$billdate', timezone: "+07:00", onNull: "-" } },
                            BillNo: { $ifNull: ['$sequencenumber', '-'] },
                            UserKey: { $ifNull: ['$executedby.description', '-'] },
                        }
                    }
                ]).exec();
                result = resultPatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon310 error:', error);
            }
            return result;
        });
    }
    findRTCommon311(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let startdate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let enddate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const resultMrdfolders = yield this.MrdfoldersModel.aggregate([
                    {
                        $match: {
                            "modifiedat": {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            IO: { $substr: ["$patientvisits.visitid", 0, 1] }
                        }
                    },
                    { $unwind: { path: "$patientvisits.bedoccupancy", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $ne: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] },
                                    {
                                        $and: [
                                            { $eq: ['$patientvisits.bedoccupancy.isactive', true] },
                                            { $ne: ['$patientvisits.bedoccupancy.islodgerbed', true] }
                                        ]
                                    }
                                ]
                            }
                        }
                    },
                    { $lookup: { from: "wards", localField: "patientvisits.bedoccupancy.warduid", foreignField: "_id", as: "wards" } },
                    { $unwind: { path: "$wards", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "beds", localField: "patientvisits.bedoccupancy.beduid", foreignField: "_id", as: "beds" } },
                    { $unwind: { path: "$beds", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "currentdeptuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "statusuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'referencevalues2.valuedescription': 'Outside'
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            IorO: { $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } },
                            CurrentLocationName: { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", ""] }, ""] }, then: "$departments.name", else: { $concat: ['$wards.name', ' '] } } },
                            bed: { $ifNull: ['$beds.name', null] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            Name: {
                                $ifNull: [{
                                        $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                            },
                                            { $ifNull: ['$patients.lastname', ""] }]
                                    }, '-']
                            },
                            AN: { $ifNull: ['$patientvisits.visitid', '-'] },
                            LastIssue: { $dateToString: { format: "%d/%m/%Y", date: "$modifiedat", timezone: "+07:00", onNull: "-" } },
                            Status: { $ifNull: ['$referencevalues2.valuedescription', '-'] },
                            Reason: { $ifNull: ['$comments', '-'] },
                            user: _user.name,
                            fromdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            todate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    },
                ]).exec();
                result = resultMrdfolders;
            }
            catch (error) {
                this.logger.error('findRTCommon311 error:', error);
            }
            return result;
        });
    }
    findRTCommon313(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [], result_last = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            let careprovideruids = { $match: {} };
            if (req.careprovideruids != '') {
                careprovideruids = {
                    $match: {
                        'careprovideruid': new mongoose_1.Types.ObjectId(req.careprovideruids),
                    }
                };
            }
            let departmentuids = { $match: {} };
            if (req.departmentuids != '') {
                departmentuids = {
                    $match: {
                        'departmentuid': new mongoose_1.Types.ObjectId(req.departmentuids),
                    }
                };
            }
            try {
                const resultAppointmentschedules = yield this.AppointmentschedulesModel.aggregate([
                    {
                        $unwind: { path: "$slots", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            'slots.start': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    }, careprovideruids, departmentuids,
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "slots.statusuid",
                            foreignField: "_id",
                            as: "referencevaluesW"
                        }
                    },
                    {
                        $match: {
                            "$and": [
                                {
                                    'referencevaluesW.valuedescription': { $ne: "Rescheduled" }
                                },
                                {
                                    'referencevaluesW.valuedescription': { $ne: "Cancelled" }
                                }
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "slots.patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "careprovideruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            "results": {
                                "HN": { $ifNull: ["$patients.mrn", "-"] },
                                "DOB": { $dateToString: { format: "%d/%m/%Y", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } },
                                title_name: {
                                    $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                        else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                    }
                                },
                                first_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] },
                                        then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localfirstname", ""] },
                                                else: { $ifNull: ["$patients.firstname", ""] }
                                            }
                                        }
                                    }
                                },
                                middle_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] },
                                        then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.localmiddlename", ""] },
                                                else: { $ifNull: ["$patients.middlename", ""] }
                                            }
                                        }
                                    }
                                },
                                last_name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] },
                                        then: "",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                                then: { $ifNull: ["$patients.locallastname", ""] },
                                                else: { $ifNull: ["$patients.lastname", ""] }
                                            }
                                        }
                                    }
                                },
                                "Doctor": { $ifNull: ["$users.description", "-"] },
                                "Location": { $ifNull: ["$departments.name", "-"] },
                                "year": { $dateToString: { format: " %Y", date: "$slots.start", timezone: "+07:00", onNull: "" } },
                                "month": { $month: { $dateFromString: { dateString: { $dateToString: { date: "$slots.start", timezone: "+07:00", onNull: "" } } } } },
                                "date": { $dateToString: { format: "%d ", date: "$slots.start", timezone: "+07:00", onNull: "-" } },
                                "dTime": { $dateToString: { format: "%H:%M", date: "$slots.start", timezone: "+07:00", onNull: "-" } },
                                "Tel": { $ifNull: ["$patients.contact.mobilephone", ""] },
                                "note": { $ifNull: ["$slots.comments", ""] },
                            }
                        }
                    },
                    {
                        $addFields: {
                            monthstr: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'January,', 'February,', 'March,', 'April,', 'May,', 'June,', 'July,', 'August,', 'September,', 'October,', 'November,', 'December,']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$results.month']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            Tel: "$results.Tel",
                            note: "$results.note",
                            HN: "$results.HN",
                            DOB: "$results.DOB",
                            Name: { $concat: ['$results.title_name', ' ', '$results.first_name', ' ', '$results.last_name'] },
                            Doctor: "$results.Doctor",
                            Location: "$results.Location",
                            dDate: { $concat: ['$results.date', '$monthstr', '$results.year'] },
                            dTime: "$results.dTime",
                            user: _user.name
                        }
                    },
                    {
                        $sort: { Location: 1, Doctor: 1, dDate: 1, dTime: 1, HN: 1 }
                    }
                ])
                    .exec();
                result = resultAppointmentschedules;
                for (let i = 0; i < result.length; i += 2) {
                    if (result[i + 1] === undefined)
                        result_last.push({
                            Tel: result[i].tel,
                            note: result[i].note,
                            HN: result[i].HN,
                            DOB: result[i].DOB,
                            Name: result[i].Name,
                            Doctor: result[i].Doctor,
                            Location: result[i].Location,
                            dDate: result[i].dDate,
                            dTime: result[i].dTime,
                            user: result[i].user
                        });
                    else {
                        result_last.push({
                            Tel: result[i].tel,
                            note: result[i].note,
                            HN: result[i].HN,
                            DOB: result[i].DOB,
                            Name: result[i].Name,
                            Doctor: result[i].Doctor,
                            Location: result[i].Location,
                            dDate: result[i].dDate,
                            dTime: result[i].dTime,
                            user: result[i].user,
                            Tel2: result[i + 1].tel,
                            note2: result[i + 1].note,
                            HN2: result[i + 1].HN,
                            DOB2: result[i + 1].DOB,
                            Name2: result[i + 1].Name,
                            Doctor2: result[i + 1].Doctor,
                            Location2: result[i + 1].Location,
                            dDate2: result[i + 1].dDate,
                            dTime2: result[i + 1].dTime,
                            user2: result[i + 1].user
                        });
                    }
                }
            }
            catch (error) {
                this.logger.error('findRTCommon313 error:', error);
            }
            return result_last;
        });
    }
    findRTCommon316(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let startdate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let enddate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const resultMrdfolders = yield this.MrdfoldersModel.aggregate([
                    {
                        $match: {
                            'createdat': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "statusuid",
                            foreignField: "_id",
                            as: "referencevalues1"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.genderuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "createdby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "currentdeptuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "mrdstorages",
                            localField: "owningmrdstorage",
                            foreignField: "_id",
                            as: "mrdstorages"
                        }
                    },
                    {
                        $unwind: { path: "$mrdstorages", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "foldertypeuid",
                            foreignField: "_id",
                            as: "referencevalues3"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues3", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "owningdepartmentuid",
                            foreignField: "_id",
                            as: "departments2"
                        }
                    },
                    {
                        $unwind: { path: "$departments2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            orguidName: { $ifNull: ['$organisations.name', ""] },
                            fromdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            todate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            FileStatus: { $ifNull: ['$referencevalues1.valuedescription', '-'] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            PatientName: {
                                $ifNull: [{
                                        $concat: [{ $ifNull: ['$patients.firstname', ""] }, ' ',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                            },
                                            { $ifNull: ['$patients.lastname', ""] }]
                                    }, '-']
                            },
                            DOB: { $dateToString: { format: "%d/%m/%Y", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } },
                            Gender: { $ifNull: [{ $concat: ['$referencevalues2.locallanguagedesc', '(', '$referencevalues2.valuedescription', ')'] }, '-'] },
                            Location: { $ifNull: ['$mrdstorages.name', '-'] },
                            CurrentLocation: { $ifNull: ['$departments.name', '-'] },
                            MRDType: { $ifNull: ['$referencevalues3.valuedescription', '-'] },
                            RequestedDateTime: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$createdat", timezone: "+07:00", onNull: "-" } },
                            RequestedbyName: { $ifNull: ['$users.description', '-'] },
                            IssuefromLocation: { $ifNull: ['$departments2.name', '-'] },
                            user: _user.name
                        }
                    },
                    { $sort: { HN: 1 } }
                ]).exec();
                result = resultMrdfolders;
            }
            catch (error) {
                this.logger.error('findRTCommon316 error:', error);
            }
            return result;
        });
    }
    findRTCommon317(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let startdate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let enddate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const resultPatientforms = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'visitid': { $regex: /^I/ },
                            'statusflag': 'A'
                        }
                    },
                    { $addFields: { visitjourneys_FinalDischarge: { $indexOfArray: ['$visitjourneys.comments', 'Final Discharge'] } } },
                    { $match: { $expr: { $ne: ['$visitjourneys_FinalDischarge', -1] } } },
                    {
                        $addFields: {
                            journeyfd: {
                                $filter: {
                                    input: "$visitjourneys", as: "visitjourneys", cond: { $eq: ["$$visitjourneys.comments", 'Final Discharge'] },
                                }
                            }
                        }
                    },
                    { $addFields: { lastjourneymodifiedat: '$journeyfd.modifiedat' } },
                    { $unwind: { path: "$lastjourneymodifiedat", preserveNullAndEmptyArrays: true } },
                    { $match: { 'lastjourneymodifiedat': { $gte: new Date(req.fromdate), $lte: new Date(req.todate) } } },
                    { $lookup: { from: "patientforms", localField: "_id", foreignField: "patientvisituid", as: "patientforms" } },
                    { $unwind: { path: "$patientforms", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "formtemplates", localField: "patientforms.templateuid", foreignField: "_id", as: "formtemplate" } },
                    { $unwind: { path: "$formtemplate", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "visitstatusuid", foreignField: "_id", as: "referencevalues_status" } },
                    { $unwind: { path: "$referencevalues_status", preserveNullAndEmptyArrays: true } },
                    { $match: { 'referencevalues_status.valuedescription': { $ne: 'Cancelled' } } },
                    { $unwind: "$bedoccupancy" },
                    { $match: { "bedoccupancy.isactive": true } },
                    { $lookup: { from: "wards", localField: "bedoccupancy.warduid", foreignField: "_id", as: "ward" } },
                    { $unwind: { path: "$ward", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "beds", localField: "bedoccupancy.beduid", foreignField: "_id", as: "bed" } },
                    { $unwind: { path: "$bed", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'referencevalues', localField: "patients.titleuid", foreignField: "_id", as: 'nametitle' } },
                    { $unwind: { path: '$nametitle', preserveNullAndEmptyArrays: true } },
                    { $unwind: '$visitcareproviders' },
                    { $match: { "visitcareproviders.isprimarycareprovider": true } },
                    { $lookup: { from: "users", localField: "visitcareproviders.careprovideruid", foreignField: "_id", as: "users" } },
                    { $unwind: { path: "$users", preserveNullAndEmptyArrays: true } },
                    { $addFields: { visitpayors_last: { $arrayElemAt: ["$visitpayors", -1] } } },
                    { $lookup: { from: "payors", localField: "visitpayors_last.payoruid", foreignField: "_id", as: "payors" } },
                    { $unwind: { path: "$payors", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            FM: {
                                $cond: {
                                    if: {
                                        $and: [{ $eq: ["$formtemplate.name", "Discharge Summary Part I"] }, { $eq: ['$patientforms.finalized', true] }]
                                    }, then: "F1",
                                    else: {
                                        $cond: {
                                            if: {
                                                $and: [{ $eq: ["$formtemplate.name", "Progress Record"] }, { $eq: ['$patientforms.finalized', true] }]
                                            }, then: "F3",
                                            else: {
                                                $cond: {
                                                    if: {
                                                        $and: [{ $eq: ["$formtemplate.name", "Operative Note"] }, { $eq: ['$patientforms.finalized', true] }]
                                                    }, then: "F4",
                                                    else: {
                                                        $cond: {
                                                            if: {
                                                                $and: [
                                                                    { $eq: ["patientforms.finalized", true] },
                                                                    {
                                                                        $or: [
                                                                            { $eq: ["formtemplate.name", "Patient Admission Assessment Part I ADULT To be completed by physician within 24 hrs"] },
                                                                            { $eq: ["formtemplate.name", "Patient Admission Assessment Part I Child To be completed by physician within 24 hrs"] },
                                                                            { $eq: ["formtemplate.name", "Patient Admission Assessment Part I OBG To be completed by physician within 24 hrs"] },
                                                                        ]
                                                                    },
                                                                ]
                                                            },
                                                            then: "F2",
                                                            else: {
                                                                $cond: {
                                                                    if: {
                                                                        $and: [{ $eq: ["$formtemplate.name", "Discharge Summary Part I"] }, { $eq: ['$patientforms.finalized', false] }]
                                                                    }, then: "F1F",
                                                                    else: {
                                                                        $cond: {
                                                                            if: {
                                                                                $and: [{ $eq: ["$formtemplate.name", "Progress Record"] }, { $eq: ['$patientforms.finalized', false] }]
                                                                            }, then: "F3F",
                                                                            else: {
                                                                                $cond: {
                                                                                    if: {
                                                                                        $and: [{ $eq: ["$formtemplate.name", "Operative Note"] }, { $eq: ['$patientforms.finalized', false] }]
                                                                                    }, then: "F4F",
                                                                                    else: {
                                                                                        $cond: {
                                                                                            if: {
                                                                                                $and: [
                                                                                                    { $eq: ["patientforms.finalized", false] },
                                                                                                    {
                                                                                                        $or: [
                                                                                                            { $eq: ["formtemplate.name", "Patient Admission Assessment Part I ADULT To be completed by physician within 24 hrs"] },
                                                                                                            { $eq: ["formtemplate.name", "Patient Admission Assessment Part I Child To be completed by physician within 24 hrs"] },
                                                                                                            { $eq: ["formtemplate.name", "Patient Admission Assessment Part I OBG To be completed by physician within 24 hrs"] },
                                                                                                        ]
                                                                                                    },
                                                                                                ]
                                                                                            },
                                                                                            then: "F2F",
                                                                                            else: 'NONE'
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            PatientNameEN: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                        }
                    },
                    {
                        $addFields: {
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            Payor: { $ifNull: ["$payors.name", '-'] },
                            Ward: { $ifNull: ["$ward.name", '-'] },
                            Room: { $ifNull: ["$bed.name", '-'] },
                            HN: { $ifNull: ["$patients.mrn", '-'] },
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$PatientNameTH", ""] }, ""] },
                                    else: { $ifNull: ["$PatientNameEN", ""] }
                                }
                            },
                            Doctor: { $ifNull: ['$users.description', '-'] },
                            EN: { $ifNull: ['$visitid', '-'] },
                            EndDate: { $ifNull: ['$enddate', '-'] },
                            AdmitDate: { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            DischargeDate: { $dateToString: { format: "%d/%m/%Y", date: "$medicaldischargedate", timezone: "+07:00", onNull: "-" } },
                            FinalDischargeDate: { $dateToString: { format: "%d/%m/%Y", date: "$lastjourneymodifiedat", timezone: "+07:00", onNull: "-" } },
                            FM: '$FM',
                            LOS: { $ifNull: [{ $floor: { $divide: [{ $subtract: ['$medicaldischargedate', '$startdate'] }, (24 * 60 * 60 * 1000)] } }, '-'] },
                        }
                    },
                    {
                        $group: {
                            _id: {
                                Ward: '$Ward',
                                Room: '$Room',
                                HN: '$HN',
                                PatientName: '$PatientName',
                                Doctor: '$Doctor',
                                EN: '$EN',
                                AdmitDate: '$AdmitDate',
                                DischargeDate: '$DischargeDate',
                                FinalDischargeDate: '$FinalDischargeDate',
                                EndDate: '$EndDate',
                                Payor: '$Payor',
                                LOS: { $add: ['$LOS', 1] },
                            },
                            FM: { $push: '$FM' }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            Ward: { $ifNull: ["$_id.Ward", '-'] },
                            Room: { $ifNull: ["$_id.Room", '-'] },
                            HN: { $ifNull: ["$_id.HN", '-'] },
                            PatientName: { $ifNull: ["$_id.PatientName", '-'] },
                            Doctor: { $ifNull: ['$_id.Doctor', '-'] },
                            EN: { $ifNull: ["$_id.EN", '-'] },
                            AdmitDate: { $ifNull: ["$_id.AdmitDate", '-'] },
                            DischargeDate: { $ifNull: ["$_id.FinalDischargeDate", '-'] },
                            EndDate: { $ifNull: ["$_id.EndDate", '-'] },
                            Payor: { $ifNull: ["$_id.Payor", '-'] },
                            LOS: { $ifNull: ["$_id.LOS", '-'] },
                            DCSUM: {
                                $cond: {
                                    if: {
                                        $in: ["F1", "$FM"]
                                    }, then: "TRUE", else: {
                                        $cond: {
                                            if: {
                                                $in: ["F1F", "$FM"]
                                            }, then: "FALSE", else: ""
                                        }
                                    }
                                }
                            },
                            PAAPART1: {
                                $cond: {
                                    if: {
                                        $in: ["F2", "$FM"]
                                    }, then: "TRUE", else: {
                                        $cond: {
                                            if: {
                                                $in: ["F2F", "$FM"]
                                            }, then: "FALSE", else: ""
                                        }
                                    }
                                }
                            },
                            PRONOTE: {
                                $cond: {
                                    if: {
                                        $in: ["F3", "$FM"]
                                    }, then: "TRUE", else: {
                                        $cond: {
                                            if: {
                                                $in: ["F3F", "$FM"]
                                            }, then: "FALSE", else: ""
                                        }
                                    }
                                }
                            },
                            ORNOTE: {
                                $cond: {
                                    if: {
                                        $in: ["F4", "$FM"]
                                    }, then: "TRUE", else: {
                                        $cond: {
                                            if: {
                                                $in: ["F4F", "$FM"]
                                            }, then: "FALSE", else: ""
                                        }
                                    }
                                }
                            },
                            fromdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            todate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            user: _user.name,
                        },
                    },
                    { $sort: { 'EndDate': -1, 'HN': 1 } }
                ])
                    .exec();
                result = resultPatientforms;
            }
            catch (error) {
                this.logger.error('findRTCommon317 error:', error);
            }
            return result;
        });
    }
    findRTCommon319(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let startdate = dateutils_1.default.convertISOtoDatetimeSlash(new Date(req.fromdate));
                let enddate = dateutils_1.default.convertISOtoDatetimeSlash(new Date(req.todate));
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            'startdate': {
                                $gte: new Date(req.fromdate),
                                $lt: new Date(req.todate)
                            },
                            'statusflag': "A",
                            'visitid': { $not: /^I/ },
                            'visitcareproviders': { $exists: true },
                        }
                    },
                    {
                        $addFields: {
                            visitcareproviders_notnull: { $ifNull: ['$visitidbeforeconvert', ''] }
                        }
                    },
                    { $addFields: { orgcode: { $ifNull: ['$orguid', ''] } } },
                    { $match: { orgcode: new mongoose_1.Types.ObjectId(req.organisationuid) } },
                    {
                        $match: {
                            $or: [
                                { 'visitid': { "$not": /I/ } },
                                {
                                    $and: [
                                        { 'visitcareproviders_notnull': { $ne: '' } },
                                        { 'visitidbeforeconvert': { "$not": /I/ } },
                                    ]
                                }
                            ]
                        }
                    },
                    { $addFields: { 'firstdepartment': { $arrayElemAt: ['$visitjourneys.departmentuid', 0] } } },
                    { $lookup: { from: "departments", localField: "firstdepartment", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    { $match: { "departments.code": { $ne: null } } },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $group: {
                            _id: {
                                startdatesort: { $dateToString: { "format": "%Y/%m/%d", "date": "$startdate", timezone: "+07:00", onNull: "-" } },
                                startdate: { $dateToString: { "format": "%d/%m/%Y", "date": "$startdate", timezone: "+07:00", onNull: "-" } },
                                code: "$departments.code",
                                name: "$departments.name",
                                hn: "$patients.mrn",
                                visit: "$visitid",
                            },
                            new_count: { "$sum": { "$cond": [{ $gte: ["$patients.createdat", new Date(req.fromdate)] }, 1, 0] } },
                            old_count: { "$sum": { "$cond": [{ $lt: ["$patients.createdat", new Date(req.fromdate)] }, 1, 0] } },
                            maxHN: { $last: "$patients.mrn" },
                            convert_count: { "$sum": { "$cond": [{ $ne: [{ $ifNull: ['$visitidbeforeconvert', ''] }, ''] }, 1, 0] } },
                        }
                    },
                    {
                        $group: {
                            _id: {
                                startdatesort: '$_id.startdatesort',
                                startdate: '$_id.startdate',
                                code: '$_id.code',
                                name: '$_id.name',
                            },
                            allEN: { $addToSet: '$_id.visit' },
                            allHN: { $addToSet: '$_id.hn' },
                            old_count: { $sum: "$old_count" },
                            new_count: { $sum: "$new_count" },
                            convert_count: { $sum: "$convert_count" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            startdatesort: '$_id.startdatesort',
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            groupdate: '$_id.startdate',
                            code: '$_id.code',
                            name: '$_id.name',
                            distinctHN: { $size: '$allHN' },
                            distinctEN: { $size: '$allEN' },
                            oldHN: '$old_count',
                            newHN: '$new_count',
                            lastHN: '$_id.maxHN',
                            convert_count: '$convert_count',
                            user: _user.name,
                            orgcode: '',
                        }
                    },
                    { $sort: { 'startdatesort': 1, 'code': 1 } }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon319 error:', error);
            }
            return result;
        });
    }
    findRTCommon819(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let startdate = dateutils_1.default.convertISOtoDatetimeSlash(new Date(req.fromdate));
                let enddate = dateutils_1.default.convertISOtoDatetimeSlash(new Date(req.todate));
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            'startdate': {
                                $gte: new Date(req.fromdate),
                                $lt: new Date(req.todate)
                            },
                            'statusflag': "A",
                            'visitid': { $not: /^I/ },
                            'visitcareproviders': { $exists: true },
                        }
                    },
                    {
                        $addFields: {
                            visitcareproviders_notnull: { $ifNull: ['$visitidbeforeconvert', ''] }
                        }
                    },
                    { $addFields: { orgcode: { $ifNull: ['$orguid', ''] } } },
                    { $match: { orgcode: new mongoose_1.Types.ObjectId(req.organisationuid) } },
                    {
                        $match: {
                            $or: [
                                { 'visitid': { "$not": /I/ } },
                                {
                                    $and: [
                                        { 'visitcareproviders_notnull': { $ne: '' } },
                                        { 'visitidbeforeconvert': { "$not": /I/ } },
                                    ]
                                }
                            ]
                        }
                    },
                    { $addFields: { 'firstdepartment': { $arrayElemAt: ['$visitjourneys.departmentuid', 0] } } },
                    { $lookup: { from: "departments", localField: "firstdepartment", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    { $match: { "departments.code": { $ne: null } } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientbills", localField: "_id", foreignField: "patientvisituid", as: "patientbills" } },
                    { $addFields: { totalbillamount: { $ifNull: ['$patientbills.totalbillamount', -1] } } },
                    { $match: { "totalbillamount": { $gt: 0 } } },
                    {
                        $group: {
                            _id: {
                                startdatesort: { $dateToString: { "format": "%Y/%m/%d", "date": "$startdate", timezone: "+07:00", onNull: "-" } },
                                startdate: { $dateToString: { "format": "%d/%m/%Y", "date": "$startdate", timezone: "+07:00", onNull: "-" } },
                                code: "$departments.code",
                                name: "$departments.name",
                                hn: "$patients.mrn",
                                visit: "$visitid",
                            },
                            new_count: { "$sum": { "$cond": [{ $gte: ["$patients.createdat", new Date(req.fromdate)] }, 1, 0] } },
                            old_count: { "$sum": { "$cond": [{ $lt: ["$patients.createdat", new Date(req.fromdate)] }, 1, 0] } },
                            maxHN: { $last: "$patients.mrn" },
                            convert_count: { "$sum": { "$cond": [{ $ne: [{ $ifNull: ['$visitidbeforeconvert', ''] }, ''] }, 1, 0] } },
                        }
                    },
                    {
                        $group: {
                            _id: {
                                startdatesort: '$_id.startdatesort',
                                startdate: '$_id.startdate',
                                code: '$_id.code',
                                name: '$_id.name',
                            },
                            allEN: { $addToSet: '$_id.visit' },
                            allHN: { $addToSet: '$_id.hn' },
                            old_count: { $sum: "$old_count" },
                            new_count: { $sum: "$new_count" },
                            convert_count: { $sum: "$convert_count" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            startdatesort: '$_id.startdatesort',
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            groupdate: '$_id.startdate',
                            code: '$_id.code',
                            name: '$_id.name',
                            distinctHN: { $size: '$allHN' },
                            distinctEN: { $size: '$allEN' },
                            oldHN: '$old_count',
                            newHN: '$new_count',
                            lastHN: '$_id.maxHN',
                            convert_count: '$convert_count',
                            user: _user.name,
                            orgcode: '',
                        }
                    },
                    { $sort: { 'startdatesort': 1, 'code': 1 } }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon819 error:', error);
            }
            return result;
        });
    }
    findRTCommon320(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let careprovideruids = { $match: {} };
            if (req.careprovideruids != '') {
                careprovideruids = {
                    $match: {
                        'patientorderitems.careprovideruid': new mongoose_1.Types.ObjectId(req.careprovideruids),
                    }
                };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let fromdate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let todate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const resultPatientorders = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "statusflag": "A",
                            'orderdate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                        }
                    },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "orderdepartmentuid", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    { $unwind: '$patientorderitems' },
                    careprovideruids,
                    { $match: { 'patientorderitems.isdoctorshareitem': true } },
                    { $lookup: { from: "ordercategories", localField: "orderitems.ordercatuid", foreignField: "_id", as: "ordercategories2" } },
                    { $unwind: { path: "$ordercategories2", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patientorderitems.statusuid", foreignField: "_id", as: "ordersts" } },
                    { $unwind: { path: "$ordersts", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "patientorderitems.careprovideruid", foreignField: "_id", as: "doctor" } },
                    { $unwind: { path: "$doctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "patientorderitems.executedby", foreignField: "_id", as: "executedby" } },
                    { $unwind: { path: "$executedby", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            fromdate: fromdate,
                            todate: todate,
                            user: _user.name,
                            DoctorCode: { $ifNull: ['$doctor.code', '-'] },
                            DoctorName: { $ifNull: ['$doctor.description', '-'] },
                            Type: { $ifNull: [{ $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "I", else: "O" } }, '-'] },
                            BillNo: { $ifNull: ['$ordernumber', '-'] },
                            TypeBill: { $ifNull: ['$fivedigits2', '-'] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            EN: { $ifNull: ['$patientvisits.visitid', '-'] },
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] }
                                        }
                                    },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] }
                                        }
                                    }
                                }
                            },
                            PatientOrderDate: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$orderdate", timezone: "+07:00", onNull: "-" } },
                            OrderItem: { $ifNull: ['$patientorderitems.orderitemname', '-'] },
                            CodeOrder: { $ifNull: ['$patientorderitems.chargecode', '-'] },
                            DoctorFee: { $ifNull: ['$patientorderitems.isdoctorshareitem', '-'] },
                            Execute: { $ifNull: ['$patientorderitems.isexecutable', '-'] },
                            DF: { $ifNull: ['$patientorderitems.unitprice', '-'] },
                            StatusOrder: { $ifNull: ['$ordersts.valuedescription', '-'] },
                            TypeOrder: { $ifNull: ['$ordercategories2.description', '-'] },
                            Location: { $ifNull: ['$departments.name', '-'] },
                            VerifyDate: { $dateToString: { format: "%d/%m/%Y", date: "$waitingtime", timezone: "+07:00", onNull: "-" } },
                            VerifyTime: { $dateToString: { format: "%H:%M  ", date: "$waitingtime", timezone: "+07:00", onNull: "-" } },
                            BillDate: { $dateToString: { format: "%d/%m/%Y", date: '$billdate', timezone: "+07:00", onNull: "-" } },
                            UserKey: { $ifNull: ['$executedby.description', '-'] },
                        }
                    }
                ]).exec();
                result = resultPatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon320 error:', error);
            }
            return result;
        });
    }
    findRTCommon321(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientbills = yield this.patientbillsModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'iscancelled': true,
                            'canceldate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "cancelrefundbyuseruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            cancelDate: { $dateToString: { format: "%d/%m/%Y ", date: "$canceldate", timezone: "+07:00", onNull: "-" } },
                            cancelDateSort: { $ifNull: ["$canceldate", "-"] },
                            sequencenumber: { $ifNull: ["$sequencenumber", "-"] },
                            billdate: { $dateToString: { format: "%d/%m/%Y ", date: "$billdate", timezone: "+07:00", onNull: "-" } },
                            billdateSort: { $ifNull: ["$billdate", "-"] },
                            mrn: { $ifNull: ["$patients.mrn", "-"] },
                            PatientName: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            totalbillamount: { $ifNull: ["$totalbillamount", "-"] },
                            description: { $ifNull: ["$tpas.description", "-"] },
                            cancelrefundbyuseruid: { $concat: [{ $ifNull: ["$users.name", ""] }, " ", { $ifNull: ["$users.lastname", ""] }] },
                            comments: { $ifNull: ["$cancelrefundcomments", "-"] },
                            fromdate: dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            todate: dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.todate))),
                            user: _user.name
                        }
                    },
                    {
                        $sort: { cancelDateSort: 1, billdateSort: 1, sequencenumber: 1 }
                    }
                ]).exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon321 error:', error);
            }
            return result;
        });
    }
    findRTCommon322(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let user = { $match: {} };
            if (req.usersuid != '') {
                user = {
                    $match: {
                        'useruid': new mongoose_1.Types.ObjectId(req.usersuid),
                    }
                };
            }
            ;
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientbills = yield this.patientbillsModel.aggregate([
                    user,
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'iscancelled': false,
                            'isrefund': false,
                            $or: [
                                { 'sequencenumber': { $regex: /CI/ } },
                                { 'sequencenumber': { $regex: /CO/ } },
                                { 'sequencenumber': { $regex: /II/ } },
                                { 'sequencenumber': { $regex: /IO/ } },
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            groupCashier: { $ifNull: ["$users.description", "-"] },
                            groupType: { $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } },
                            sequencenumber: { $ifNull: ["$sequencenumber", "-"] },
                            mrn: { $ifNull: ["$patients.mrn", "-"] },
                            PatientName: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                            description: { $ifNull: ["$tpas.description", "-"] },
                            totalbillamount: { $ifNull: ["$totalbillamount", 0] },
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            user: _user.name
                        }
                    },
                    {
                        $sort: { groupCashier: 1, groupType: 1, sequencenumber: 1, mrn: 1, PatientName: 1 }
                    }
                ]).exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon322 error:', error);
            }
            return result;
        });
    }
    findRTCommon323(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let user = { $match: {} };
            if (req.usersuid != '') {
                user = {
                    $match: {
                        'useruid': new mongoose_1.Types.ObjectId(req.usersuid),
                    }
                };
            }
            ;
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientbills = yield this.patientbillsModel.aggregate([
                    user,
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'iscancelled': false,
                            'isrefund': false
                        }
                    },
                    {
                        $match: {
                            $or: [
                                { 'sequencenumber': { $regex: /R/ } },
                                { 'sequencenumber': { $regex: /S/ } }
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    { $unwind: { path: "$paymentdetails", preserveNullAndEmptyArrays: true } },
                    { $match: { 'paymentdetails.shouldnotbeused': null } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "paymentdetails.paymentmodeuid",
                            foreignField: "_id",
                            as: "refPaymentmodeuid"
                        }
                    },
                    {
                        $unwind: { path: "$refPaymentmodeuid", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            cashierCode: { $ifNull: ["$users.code", "-"] },
                            cashierDesc: { $ifNull: ["$users.description", "-"] },
                            Desc: { $ifNull: ["$refPaymentmodeuid.valuedescription", "-"] },
                            sequencenumber: { $ifNull: ["$sequencenumber", "-"] },
                            billdate: { $dateToString: { format: "%H:%M  ", date: "$billdate", timezone: "+07:00", onNull: "-" } },
                            mrn: { $ifNull: ["$patients.mrn", "-"] },
                            PatientName: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            totalbillamount: { $ifNull: ["$paymentdetails.paidamount", 0] },
                            roundamount: { $mod: ["$paymentdetails.paidamount", 1] },
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            user: _user.name
                        }
                    },
                    {
                        $sort: { cashierCode: 1, Desc: 1, sequencenumber: 1, billdate: 1, mrn: 1 }
                    }
                ]).exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon323 error:', error);
            }
            return result;
        });
    }
    findRTCommon324(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientbills = yield this.patientbillsModel.aggregate([
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'isrefund': false,
                            'iscancelled': { $ne: true }
                        }
                    },
                    { $match: { $or: [{ 'sequencenumber': { $regex: /R/ } }, { 'sequencenumber': { $regex: /S/ } }] } },
                    { $lookup: { from: "deposits", pipeline: [], as: "deposits" } },
                    {
                        $match: {
                            'deposits.depositdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    { $match: { 'deposits.iscancelled': false, 'orguid': new mongoose_1.Types.ObjectId(req.organisationuid) } },
                    {
                        $addFields: {
                            deposits: {
                                $map: {
                                    input: "$deposits",
                                    as: "tbl2",
                                    in: {
                                        "_id": "$$tbl2._id",
                                        "doctype": {
                                            $cond: {
                                                if: { "$eq": [{ "$substr": ["$$tbl2.sequencenumber", 0, 2] }, "RF"] },
                                                then: '4.Refund',
                                                else: {
                                                    $cond: {
                                                        if: {
                                                            $or: [
                                                                { "$eq": [{ "$substr": ["$$tbl2.sequencenumber", 3, 2] }, "DO"] },
                                                                { "$eq": [{ "$substr": ["$$tbl2.sequencenumber", 3, 2] }, "DP"] }
                                                            ]
                                                        },
                                                        then: '1.Deposit Collection', else: ''
                                                    }
                                                }
                                            }
                                        },
                                        "docno": "$$tbl2.sequencenumber",
                                        "docdate": "$$tbl2.depositdate",
                                        "user": "$$tbl2.useruid",
                                        "amount": "$$tbl2.amount",
                                        "paymentmode": "$$tbl2.paymentmodeuid",
                                        "HN": "$$tbl2.patientuid",
                                        "EN": "$$tbl2.patientvisituid",
                                        "iscancelled": "$$tbl2.iscancelled",
                                    }
                                }
                            }
                        }
                    },
                    { $unwind: { path: "$paymentdetails", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: null,
                            patientbills: {
                                $push: {
                                    _id: "$_id",
                                    doctype: { $cond: { if: { $eq: [{ $substr: ["$sequencenumber", 4, 1] }, "I"] }, then: "2.IP Bill", else: "3.OP Bill" } },
                                    docno: "$sequencenumber",
                                    docdate: "$billdate",
                                    user: "$useruid",
                                    amount: "$paymentdetails.paidamount",
                                    paymentmode: "$paymentdetails.paymentmodeuid",
                                    refdoc: "$paymentdetails.sequencenumber",
                                    HN: '$patientuid',
                                    EN: '$patientvisituid',
                                    iscancelled: '$iscancelled',
                                }
                            },
                            deposits: { $first: "$deposits" }
                        }
                    },
                    { $project: { items: { $setUnion: ["$patientbills", "$deposits"] } } },
                    { $unwind: "$items" },
                    { $replaceRoot: { newRoot: "$items" } },
                    {
                        $match: {
                            docdate: {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            doctype: { $ne: "" },
                            iscancelled: { $eq: false },
                        }
                    },
                    { $lookup: { from: "users", localField: "user", foreignField: "_id", as: "users" } },
                    { $unwind: { path: "$users", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "paymentmode", foreignField: "_id", as: "paymentmode" } },
                    { $unwind: { path: "$paymentmode", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "HN", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientvisits", localField: "EN", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "organisations", localField: "patients.orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            _id: 0,
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            iscancelled: '$iscancelled',
                            HN: '$patients.mrn',
                            Patientname: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] }
                                        }
                                    },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] }
                                        }
                                    }
                                }
                            },
                            EN: { $ifNull: ['$patientvisits.visitid', ""] },
                            cashierDesc: { $ifNull: ['$users.description', ""] },
                            billType: '$doctype',
                            refdoc: { $ifNull: ["$refdoc", ""] },
                            valuedescription: {
                                $cond: {
                                    if: { "$eq": ["$paymentmode.valuedescription", "Cash"] }, then: '1.Cash',
                                    else: {
                                        $cond: {
                                            if: { "$eq": ["$paymentmode.valuedescription", "Credit Card"] }, then: '2.Credit Card',
                                            else: {
                                                $cond: {
                                                    if: { "$eq": ["$paymentmode.valuedescription", "Debit Card"] }, then: '3.Debit Card',
                                                    else: {
                                                        $cond: {
                                                            if: { "$eq": ["$paymentmode.valuedescription", "Coupon"] }, then: '4.Coupon',
                                                            else: {
                                                                $cond: {
                                                                    if: { "$eq": ["$paymentmode.valuedescription", "Cheque"] }, then: '5.Cheque',
                                                                    else: {
                                                                        $cond: {
                                                                            if: { "$eq": ["$paymentmode.valuedescription", "Cashier Cheque"] }, then: '6.Cashier Cheque',
                                                                            else: { $concat: ['7.', '$paymentmode.valuedescription'] }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            docdate: '$docdate',
                            docno: '$docno',
                            amount: '$amount',
                            paidamount: { $trunc: { $multiply: ["$amount", 1] } },
                            paidamountDecimal: { $mod: ["$amount", 1] },
                            cnt: { $toInt: 1 },
                            cash: { $cond: { if: { "$eq": ["$paymentmode.valuedescription", "Cash"] }, then: '$amount', else: 0 } },
                            card: {
                                $cond: {
                                    if: { $or: [{ "$eq": ["$paymentmode.valuedescription", "Credit Card"] }, { "$eq": ["$paymentmode.valuedescription", "Debit Ccard"] }] },
                                    then: '$amount', else: 0
                                }
                            },
                            coupon: { $cond: { if: { "$eq": ["$paymentmode.valuedescription", "Coupon"] }, then: '$amount', else: 0 } },
                            cheque: {
                                $cond: {
                                    if: { $or: [{ "$eq": ["$paymentmode.valuedescription", "Cheque"] }, { "$eq": ["$paymentmode.valuedescription", "Cashier Cheque"] }] },
                                    then: '$amount', else: 0
                                }
                            },
                            other: {
                                $cond: {
                                    if: {
                                        $and: [{ "$ne": ["$paymentmode.valuedescription", "Cash"] },
                                            { "$ne": ["$paymentmode.valuedescription", "Credit Card"] },
                                            { "$ne": ["$paymentmode.valuedescription", "Debit Card"] },
                                            { "$ne": ["$paymentmode.valuedescription", "Coupon"] },
                                            { "$ne": ["$paymentmode.valuedescription", "Cheque"] },
                                            { "$ne": ["$paymentmode.valuedescription", "Cashier Cheque"] },
                                        ]
                                    },
                                    then: '$amount', else: 0
                                }
                            },
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate))),
                            orgcode: { $ifNull: ["$organisations._id", "-"] },
                        }
                    },
                    { $match: { orgcode: new mongoose_1.Types.ObjectId(req.organisationuid) } },
                    { $sort: { cashierDesc: 1, billType: 1, valuedescription: 1, docdate: 1, docno: 1 } },
                ]).exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon324 error:', error);
            }
            return result;
        });
    }
    findRTCommon325(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            'enddate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'visitid': { $regex: /I/ }
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "visitstatusuid",
                            foreignField: "_id",
                            as: "referencevaluesW"
                        }
                    },
                    {
                        $unwind: { path: "$referencevaluesW", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'referencevaluesW.valuedescription': { $ne: "Cancelled" }
                        }
                    },
                    {
                        $lookup: {
                            from: "patientprocedures",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientprocedures"
                        }
                    },
                    {
                        $unwind: { path: "$patientprocedures", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientprocedures.procedures", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "procedures",
                            localField: "patientprocedures.procedures.procedureuid",
                            foreignField: "_id",
                            as: "procedures"
                        }
                    },
                    {
                        $unwind: { path: "$procedures", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientprocedures.bodysites",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "diagnoses",
                            localField: "patients._id",
                            foreignField: "patientuid",
                            as: "diagnoses"
                        }
                    },
                    {
                        $unwind: { path: "$diagnoses", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "problems",
                            let: { p1: { $arrayElemAt: ["$diagnoses.diagnosis.problemuid", 0] } },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$p1'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "problems"
                        }
                    },
                    {
                        $unwind: { path: "$problems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientbills",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientbills"
                        }
                    },
                    {
                        $match: {
                            'patientbills.statusflag': "A",
                            'patientbills.isrefund': false
                        }
                    },
                    {
                        $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "visitpayors.tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            HN: "$patients.mrn",
                            No: "0",
                            EN: "$visitid",
                            patientName: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            mainDiag: { $ifNull: ["$problems.description", "-"] },
                            dateReg: { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            endDate: { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } },
                            LOS: { $ifNull: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, "-"] },
                            ProcedureName: { $ifNull: ["$procedures.name", "-"] },
                            ProcedureList: { $ifNull: ["$referencevalues2.valuedescription", "-"] },
                            itemAmount: "$patientbills.totalbillamount",
                            roundOff: "$patientbills.roundoff",
                            NetAmountByVis: { $sum: ["$patientbills.totalbillamount", "$patientbills.roundoff"] },
                            enddateOrder: "$enddate",
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $sort: { enddateOrder: 1, HN: 1, EN: 1, PatientName: 1 }
                    }
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon325 error:', error);
            }
            return result;
        });
    }
    findRTCommon326() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Method not implemented.");
        });
    }
    findRTCommon327(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let careprovideruids = { $match: {} };
            if (req.careprovideruids != '') {
                careprovideruids = {
                    $match: {
                        'chargecodes.careprovideruid': new mongoose_1.Types.ObjectId(req.careprovideruids),
                    }
                };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientorders = yield this.PatientchargecodesModel.aggregate([
                    {
                        $unwind: '$chargecodes'
                    },
                    {
                        $match: { 'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'chargecodes.orderitemuid': new mongoose_1.Types.ObjectId(req.orderitemuid),
                            'chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            }, "$or": [{ "isr2c": { "$eq": null } }, { "isr2c": { "$eq": false } }],
                        }
                    },
                    careprovideruids,
                    { $lookup: { from: 'patients', localField: "patientuid", foreignField: "_id", as: 'patient' } },
                    { $unwind: { path: '$patient', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'patientvisits', localField: "patientvisituid", foreignField: "_id", as: 'patientvisit' } },
                    { $unwind: { path: '$patientvisit', preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'lastdepartment': { $arrayElemAt: ['$patientvisit.visitjourneys.departmentuid', 0] } } },
                    { $lookup: { from: "departments", localField: "lastdepartment", foreignField: "_id", as: "last_department" } },
                    { $unwind: { path: "$last_department", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'lastward': { $arrayElemAt: ['$patientvisit.bedoccupancy.warduid', -1] } } },
                    { $lookup: { from: "wards", localField: "lastward", foreignField: "_id", as: "last_ward" } },
                    { $unwind: { path: "$last_ward", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'firstdoctor': { $arrayElemAt: ['$patientvisit.visitcareproviders.careprovideruid', 0] } } },
                    { $lookup: { from: "users", localField: "firstdoctor", foreignField: "_id", as: "doctor" } },
                    { $unwind: { path: "$doctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'orderitems', localField: "chargecodes.orderitemuid", foreignField: "_id", as: 'orderitem' } },
                    { $unwind: { path: '$orderitem', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'patientbills', localField: "chargecodes.patientbilluid", foreignField: "_id", as: 'patientbill' } },
                    { $unwind: { path: '$patientbill', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientpackages", localField: "chargecodes.patientorderuid", foreignField: "_id", as: "patientpackages" } },
                    { $unwind: { path: "$patientpackages", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                statusflag: "$chargecodes.statusflag",
                                packagname: { $ifNull: ["$patientpackage.packagename", ""] },
                                HN: '$patient.mrn',
                                name: { $concat: [{ $ifNull: ['$patient.firstname', ''] }, ' ', { $ifNull: ['$patient.lastname', ""] }] },
                                EN: '$patientvisit.visitid',
                                DateTimeOrder: { $dateToString: { format: "%Y/%m/%d", date: '$chargecodes.chargedate', timezone: "+07:00", onNull: "-" } },
                                DateTime: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: '$chargecodes.chargedate', timezone: "+07:00", onNull: "-" } },
                                ItemCode: '$orderitem.code',
                                ItemName: '$orderitem.name',
                                chargecodetype: '$chargecodes.chargecodetype',
                                patientbilluid: { $ifNull: ['$patientbill.sequencenumber', ''] },
                                DOCTOR: { $ifNull: ['$doctor.description', ''] },
                                location: { $cond: { if: { $eq: [{ $substr: ['$patientvisits.visitid".visitid"umber', 0, 1] }, "I"] }, then: "$last_ward.name", else: "$last_department.name" } },
                            },
                            netamount: { $sum: '$chargecodes.netamount' },
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            PASID: '$_id.HN',
                            name: '$_id.name',
                            EN: '$_id.EN',
                            DateTimeOrder: '$_id.DateTimeOrder',
                            DateTime: '$_id.DateTime',
                            ItemCode: '$_id.ItemCode',
                            ItemName: '$_id.ItemName',
                            NetAmount: '$netamount',
                            chargecodetype: '$_id.chargecodetype',
                            BillNumber: '$_id.patientbilluid',
                            OrderRaisedBy: '$_id.DOCTOR',
                            location: '$_id.location',
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            statusflag: "$_id.statusflag",
                            packagename: { $ifNull: ["$_id.packagename", ""] },
                        }
                    },
                    { $match: { $or: [{ statusflag: 'A' }, { $and: [{ statusflag: 'D' }, { packagename: { $ne: '' } }] }] } },
                    { $sort: { 'DOCTOR': 1, 'DateTimeOrder': 1 } }
                ]).exec();
                result = resultpatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon327 error:', error);
            }
            return result;
        });
    }
    findRTCommon328(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientorders = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orderdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $match: {
                            'patientvisits.visitid': { $regex: /I/ }
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "patientvisits.bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "patientvisits.bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientvisits.entypeuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientorderitems.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $match: {
                            "$or": [
                                {
                                    "orderitems.ordercategorycode": "08"
                                },
                                {
                                    "orderitems.ordercategorycode": "13"
                                },
                                {
                                    "orderitems.ordercategorycode": "32"
                                }
                            ]
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                "Location": { $ifNull: ["$wards.name", "-"] },
                                "Room": { $ifNull: ["$beds.name", "-"] },
                                "HN": { $ifNull: ["$patients.mrn", "-"] },
                                "AN": { $ifNull: ["$patientvisits.visitid", "-"] },
                                "PatientName": { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                "Type": { $ifNull: ["$referencevalues2.valuecode", "-"] },
                                "OrderDate": { $dateToString: { format: "%d/%m/%Y", date: "$orderdate", timezone: "+07:00", onNull: "-" } },
                                "ItemName": "$orderitems.name",
                                "Qty": { $ifNull: ["$patientorderitems.quantity", 0] },
                                "Price": { $ifNull: ["$patientorderitems.totalprice", 0] },
                                "year": { $dateToString: { format: " %Y", date: "$orderdate", timezone: "+07:00", onNull: "" } },
                                "month": { $month: { $dateFromString: { dateString: { $dateToString: { date: "$orderdate", timezone: "+07:00", onNull: "" } } } } },
                                "date": { $dateToString: { format: "%d ", date: "$orderdate", timezone: "+07:00", onNull: "-" } },
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $addFields: {
                            monthstr: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$results.month']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                Location: "$results.Location",
                                Room: "$results.Room",
                                HN: "$results.HN",
                                AN: "$results.AN",
                                PatientName: "$results.PatientName",
                                Type: "$results.Type",
                                ItemName: "$results.ItemName",
                                Qty: "$results.Qty",
                                Price: "$results.Price",
                                OrderDate: { $concat: ['$results.date', '$monthstr', '$results.year'] }
                            }
                        }
                    },
                    {
                        $sort: { _id: 1 }
                    },
                    {
                        $project: {
                            Location: "$_id.Location",
                            Room: "$_id.Room",
                            HN: "$_id.HN",
                            AN: "$_id.AN",
                            PatientName: "$_id.PatientName",
                            Type: "$_id.Type",
                            OrderDate: "$_id.OrderDate",
                            ItemName: "$_id.ItemName",
                            Qty: "$_id.Qty",
                            Price: "$_id.Price",
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.todate))),
                        }
                    }
                ])
                    .exec();
                result = resultpatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon328 error:', error);
            }
            return result;
        });
    }
    findRTCommon329(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientorders = yield this.patientordersModel.aggregate([
                    {
                        $unwind: '$patientorderitems'
                    },
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'orderdate': {
                                $gte: new Date(req.fromdate),
                                $lt: new Date(req.todate)
                            },
                            'statusflag': "A",
                            'patientorderitems.ordercattype': "LAB"
                        }
                    },
                    {
                        $lookup: {
                            from: 'tariffs',
                            localField: "patientorderitems.tariffuid",
                            foreignField: "_id",
                            as: 'tariffs'
                        }
                    },
                    {
                        $unwind: '$tariffs'
                    },
                    {
                        $project: {
                            "results": {
                                "Code": { $ifNull: ["$patientorderitems.chargecode", "-"] },
                                "ItemName": { $ifNull: ["$patientorderitems.orderitemname", "-"] },
                                "Qty": "$patientorderitems.quantity",
                                "Price": { $ifNull: ["$patientorderitems.totalprice", ""] },
                                "Cost": { $ifNull: ["$tariffs.costprice", ""] },
                                "TotalPrice": { $multiply: [{ $ifNull: ["$patientorderitems.totalprice", 0] }, { $ifNull: ["$patientorderitems.quantity", 0] }] },
                                "TotalCost": { $multiply: [{ $ifNull: ["$tariffs.costprice", 0] }, { $ifNull: ["$patientorderitems.quantity", 0] }] },
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                Code: "$results.Code",
                                ItemName: "$results.ItemName"
                            },
                            Qty: { $sum: "$results.Qty" },
                            Price: { $sum: "$results.Price" },
                            Cost: { $sum: "$results.Cost" },
                            TotalPrice: { $sum: "$results.TotalPrice" },
                            TotalCost: { $sum: "$results.TotalCost" },
                        }
                    },
                    {
                        $project: {
                            Code: "$_id.Code",
                            ItemName: "$_id.ItemName",
                            Qty: "$Qty",
                            Price: { $divide: ["$TotalPrice", "$Qty"] },
                            Cost: { $divide: ["$TotalCost", "$Qty"] },
                            TotalPrice: "$TotalPrice",
                            TotalCost: "$TotalCost",
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.todate))),
                        }
                    },
                    {
                        $sort: { Code: 1, ItemName: 1 }
                    },
                ])
                    .exec();
                result = resultpatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon329 error:', error);
            }
            return result;
        });
    }
    findRTCommon330(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultWelfares = yield this.WelfaresModel.aggregate([
                    {
                        $sort: { _id: -1 }
                    },
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'plancode': { $ne: '9999' },
                            "interfacename": "HCM",
                            'statusflag': "A",
                            'nationalid': { $ne: null }
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "nationalid",
                            foreignField: "nationalid",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    { $match: { 'patients.orguid': new mongoose_1.Types.ObjectId(req.organisationuid) } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "title",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            let: {
                                p1: '$relationship',
                                p2: 'NOKTYP'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$valuecode', '$$p1'] },
                                                { $eq: ['$domaincode', '$$p2'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "referencevaluesR"
                        }
                    },
                    {
                        $unwind: { path: "$referencevaluesR", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            HN: "$patients.mrn",
                            PatientName: { $concat: [{ $ifNull: ["$referencevalues.valuedescription", ""] }, " ", "$firstname", " ", { $ifNull: ["$middlename", ""] }, " ", "$lastname"] },
                            Cwhen: { $dateToString: { format: "%d/%m/%Y", date: "$createdat", timezone: "+07:00", onNull: "-" } },
                            IDCARD: { $ifNull: ["$nationalid", "-"] },
                            PassportNo: { $ifNull: ["$passportnumber", "-"] },
                            PlanCode: { $ifNull: ["$plancode", "-"] },
                            WelfareFlag: { $ifNull: ["$welfareflag", "-"] },
                            StartDttm: { $dateToString: { format: "%d/%m/%Y", date: "$activefrom", timezone: "+07:00", onNull: "-" } },
                            EndDttm: { $dateToString: { format: "%d/%m/%Y", date: "$activeto", timezone: "+07:00", onNull: "-" } },
                            Relation: { $ifNull: ["$referencevaluesR.valuedescription", "-"] },
                            CostCode: { $substrCP: ["$deptcodefullforsap", 4, 4] },
                            user: _user.name
                        }
                    }
                ])
                    .exec();
                result = resultWelfares;
            }
            catch (error) {
                this.logger.error('findRTCommon330 error:', error);
            }
            return result;
        });
    }
    findRTCommon331(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultWelfares = yield this.WelfaresModel.aggregate([
                    {
                        $sort: { _id: -1 }
                    },
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'plancode': { $ne: '9999' },
                            "interfacename": "EPMS",
                            'statusflag': "A",
                            'nationalid': { $ne: null }
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "nationalid",
                            foreignField: "nationalid",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    { $match: { 'patients.orguid': new mongoose_1.Types.ObjectId(req.organisationuid) } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "title",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            let: {
                                p1: '$relationship',
                                p2: 'NOKTYP'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$valuecode', '$$p1'] },
                                                { $eq: ['$domaincode', '$$p2'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "referencevaluesR"
                        }
                    },
                    {
                        $unwind: { path: "$referencevaluesR", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            HN: "$patients.mrn",
                            PatientName: { $concat: [{ $ifNull: ["$referencevalues.valuedescription", ""] }, " ", "$firstname", " ", { $ifNull: ["$middlename", ""] }, " ", "$lastname"] },
                            Cwhen: { $dateToString: { format: "%d/%m/%Y", date: "$createdat", timezone: "+07:00", onNull: "-" } },
                            IDCARD: { $ifNull: ["$nationalid", "-"] },
                            PassportNo: { $ifNull: ["$passportnumber", "-"] },
                            PlanCode: { $ifNull: ["$plancode", "-"] },
                            WelfareFlag: { $ifNull: ["$welfareflag", "-"] },
                            StartDttm: { $dateToString: { format: "%d/%m/%Y", date: "$activefrom", timezone: "+07:00", onNull: "-" } },
                            EndDttm: { $dateToString: { format: "%d/%m/%Y", date: "$activeto", timezone: "+07:00", onNull: "-" } },
                            Relation: { $ifNull: ["$referencevaluesR.valuedescription", "-"] },
                            CostCode: { $substrCP: ["$deptcodefullforsap", 4, 4] },
                            user: _user.name
                        }
                    }
                ])
                    .exec();
                result = resultWelfares;
            }
            catch (error) {
                this.logger.error('findRTCommon331 error:', error);
            }
            return result;
        });
    }
    findRTCommon334(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const _division = yield this.findDivisionByCodeANDOrg('RTCOMMON334', req.organisationuid);
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            '_id': new mongoose_1.Types.ObjectId(req.patientvisituid),
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A"
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.nationalityuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "areas",
                            localField: "patients.address.areauid",
                            foreignField: "_id",
                            as: "areas"
                        }
                    },
                    {
                        $unwind: { path: "$areas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "cities",
                            localField: "patients.address.cityuid",
                            foreignField: "_id",
                            as: "cities"
                        }
                    },
                    {
                        $unwind: { path: "$cities", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "states",
                            localField: "patients.address.stateuid",
                            foreignField: "_id",
                            as: "states"
                        }
                    },
                    {
                        $unwind: { path: "$states", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            name: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            Age: { $trunc: { $divide: [{ $subtract: [new Date(), "$patients.dateofbirth"] }, (365 * 24 * 60 * 60 * 1000)] } },
                            national: { $ifNull: ["$referencevalues2.valuedescription", ""] },
                            IDcard: { $ifNull: ["$patients.nationalid", ""] },
                            area: { $ifNull: ["$areas.name", ""] },
                            city: { $ifNull: ["$cities.name", ""] },
                            state: { $ifNull: ["$states.name", ""] },
                            Tel: { $ifNull: ["$patients.contact.mobilephone", ""] },
                            year: { $substr: [{ $add: [{ $year: { "date": new Date(), "timezone": "+07:00" } }, 543] }, 0, 4] },
                            month: { $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } },
                            date: { $dateToString: { format: "%d ", date: new Date(), timezone: "+07:00", onNull: "-" } },
                            styear: { $substr: [{ $add: [{ $year: { "date": "$startdate", "timezone": "+07:00" } }, 543] }, 0, 4] },
                            stmonth: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$startdate", timezone: "+07:00", onNull: null } } } } },
                            stdate: { $dateToString: { format: "%d ", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            endyear: { $substr: [{ $add: [{ $year: { "date": "$medicaldischargedate", "timezone": "+07:00" } }, 543] }, 0, 4] },
                            endmonth: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$medicaldischargedate", timezone: "+07:00", onNull: null } } } } },
                            endate: { $dateToString: { format: "%d ", date: "$medicaldischargedate", timezone: "+07:00", onNull: "-" } },
                            hospital: { $ifNull: ["$organisations.description", "-"] },
                            division: _division
                        }
                    },
                    {
                        $addFields: {
                            monthstr: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            monthstart: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$stmonth']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            monthend: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$endmonth']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            name: "$name",
                            Age: "$Age",
                            national: "$national",
                            IDcard: "$IDcard",
                            area: "$area",
                            city: "$city",
                            state: "$state",
                            Tel: "$Tel",
                            nowdate: { $concat: ["$date", "$monthstr", " ", "$year"] },
                            startdate: { $concat: ["$stdate", " ", "$monthstart", " ", "$styear"] },
                            enddateend: { $concat: ["$endate", " ", "$monthend", " ", "$endyear"] },
                            hospital: "$hospital",
                            division: "$division"
                        }
                    }
                ])
                    .exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon334 error:', error);
            }
            return result;
        });
    }
    findRTCommon335(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            '_id': new mongoose_1.Types.ObjectId(req.patientvisituid),
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A"
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.nationalityuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "areas",
                            localField: "patients.address.areauid",
                            foreignField: "_id",
                            as: "areas"
                        }
                    },
                    {
                        $unwind: { path: "$areas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "cities",
                            localField: "patients.address.cityuid",
                            foreignField: "_id",
                            as: "cities"
                        }
                    },
                    {
                        $unwind: { path: "$cities", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "states",
                            localField: "patients.address.stateuid",
                            foreignField: "_id",
                            as: "states"
                        }
                    },
                    {
                        $unwind: { path: "$states", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            name: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            Age: { $trunc: { $divide: [{ $subtract: [new Date(), "$patients.dateofbirth"] }, (365 * 24 * 60 * 60 * 1000)] } },
                            national: { $ifNull: ["$referencevalues2.valuedescription", ""] },
                            IDcard: { $ifNull: ["$patients.nationalid", ""] },
                            area: { $ifNull: ["$areas.name", ""] },
                            city: { $ifNull: ["$cities.name", ""] },
                            state: { $ifNull: ["$states.name", ""] },
                            Tel: { $ifNull: ["$patients.contact.mobilephone", ""] },
                            year: { $substr: [{ $add: [{ $year: { "date": new Date(), "timezone": "+07:00" } }, 543] }, 0, 4] },
                            month: { $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } },
                            date: { $dateToString: { format: "%d ", date: new Date(), timezone: "+07:00", onNull: "-" } },
                            styear: { $substr: [{ $add: [{ $year: { "date": "$startdate", "timezone": "+07:00" } }, 543] }, 0, 4] },
                            stmonth: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$startdate", timezone: "+07:00", onNull: null } } } } },
                            stdate: { $dateToString: { format: "%d ", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            endyear: { $substr: [{ $add: [{ $year: { "date": "$medicaldischargedate", "timezone": "+07:00" } }, 543] }, 0, 4] },
                            endmonth: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$medicaldischargedate", timezone: "+07:00", onNull: null } } } } },
                            endate: { $dateToString: { format: "%d ", date: "$medicaldischargedate", timezone: "+07:00", onNull: "-" } },
                            hospital: { $ifNull: ["$organisations.description", "-"] }
                        }
                    },
                    {
                        $addFields: {
                            monthstr: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            monthstart: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$stmonth']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            monthend: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$endmonth']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            name: "$name",
                            Age: "$Age",
                            national: "$national",
                            IDcard: "$IDcard",
                            area: "$area",
                            city: "$city",
                            state: "$state",
                            Tel: "$Tel",
                            nowdate: { $concat: ["$date", "$monthstr", " ", "$year"] },
                            startdate: { $concat: ["$stdate", " ", "$monthstart", " ", "$styear"] },
                            enddateend: { $concat: ["$endate", " ", "$monthend", " ", "$endyear"] },
                            hospital: "$hospital"
                        }
                    }
                ])
                    .exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon335 error:', error);
            }
            return result;
        });
    }
    findRTCommon336(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            '_id': new mongoose_1.Types.ObjectId(req.patientvisituid),
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.nationalityuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "areas",
                            localField: "patients.address.areauid",
                            foreignField: "_id",
                            as: "areas"
                        }
                    },
                    {
                        $unwind: { path: "$areas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "cities",
                            localField: "patients.address.cityuid",
                            foreignField: "_id",
                            as: "cities"
                        }
                    },
                    {
                        $unwind: { path: "$cities", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "states",
                            localField: "patients.address.stateuid",
                            foreignField: "_id",
                            as: "states"
                        }
                    },
                    {
                        $unwind: { path: "$states", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            name: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            Age: { $trunc: { $divide: [{ $subtract: [new Date(), "$patients.dateofbirth"] }, (365 * 24 * 60 * 60 * 1000)] } },
                            national: { $ifNull: ["$referencevalues2.valuedescription", ""] },
                            IDcard: { $ifNull: ["$patients.nationalid", ""] },
                            area: { $ifNull: ["$areas.name", ""] },
                            city: { $ifNull: ["$cities.name", ""] },
                            state: { $ifNull: ["$states.name", ""] },
                            Tel: { $ifNull: ["$patients.contact.mobilephone", ""] },
                            year: { $substr: [{ $add: [{ $year: { "date": new Date(), "timezone": "+07:00" } }, 543] }, 0, 4] },
                            month: { $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } },
                            date: { $dateToString: { format: "%d ", date: new Date(), timezone: "+07:00", onNull: "-" } },
                            styear: { $substr: [{ $add: [{ $year: { "date": "$startdate", "timezone": "+07:00" } }, 543] }, 0, 4] },
                            stmonth: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$startdate", timezone: "+07:00", onNull: null } } } } },
                            stdate: { $dateToString: { format: "%d ", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            endyear: { $substr: [{ $add: [{ $year: { "date": "$medicaldischargedate", "timezone": "+07:00" } }, 543] }, 0, 4] },
                            endmonth: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$medicaldischargedate", timezone: "+07:00", onNull: null } } } } },
                            endate: { $dateToString: { format: "%d ", date: "$medicaldischargedate", timezone: "+07:00", onNull: "-" } },
                            hospital: { $ifNull: ["$organisations.description", "-"] }
                        }
                    },
                    {
                        $addFields: {
                            monthstr: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            monthstart: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$stmonth']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            monthend: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$endmonth']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            name: "$name",
                            Age: "$Age",
                            national: "$national",
                            IDcard: "$IDcard",
                            area: "$area",
                            city: "$city",
                            state: "$state",
                            Tel: "$Tel",
                            nowdate: { $concat: ["$date", "$monthstr", " ", "$year"] },
                            startdate: { $concat: ["$stdate", " ", "$monthstart", " ", "$styear"] },
                            enddateend: { $concat: ["$endate", " ", "$monthend", " ", "$endyear"] },
                            hospital: "$hospital"
                        }
                    }
                ])
                    .exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon336 error:', error);
            }
            return result;
        });
    }
    findRTCommon339(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientorders = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'orderdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A"
                        }
                    },
                    {
                        $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $match: {
                            'referencevalues.valuedescription': { $ne: 'Cancelled' }
                        }
                    },
                    {
                        $lookup: {
                            from: 'departments',
                            localField: "orderdepartmentuid",
                            foreignField: "_id",
                            as: 'departments'
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'orderitems',
                            localField: "patientorderitems.orderitemuid",
                            foreignField: "_id",
                            as: 'orderitems'
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'organisations',
                            localField: "orguid",
                            foreignField: "_id",
                            as: 'organisations'
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: 'referencevalues', localField: "entypeuid", foreignField: "_id", as: 'ENTYPE' } },
                    { $unwind: { path: "$ENTYPE", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            ordercattype: '$ordercattype',
                            OPD_IPD: { $cond: { if: { $eq: ['$ENTYPE.valuecode', "INPAT"] }, then: "ผู้ป่วยใน", else: "ผู้ป่วยนอก" } },
                            departmentName: '$departments.name',
                            ordernumber: '$ordernumber',
                            orderitemuid: '$patientorderitems.orderitemuid',
                            patientuid: '$patientuid',
                            nameH: '$organisations.name',
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $sort: { ordercattype: 1, OPD_IPD: 1, departmentName: 1, ordernumber: 1, orderitemuid: 1, patientuid: 1 }
                    }
                ])
                    .exec();
                result = resultpatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon339 error:', error);
            }
            return result;
        });
    }
    findRTCommon341() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Method not implemented.");
        });
    }
    findRTCommon342(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultItemmasters = yield this.itemmastersModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'activeto': null,
                            'reorderdetails.storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                            'handlingstores.storeuid': new mongoose_1.Types.ObjectId(req.storeuid)
                        }
                    },
                    {
                        $unwind: { path: "$reorderdetails", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            'reorderdetails.storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    },
                    {
                        $unwind: { path: "$handlingstores", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            'handlingstores.storeuid': new mongoose_1.Types.ObjectId(req.storeuid)
                        }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "handlingstores.storeuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "stockledgers",
                            let: {
                                w1: '$_id',
                                w2: '$inventorystores.parentstoreuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$itemmasteruid', '$$w1'] },
                                                { $eq: ['$storeuid', '$$w2'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "stockledgers1"
                        }
                    },
                    {
                        $unwind: { path: "$stockledgers1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            let: {
                                w1: '$reorderdetails.storeuid',
                                w2: '$handlingstores.binuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$w1'] }
                                            ]
                                        }
                                    }
                                },
                                { "$unwind": "$storebins" },
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$storebins._id', '$$w2'] }
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "inventorystores2",
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "purchasinguomuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            vendoruid_min: { $min: "$vendordetails.vendoruid" },
                        }
                    },
                    {
                        $lookup: {
                            from: "vendors",
                            localField: "vendoruid_min",
                            foreignField: "_id",
                            as: "vendors"
                        }
                    },
                    {
                        $unwind: { path: "$vendors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "inventorystores.parentstoreuid",
                            foreignField: "_id",
                            as: "inventorystoresparent"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystoresparent", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "itemmasters", localField: "_id", foreignField: "_id", as: "parentbin" } },
                    { $unwind: { path: "$parentbin", preserveNullAndEmptyArrays: true } },
                    { $addFields: { parentbinuid_index: { $indexOfArray: ['$parentbin.handlingstores.storeuid', '$inventorystoresparent._id'] } } },
                    { $addFields: { parentbinuid_lookup: { $arrayElemAt: ["$parentbin.handlingstores.binuid", { $cond: { if: { $eq: ["$parentbinuid_index", -1] }, then: null, else: "$parentbinuid_index" } }] }, } },
                    { $addFields: { parentbinname_index: { $indexOfArray: ['$inventorystoresparent.storebins._id', '$parentbinuid_lookup'] } } },
                    { $addFields: { parentbinname_lookup: { $arrayElemAt: ["$inventorystoresparent.storebins.name", { $cond: { if: { $eq: ["$parentbinname_index", -1] }, then: null, else: "$parentbinname_index" } }] }, } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                _id: { $ifNull: ['$_id', '-'] },
                                _storeuid: { $ifNull: ['$reorderdetails.storeuid', '-'] },
                                _binuid: { $ifNull: ['$handlingstores.binuid', '-'] },
                                _parentuid: { $ifNull: ['$parentstoreuid', '-'] },
                                orgname: { $ifNull: ["$organisations.name", "-"] },
                                ParentStoreCode: { $ifNull: ['$inventorystoresparent.code', '-'] },
                                StoreCode: { $ifNull: ['$inventorystores.code', '-'] },
                                StoreName: { $ifNull: ['$inventorystores.name', '-'] },
                                ItemCode: { $ifNull: ['$code', '-'] },
                                ItemName: { $ifNull: ['$name', '-'] },
                                ReorderLevel: { $ifNull: ['$reorderdetails.reorderlevel', ""] },
                                ReorderQty: { $ifNull: ['$reorderdetails.reorderquantity', 0] },
                                saleUOMdesc: { $ifNull: ['$referencevalues.valuedescription', '-'] },
                                FromBillLoc: { $ifNull: ['$parentbinname_lookup', '-'] },
                                ToBillLoc: { $ifNull: ['$inventorystores2.storebins.name', '-'] },
                                Vendor: { $ifNull: ['$vendors.name', '-'] }
                            },
                            sumFromStore: { $sum: { $ifNull: ['$stockledgers1.quantity', 0] } },
                        }
                    },
                    {
                        $match: {
                            '_id.ReorderLevel': { $ne: "" }
                        }
                    },
                    {
                        $match: {
                            'sumFromStore': 0
                        }
                    },
                    {
                        $lookup: {
                            from: "stockledgers",
                            let: {
                                w1: '$_id._id',
                                w2: '$_id._storeuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$itemmasteruid', '$$w1'] },
                                                { $eq: ['$storeuid', '$$w2'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "stockledgers2"
                        }
                    },
                    {
                        $unwind: { path: "$stockledgers2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $group: {
                            _id: {
                                orgname: '$_id.orgname',
                                ParentStoreCode: '$_id.ParentStoreCode',
                                StoreCode: '$_id.StoreCode',
                                StoreName: '$_id.StoreName',
                                ItemCode: '$_id.ItemCode',
                                ItemName: '$_id.ItemName',
                                ReorderLevel: '$_id.ReorderLevel',
                                ReorderQty: '$_id.ReorderQty',
                                saleUOMdesc: '$_id.saleUOMdesc',
                                FromBillLoc: '$_id.FromBillLoc',
                                ToBillLoc: '$_id.ToBillLoc',
                                Vendor: '$_id.Vendor',
                                sumFromStore: '$sumFromStore',
                                user: _user.name
                            },
                            sumToStore: { $sum: { $ifNull: ['$stockledgers2.quantity', 0] } }
                        }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $ne: ['$_id.ReorderLevel', 0] },
                                    { $lte: ['$sumToStore', '$_id.ReorderLevel'] }
                                ]
                            }
                        }
                    },
                    {
                        $sort: { '_id.ParentStoreCode': 1, '_id.StoreCode': 1, '_id.Vendor': 1, '_id.ItemCode': 1 }
                    }
                ]).exec();
                result = resultItemmasters;
            }
            catch (error) {
                this.logger.error('findRTCommon342 error:', error);
            }
            return result;
        });
    }
    findRTCommon343(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let storeuid = { $match: {} };
            if (req.storeuid != '') {
                storeuid = {
                    $match: {
                        'storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                    }
                };
            }
            ;
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDispensereturns = yield this.DispensereturnsModel.aggregate([
                    {
                        $match: {
                            'returndate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    }, storeuid,
                    {
                        $unwind: { path: "$itemdetails", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "storeuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientorders",
                            localField: "patientorderuid",
                            foreignField: "_id",
                            as: "patientorders"
                        }
                    },
                    {
                        $unwind: { path: "$patientorders", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientorders.patientorderitems", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "patientorders.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "patientorders.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemdetails.itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorders.patientorderitems.statusuid",
                            foreignField: "_id",
                            as: "referencevalues3"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues3", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientorders.patientorderitems.careprovideruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            Storename: { $ifNull: ["$inventorystores.name", "-"] },
                            ward: { $ifNull: ["$wards.name", "-"] },
                            bed: { $ifNull: ["$beds.name", "-"] },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            PatientName: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            PrescNo: { $ifNull: ["$patientorders.ordernumber", "-"] },
                            ItemCode: { $ifNull: ["$itemmasters.code", "-"] },
                            ItemName: { $ifNull: ["$itemmasters.name", "-"] },
                            Price: { $ifNull: ["$patientorders.patientorderitems.unitprice", 0] },
                            Quantity: { $ifNull: ["$itemdetails.quantity", 0] },
                            UOM: { $ifNull: ["$referencevalues2.valuedescription", "-"] },
                            OrderDate: { $dateToString: { format: "%d/%m/%Y", date: "$patientorders.orderdate", timezone: "+07:00", onNull: "-" } },
                            ReturnDate: { $dateToString: { format: "%d/%m/%Y", date: "$returndate", timezone: "+07:00", onNull: "-" } },
                            OrderStatus: { $ifNull: ["$referencevalues3.valuedescription", "-"] },
                            StatusUser: { $concat: [{ $ifNull: ["$users.name", "-"] }, " ", { $ifNull: ["$users.lastname", ""] }] },
                            Comment: { $ifNull: ["$itemdetails.comments", ""] },
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $sort: { Storename: 1, ward: 1, bed: 1, HN: 1 }
                    }
                ])
                    .exec();
                result = resultDispensereturns;
            }
            catch (error) {
                this.logger.error('findRTCommon343 error:', error);
            }
            return result;
        });
    }
    findRTCommon344(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            let fromdate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
            let todate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
            try {
                const resultitemmasters = yield this.itemmastersModel.aggregate([
                    { $unwind: { path: "$handlingstores", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A"
                        }
                    },
                    {
                        $match: {
                            'handlingstores.storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "handlingstores.storeuid",
                            foreignField: "_id",
                            as: "inventory"
                        }
                    },
                    { $unwind: { path: "$inventory", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$inventory.storebins", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                orguid: '$orguid',
                                itemmasteruid: '$_id',
                                itemcode: "$code",
                                storename: "$inventory.name",
                                binname: { $cond: { if: { $eq: ["$handlingstores.binuid", "$inventory.storebins._id"] }, then: "$inventory.storebins.name", else: "" } },
                            }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                'orguid': '$_id.orguid',
                                'itemmasteruid': '$_id.itemmasteruid',
                                itemcode: "$_id.itemcode",
                                storename: "$_id.storename",
                            },
                            binnamefinal: { $max: "$_id.binname" }
                        }
                    },
                    {
                        $lookup: {
                            from: 'itemmasters',
                            localField: '_id.itemmasteruid',
                            foreignField: '_id',
                            as: 'itemmasters'
                        }
                    },
                    {
                        $unwind: { path: '$itemmasters', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: '$itemmasters.handlingstores', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'itemmasters.handlingstores.storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    },
                    {
                        $lookup: {
                            from: 'stockledgers',
                            localField: 'itemmasters._id',
                            foreignField: 'itemmasteruid',
                            as: 'stockledgers'
                        }
                    },
                    {
                        $unwind: { path: '$stockledgers', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$stockledgers.storeuid', '$itemmasters.handlingstores.storeuid'] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: 'itemmasters.baseuomuid',
                            foreignField: '_id',
                            as: 'referencevalues'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: '$stockledgers.ledgerdetails'
                    },
                    { $lookup: { from: "organisations", localField: "_id.orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                orgname: { $ifNull: ["$organisations.name", "-"] },
                                StoreCode: "$_id.itemcode",
                                Storename: "$_id.storename",
                                ItemCode: { $ifNull: ["$itemmasters.code", "-"] },
                                ItemName: { $ifNull: ["$itemmasters.name", "-"] },
                                BatchNo: { $ifNull: ["$stockledgers.batchid", "-"] },
                                UoM: { $ifNull: ["$referencevalues.valuedescription", "-"] },
                                Quantity: "$stockledgers.quantity",
                                StoreBinName: '$binnamefinal',
                                expirydate: { $dateToString: { format: "%d/%m/%Y", date: "$stockledgers.expirydate", timezone: "+07:00", onNull: "-" } },
                                user: _user.name,
                                startdate: fromdate,
                                enddate: todate
                            },
                            BatchQty: { $sum: "$stockledgers.ledgerdetails.quantity" },
                            ItemCost: { $last: "$stockledgers.ledgerdetails.wac" },
                            Amount: { $sum: { $multiply: ['$stockledgers.ledgerdetails.quantity', '$stockledgers.ledgerdetails.wac'] } }
                        }
                    },
                    { $match: { 'BatchQty': { $ne: 0 } } },
                    {
                        $sort: { '_id.ItemCode': 1 }
                    }
                ])
                    .exec();
                result = resultitemmasters;
            }
            catch (error) {
                this.logger.error('findRTCommon344 error:', error);
            }
            return result;
        });
    }
    findRTCommon353(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientorders = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'orderdate': {
                                $gte: new Date(req.fromdate),
                                $lt: new Date(req.todate)
                            },
                            'statusflag': "A",
                        }
                    },
                    {
                        $lookup: {
                            from: 'patientvisits',
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: 'patientvisits'
                        }
                    },
                    {
                        $unwind: { path: '$patientvisits', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: '$patientorderitems'
                    },
                    {
                        $lookup: {
                            from: 'orderitems',
                            localField: "patientorderitems.orderitemuid",
                            foreignField: "_id",
                            as: 'orderitems'
                        }
                    },
                    {
                        $unwind: { path: '$orderitems', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: 'referencevalues1'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues1', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'referencevalues1.valuedescription': { $ne: 'Cancelled' }
                        }
                    },
                    {
                        $lookup: {
                            from: 'ordercategories',
                            localField: "patientorderitems.ordercatuid",
                            foreignField: "_id",
                            as: 'ordercategories'
                        }
                    },
                    {
                        $unwind: { path: '$ordercategories', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $or: [
                                {
                                    'ordercategories.description': "Medicine"
                                },
                                {
                                    'ordercategories.description': "Drug Supply"
                                },
                                {
                                    'ordercategories.description': "Medicine Supply"
                                }
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorderitems.priorityuid",
                            foreignField: "_id",
                            as: 'referencevalues'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            let: {
                                orderitemuid: '$patientorderitems.orderitemuid',
                                invstoreuid: '$invstoreuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$orderitemuid', '$$orderitemuid'] },
                                            ]
                                        }
                                    }
                                },
                                { $unwind: '$handlingstores' },
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$handlingstores.storeuid', '$$invstoreuid'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "stockledgers",
                            let: {
                                itemmasteruid: '$itemmasters._id',
                                storeuid: '$itemmasters.handlingstores.storeuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$itemmasteruid', '$$itemmasteruid'] },
                                                { $eq: ['$storeuid', '$$storeuid'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "stockledgers"
                        }
                    },
                    {
                        $unwind: { path: "$stockledgers", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tariffs",
                            let: {
                                tariffuid: '$patientorderitems.tariffuid'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$tariffuid'] },
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "tariffs"
                        }
                    },
                    {
                        $unwind: { path: "$tariffs", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            IO: { $substr: ["$patientvisits.visitid", 0, 1] }
                        }
                    },
                    {
                        $project: {
                            "GroupIO": { $cond: { if: { $eq: ['$IO', "I"] }, then: "IPD", else: { $cond: { if: { $eq: ['$IO', "H"] }, then: "HPRO", else: "OPD" } } } },
                            "ItemCode": { $ifNull: ['$orderitems.code', '-'] },
                            "ItemName": { $ifNull: ['$orderitems.name', '-'] },
                            "Qty": { $ifNull: ['$patientorderitems.quantity', 0] },
                            "UnitPrice": { $ifNull: ['$tariffs.unitprice', 0] },
                            "UnitCost": { $ifNull: [{ $arrayElemAt: ['$stockledgers.ledgerdetails.wac', -1] }, 0] },
                            Routine: { $cond: { if: { $eq: ["$referencevalues.valuecode", "ORDPRY1"] }, then: 1, else: 0 } },
                            Stat: { $cond: { if: { $eq: ["$referencevalues.valuecode", "ORDPRY2"] }, then: 1, else: 0 } },
                            "PresPriority": { $ifNull: ["$referencevalues.valuecode", '-'] },
                        }
                    },
                    {
                        $group: {
                            _id: {
                                GroupIO: "$GroupIO",
                                ItemCode: "$ItemCode",
                                ItemName: "$ItemName",
                            },
                            UnitPrice: { $push: '$UnitPrice' },
                            UnitCost: { $push: '$UnitCost' },
                            Qty: { $sum: '$Qty' },
                            Routine: { $sum: '$Routine' },
                            Stat: { $sum: '$Stat' }
                        }
                    },
                    {
                        $unwind: '$UnitPrice'
                    },
                    {
                        $sort: { UnitPrice: 1 }
                    },
                    {
                        $group: {
                            _id: {
                                GroupIO: "$_id.GroupIO",
                                ItemCode: "$_id.ItemCode",
                                ItemName: "$_id.ItemName",
                                UnitCost: '$UnitCost',
                                Qty: '$Qty',
                                Routine: '$Routine',
                                Stat: '$Stat'
                            },
                            UnitPrice: { $push: '$UnitPrice' },
                        }
                    },
                    {
                        $addFields: {
                            UnitCost: '$_id.UnitCost'
                        }
                    },
                    {
                        $unwind: '$UnitCost'
                    },
                    {
                        $sort: { UnitCost: 1 }
                    },
                    {
                        $group: {
                            _id: {
                                GroupIO: "$_id.GroupIO",
                                ItemCode: "$_id.ItemCode",
                                ItemName: "$_id.ItemName",
                                UnitPrice: '$UnitPrice',
                                Qty: '$_id.Qty',
                                Routine: '$_id.Routine',
                                Stat: '$_id.Stat'
                            },
                            UnitCost: { $push: '$UnitCost' },
                        }
                    },
                    {
                        $addFields: {
                            "TotalPrice": {
                                $multiply: [
                                    '$_id.Qty',
                                    {
                                        $cond: {
                                            if: { $eq: ['$_id.GroupIO', "IPD"] }, then: { $arrayElemAt: ['$_id.UnitPrice', -1] }, else: { $arrayElemAt: ['$_id.UnitPrice', 0] }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        $addFields: {
                            "TotalCost": {
                                $multiply: [
                                    '$_id.Qty',
                                    {
                                        $cond: {
                                            if: { $eq: ['$_id.GroupIO', "IPD"] }, then: { $arrayElemAt: ['$UnitCost', -1] }, else: { $arrayElemAt: ['$UnitCost', 0] }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        $addFields: {
                            "Profit": { $subtract: ["$TotalPrice", "$TotalCost"] }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            GroupIO: "$_id.GroupIO",
                            ItemCode: "$_id.ItemCode",
                            ItemName: "$_id.ItemName",
                            Qty: "$_id.Qty",
                            UP: {
                                $cond: {
                                    if: { $eq: ['$_id.GroupIO', "IPD"] }, then: { $arrayElemAt: ['$_id.UnitPrice', -1] }, else: { $arrayElemAt: ['$_id.UnitPrice', 0] }
                                }
                            },
                            UC: {
                                $cond: {
                                    if: { $eq: ['$_id.GroupIO', "IPD"] }, then: { $arrayElemAt: ['$UnitCost', -1] }, else: { $arrayElemAt: ['$UnitCost', 0] }
                                }
                            },
                            TotalPrice: "$TotalPrice",
                            TotalCost: "$TotalCost",
                            Profit: "$Profit",
                            Routine: "$_id.Routine",
                            Stat: "$_id.Stat",
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $sort: { GroupIO: 1 }
                    }
                ])
                    .exec();
                result = resultPatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon353 error:', error);
            }
            return result;
        });
    }
    findRTCommon354(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let fromdate = dateutils_1.default.convertISOtoDatetimeSlashPlusHourMinSecondsSemicolon(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let todate = dateutils_1.default.convertISOtoDatetimeSlashPlusHourMinSecondsSemicolon(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientorders = yield this.patientordersModel.aggregate([
                    { $match: { 'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'orderdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A"
                        } },
                    { $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: false } },
                    { $lookup: { from: "referencevalues", localField: "patientorderitems.statusuid", foreignField: "_id", as: "referencevalues" } },
                    { $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true } },
                    { $match: { "referencevalues.valuedescription": { $ne: "Cancelled" } } },
                    { $lookup: { from: "ordercategories", localField: "patientorderitems.ordercatuid", foreignField: "_id", as: "ordercategories" } },
                    { $unwind: { path: "$ordercategories", preserveNullAndEmptyArrays: true } },
                    { $match: { "$or": [{ "ordercategories.description": "Medicine" }, { "ordercategories.description": "Drug Supply" }, { "ordercategories.description": "Medicine Supply" }] } },
                    { $lookup: { from: "ordercategories", localField: "orderitems.ordercatuid", foreignField: "_id", as: "ordercategories2" } },
                    { $unwind: { path: "$ordercategories2", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "orderdepartmentuid", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "ordertodepartmentuid", foreignField: "_id", as: "departments2" } },
                    { $unwind: { path: "$departments2", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "entypeuid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            "visitid": { $cond: { if: { $eq: ['$patientvisits.valuecode', "INPAT"] }, then: "IPD", else: "OPD" } },
                            "g2": "$departments.name",
                            "g3": "$departments2.name",
                            "g4": "$ordercategories2.name",
                            'number': { $multiply: 1 },
                            'fromdate': { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            'todate': { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            'user': _user.name
                        }
                    },
                ]).exec();
                result = resultPatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon354 error:', error);
            }
            return result;
        });
    }
    findRTCommon355(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            let fromdate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
            let todate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
            try {
                const resultDrugmasters = yield this.DrugmastersModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'isnarcoticdrug': true
                        }
                    },
                    { $lookup: { from: "referencevalues", localField: "narcoticdrugtypeuid", foreignField: "_id", as: "narcoticdrugtype" } },
                    { $unwind: { path: "$narcoticdrugtype", preserveNullAndEmptyArrays: true } },
                    { $match: { $or: [{ 'narcoticdrugtype.valuecode': 'P2' }] } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "defaultdosageuom",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            let: {
                                org: '$orgcode',
                                code: '$code'
                            },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$orgcode', '$$org'] },
                                                { $eq: ['$code', '$$code'] }
                                            ]
                                        }
                                    }
                                },
                            ],
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "stockledgers",
                            localField: "itemmasters._id",
                            foreignField: "itemmasteruid",
                            as: "stockledgers"
                        }
                    },
                    {
                        $unwind: { path: "$stockledgers", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            "results": {
                                orgname: "$organisations.name",
                                'idabc': { $ifNull: ['$itemmasters._id', "-"] },
                                'code': { $ifNull: ['$code', "-"] },
                                'name': { $ifNull: ['$name', "-"] },
                                'UOM': { $ifNull: ['$referencevalues.valuedescription', "-"] },
                                'Qty': { $ifNull: ['$stockledgers.quantity', 0] },
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                orgname: "$results.orgname",
                                code: "$results.code",
                                name: "$results.name",
                                UOM: "$results.UOM",
                                user: _user.name,
                                startdate: fromdate,
                                enddate: todate
                            },
                            Qty: { $sum: "$results.Qty" }
                        }
                    },
                    {
                        $sort: { _id: 1 }
                    }
                ]).exec();
                result = resultDrugmasters;
            }
            catch (error) {
                this.logger.error('findRTCommon355 error:', error);
            }
            return result;
        });
    }
    findRTCommon356(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            try {
                const resultpatientorders = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orderdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'ordercattype': 'MEDICINE',
                            'statusflag': "A",
                            'ordernumber': { $regex: /^O/ },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: "referencevaluesS"
                        }
                    },
                    {
                        $match: {
                            "referencevaluesS.valuedescription": { $ne: 'Cancelled' }
                        }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientvisits.visitid': { $not: /^I/ },
                            'patientvisits.medicaldischargedate': { $ne: null }
                        }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: "referencevaluesP"
                        }
                    },
                    {
                        $unwind: { path: "$referencevaluesP", preserveNullAndEmptyArrays: true }
                    },
                    { $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patientorderitems.patientorderlogs", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patientorderitems.patientorderlogs.statusuid", foreignField: "_id", as: "patientorderlogdesc" } },
                    { $unwind: { path: "$patientorderlogdesc", preserveNullAndEmptyArrays: true } },
                    { $addFields: { prescript: { $cond: { if: { $eq: ['$patientorderlogdesc.valuedescription', 'Ordered'] }, then: '$patientorderitems.patientorderlogs.modifiedat', else: null } } } },
                    { $addFields: { allocate: { $cond: { if: { $eq: ['$patientorderlogdesc.valuedescription', 'Allocated'] }, then: '$patientorderitems.patientorderlogs.modifiedat', else: null } } } },
                    { $addFields: { verify: { $cond: { if: { $eq: ['$patientorderlogdesc.valuedescription', 'Verified'] }, then: '$patientorderitems.patientorderlogs.modifiedat', else: null } } } },
                    { $addFields: { dispense: { $cond: { if: { $eq: ['$patientorderlogdesc.valuedescription', 'Dispensed'] }, then: '$patientorderitems.patientorderlogs.modifiedat', else: null } } } },
                    {
                        $group: {
                            _id: {
                                orguidName: { $ifNull: ['$organisations.name', ""] },
                                ordernumber: { $ifNull: ["$ordernumber", "-"] },
                                HN: { $ifNull: ["$patients.mrn", "-"] },
                                patientName: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                wattingwtime: { $dateFromString: { dateString: { $substr: ["$waitingtime", 0, 19] } } },
                                FinanceTime: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$patientvisits.medicaldischargedate", timezone: "+07:00", onNull: "-" } },
                                PrescriptionStatus: { $ifNull: ["$referencevaluesP.valuedescription", "-"] },
                            },
                            prescript: { $max: "$prescript" },
                            allocate: { $max: "$allocate" },
                            verify: { $max: "$verify" },
                            dispense: { $max: "$dispense" },
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            orguidName: '$_id.orguidName',
                            HN: '$_id.HN',
                            patientName: '$_id.patientName',
                            ordernumber: '$_id.ordernumber',
                            orderdate: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$prescript", timezone: "+07:00", onNull: "" } },
                            allocate: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$allocate", timezone: "+07:00", onNull: "" } },
                            verify: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$verify", timezone: "+07:00", onNull: "" } },
                            DispenseDttm: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$dispense", timezone: "+07:00", onNull: "-" } },
                            FinanceTime: '$_id.FinanceTime',
                            T2_T1: {
                                $cond: {
                                    if: { $eq: ["$verify", ""] }, then: "", else: {
                                        $concat: [
                                            {
                                                $cond: [
                                                    { $lt: [{ $floor: { $divide: [{ $floor: { $divide: [{ $subtract: ["$verify", "$prescript"] }, 1000 * 60] } }, 60] } }, 10] },
                                                    { $concat: ["0", { $substr: [{ $floor: { $divide: [{ $floor: { $divide: [{ $subtract: ["$verify", "$prescript"] }, 1000 * 60] } }, 60] } }, 0, -1] }] },
                                                    { $substr: [{ $floor: { $divide: [{ $floor: { $divide: [{ $subtract: ["$verify", "$prescript"] }, 1000 * 60] } }, 60] } }, 0, -1] }
                                                ]
                                            },
                                            ':',
                                            {
                                                $cond: [
                                                    { $lt: [{ $mod: [{ $floor: { $divide: [{ $subtract: ["$verify", "$prescript"] }, 1000 * 60] } }, 60] }, 10] },
                                                    { $concat: ["0", { $substr: [{ $mod: [{ $floor: { $divide: [{ $subtract: ["$verify", "$prescript"] }, 1000 * 60] } }, 60] }, 0, -1] }] },
                                                    { $substr: [{ $mod: [{ $floor: { $divide: [{ $subtract: ["$verify", "$prescript"] }, 1000 * 60] } }, 60] }, 0, -1] }
                                                ]
                                            },
                                            ':',
                                            {
                                                $cond: [
                                                    { $lt: [{ $mod: [{ $ceil: { $divide: [{ $subtract: ["$verify", "$prescript"] }, 1000] } }, 60] }, 10] },
                                                    { $concat: ["0", { $substr: [{ $mod: [{ $ceil: { $divide: [{ $subtract: ["$verify", "$prescript"] }, 1000] } }, 60] }, 0, -1] }] },
                                                    { $substr: [{ $mod: [{ $ceil: { $divide: [{ $subtract: ["$verify", "$prescript"] }, 1000] } }, 60] }, 0, -1] }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            },
                            T3_T2: {
                                $cond: {
                                    if: { $eq: ["$dispense", ""] }, then: "", else: {
                                        $concat: [
                                            {
                                                $cond: [
                                                    { $lt: [{ $floor: { $divide: [{ $floor: { $divide: [{ $subtract: ["$dispense", "$verify"] }, 1000 * 60] } }, 60] } }, 10] },
                                                    { $concat: ["0", { $substr: [{ $floor: { $divide: [{ $floor: { $divide: [{ $subtract: ["$dispense", "$verify"] }, 1000 * 60] } }, 60] } }, 0, -1] }] },
                                                    { $substr: [{ $floor: { $divide: [{ $floor: { $divide: [{ $subtract: ["$dispense", "$verify"] }, 1000 * 60] } }, 60] } }, 0, -1] }
                                                ]
                                            },
                                            ':',
                                            {
                                                $cond: [
                                                    { $lt: [{ $mod: [{ $floor: { $divide: [{ $subtract: ["$dispense", "$verify"] }, 1000 * 60] } }, 60] }, 10] },
                                                    { $concat: ["0", { $substr: [{ $mod: [{ $floor: { $divide: [{ $subtract: ["$dispense", "$verify"] }, 1000 * 60] } }, 60] }, 0, -1] }] },
                                                    { $substr: [{ $mod: [{ $floor: { $divide: [{ $subtract: ["$dispense", "$verify"] }, 1000 * 60] } }, 60] }, 0, -1] }
                                                ]
                                            },
                                            ':',
                                            {
                                                $cond: [
                                                    { $lt: [{ $mod: [{ $ceil: { $divide: [{ $subtract: ["$dispense", "$verify"] }, 1000] } }, 60] }, 10] },
                                                    { $concat: ["0", { $substr: [{ $mod: [{ $ceil: { $divide: [{ $subtract: ["$dispense", "$verify"] }, 1000] } }, 60] }, 0, -1] }] },
                                                    { $substr: [{ $mod: [{ $ceil: { $divide: [{ $subtract: ["$dispense", "$verify"] }, 1000] } }, 60] }, 0, -1] }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            },
                            TotalTime: {
                                $cond: {
                                    if: { $eq: ["$dispense", ""] }, then: "", else: {
                                        $concat: [
                                            {
                                                $cond: [
                                                    { $lt: [{ $floor: { $divide: [{ $floor: { $divide: [{ $subtract: ["$dispense", "$prescript"] }, 1000 * 60] } }, 60] } }, 10] },
                                                    { $concat: ["0", { $substr: [{ $floor: { $divide: [{ $floor: { $divide: [{ $subtract: ["$dispense", "$prescript"] }, 1000 * 60] } }, 60] } }, 0, -1] }] },
                                                    { $substr: [{ $floor: { $divide: [{ $floor: { $divide: [{ $subtract: ["$dispense", "$prescript"] }, 1000 * 60] } }, 60] } }, 0, -1] }
                                                ]
                                            },
                                            ':',
                                            {
                                                $cond: [
                                                    { $lt: [{ $mod: [{ $floor: { $divide: [{ $subtract: ["$dispense", "$prescript"] }, 1000 * 60] } }, 60] }, 10] },
                                                    { $concat: ["0", { $substr: [{ $mod: [{ $floor: { $divide: [{ $subtract: ["$dispense", "$prescript"] }, 1000 * 60] } }, 60] }, 0, -1] }] },
                                                    { $substr: [{ $mod: [{ $floor: { $divide: [{ $subtract: ["$dispense", "$prescript"] }, 1000 * 60] } }, 60] }, 0, -1] }
                                                ]
                                            },
                                            ':',
                                            {
                                                $cond: [
                                                    { $lt: [{ $mod: [{ $ceil: { $divide: [{ $subtract: ["$dispense", "$orderdate"] }, 1000] } }, 60] }, 10] },
                                                    { $concat: ["0", { $substr: [{ $mod: [{ $ceil: { $divide: [{ $subtract: ["$dispense", "$prescript"] }, 1000] } }, 60] }, 0, -1] }] },
                                                    { $substr: [{ $mod: [{ $ceil: { $divide: [{ $subtract: ["$dispense", "$prescript"] }, 1000] } }, 60] }, 0, -1] }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            },
                            PrescriptionStatus: '$_id.PrescriptionStatus',
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                ]).exec();
                result = resultpatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon356 error:', error);
            }
            return result;
        });
    }
    findRTCommon357(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            try {
                const resultpatientorders = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orderdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "ordertodepartmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "drugmasters",
                            localField: "patientorderitems.drugmasteruid",
                            foreignField: "_id",
                            as: "drugmasters"
                        }
                    },
                    {
                        $match: {
                            'drugmasters.isantibiotic': true
                        }
                    },
                    {
                        $unwind: { path: "$drugmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "druggroups",
                            let: { druggroupsID1: { $arrayElemAt: ["$drugmasters.druggroups", 0] } },
                            pipeline: [
                                {
                                    $match: {
                                        $expr: {
                                            $and: [
                                                { $eq: ['$_id', '$$druggroupsID1'] }
                                            ]
                                        }
                                    }
                                }
                            ],
                            as: "druggroups"
                        }
                    },
                    {
                        $unwind: { path: "$druggroups", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: 'referencevalues'
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'referencevalues.valuedescription': { $ne: "Cancelled" }
                        }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorderitems.quantityUOM",
                            foreignField: "_id",
                            as: 'referencevalues2'
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                departments: { $ifNull: ["$departments.name", "-"] },
                                code: { $ifNull: ["$drugmasters.code", "-"] },
                                name: { $ifNull: ["$drugmasters.name", "-"] },
                                qty: { $ifNull: ["$patientorderitems.quantity", 0] },
                                uom: { $ifNull: ["$referencevalues2.valuedescription", "-"] },
                                drugGroup: { $ifNull: ["$druggroups.name", "-"] },
                                referencevalues: { $ifNull: ["$referencevalues.valuedescription", "-"] }
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $group: {
                            _id: {
                                departments: "$results.departments",
                                code: "$results.code",
                                name: "$results.name",
                                uom: "$results.uom",
                                drugGroup: "$results.drugGroup",
                                user: _user.name,
                                startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                                enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                            },
                            qty: { $sum: "$results.qty" }
                        }
                    }
                ]).exec();
                result = resultpatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon357 error:', error);
            }
            return result;
        });
    }
    findRTCommon358(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            let fromdate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
            let todate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
            try {
                const resultpatientorders = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orderdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $unwind: { path: '$patientorderitems', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "drugmasters",
                            localField: "patientorderitems.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "drugmasters"
                        }
                    },
                    {
                        $match: {
                            'drugmasters.ishighalertdrug': true
                        }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: 'referencevaluesP'
                        }
                    },
                    {
                        $match: {
                            'referencevaluesP.valuedescription': { $ne: "Cancelled" }
                        }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientorderitems.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: '$orderitems', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: '$patients', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: '$nametitle', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientorderitems.careprovideruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: '$users', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "orderdepartmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: '$departments', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            DateTime: { $dateToString: { format: "%d/%m/%Y ", date: "$patientorderitems.startdate", timezone: "+07:00", onNull: "-" } },
                            LocationOrder: { $ifNull: ["$departments.name", "-"] },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            patientName: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                            PrecisionNo: { $ifNull: ["$ordernumber", "-"] },
                            OrderItem: { $ifNull: ["$orderitems.name", "-"] },
                            Qty: { $ifNull: ["$patientorderitems.quantity", 0] },
                            Doctor: { $concat: [{ $ifNull: ["$users.name", ""] }, " ", { $ifNull: ["$users.lastname", ""] }] },
                            user: _user.name,
                            startdate: fromdate,
                            enddate: todate
                        }
                    }
                ]).exec();
                result = resultpatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon358 error:', error);
            }
            return result;
        });
    }
    findRTCommon359(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const fromdate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let storeuid = { $match: {} };
                if (req.storeuid != '') {
                    storeuid = {
                        $match: {
                            'storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    };
                }
                const resultDispensereturns = yield this.DispensereturnsModel.aggregate([
                    {
                        $match: {
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            returndate: {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            statusflag: "A",
                        }
                    },
                    storeuid,
                    {
                        $lookup: {
                            from: 'inventorystores',
                            localField: 'storeuid',
                            foreignField: '_id',
                            as: 'inventorystores'
                        }
                    },
                    {
                        $unwind: { path: '$inventorystores', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'patients',
                            localField: 'patientuid',
                            foreignField: '_id',
                            as: 'patients'
                        }
                    },
                    {
                        $unwind: { path: '$patients', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: 'patients.titleuid',
                            foreignField: '_id',
                            as: 'referencevalues'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'patientvisits',
                            localField: 'patientvisituid',
                            foreignField: '_id',
                            as: 'patientvisits'
                        }
                    },
                    {
                        $unwind: { path: '$patientvisits', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'wards',
                            localField: 'patientvisits.bedoccupancy.warduid',
                            foreignField: '_id',
                            as: 'wards'
                        }
                    },
                    {
                        $unwind: { path: '$wards', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'beds',
                            localField: 'patientvisits.bedoccupancy.beduid',
                            foreignField: '_id',
                            as: 'beds'
                        }
                    },
                    {
                        $unwind: { path: '$beds', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'patientorders',
                            localField: 'patientorderuid',
                            foreignField: '_id',
                            as: 'patientorders'
                        }
                    },
                    {
                        $unwind: { path: '$patientorders', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: 'patientorders.patientorderitems.statusuid',
                            foreignField: '_id',
                            as: 'referencevalues2'
                        }
                    },
                    {
                        $unwind: { path: '$referencevalues2', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'itemmasters',
                            localField: 'itemdetails.itemmasteruid',
                            foreignField: '_id',
                            as: 'itemmasters'
                        }
                    },
                    {
                        $unwind: { path: '$itemmasters', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'users',
                            localField: 'returnedby',
                            foreignField: '_id',
                            as: 'users'
                        }
                    },
                    {
                        $unwind: { path: '$users', preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            _id: 0,
                            fromdate: fromdate,
                            fromtime: dateutils_1.default.convertISOtoHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))) + ' To ',
                            totime: dateutils_1.default.convertISOtoHourMin(dateutils_1.default.convertUTCtoGMT(new Date(req.todate))),
                            StoreNameHeader: { $cond: { if: { $eq: [req.storeuid, ""] }, then: "++ All Store ++", else: { $ifNull: ['$inventorystores.name', ''] } } },
                            StoreName: { $ifNull: ['$inventorystores.name', '-'] },
                            ward: { $ifNull: ['$wards.name', '-'] },
                            bed: { $ifNull: ['$beds.name', '-'] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            PatientName: {
                                $ifNull: [{
                                        $concat: ['$referencevalues.valuedescription', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                            },
                                            { $ifNull: ['$patients.lastname', ""] }]
                                    }, '-']
                            },
                            PrescNo: { $ifNull: ['$patientorders.ordernumber', '-'] },
                            ItemName: { $ifNull: ['$itemmasters.description', '-'] },
                            Quantity: { $ifNull: [{ $sum: '$itemdetails.quantity' }, '-'] },
                            OrderDate: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$patientorders.orderdate", timezone: "+07:00", onNull: "-" } },
                            ReturnDate: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$returndate", timezone: "+07:00", onNull: "-" } },
                            OrderStatus: { $ifNull: ['$referencevalues2.valuedescription', '-'] },
                            StatusUser: { $concat: [{ $ifNull: ['$users.name', ''] }, ' ', { $ifNull: ['$users.lastname', ''] }] },
                            user: _user.name
                        }
                    },
                    { $sort: { StoreName: 1, ward: 1 } }
                ]).exec();
                result = resultDispensereturns;
            }
            catch (error) {
                this.logger.error('findRTCommon359 error:', error);
            }
            return result;
        });
    }
    findRTCommon360() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Method not implemented.");
        });
    }
    findRTCommon408(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = {
                    $match: {
                        'isBill': 'billed'
                    }
                };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $unwind: '$visitcareproviders'
                    },
                    {
                        $match: {
                            'visitcareproviders.isprimarycareprovider': true
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "visitcareproviders.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: ['$patients.lastname', ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: ["$departments.name", "-"] },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: { $ifNull: ['$orderitems.name', '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $ifNull: ['$uomdesc.valuedescription', ' '] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                los: '$los',
                                itemnameTH: '$itemnameTH',
                                datefromto: '$datefromto'
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            los: '$_id.los',
                            itemnameTH: '$_id.itemnameTH',
                            datefromto: '$_id.datefromto'
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon408 error:', error);
            }
            return result;
        });
    }
    findRTCommon409(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: ['$patients.lastname', ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: {
                                $cond: {
                                    if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.code", '-'] },
                                    else: { $ifNull: ['$orderitems.code', '-'] }
                                }
                            },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            TEL1: { $ifNull: ['$repcfg.documentno', '-'] },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            TEL2: { $ifNull: ['$repcfg.documenttype', '-'] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                TEL1: '$TEL1',
                                TEL2: '$TEL2',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            TEL1: '$_id.TEL1',
                            TEL2: '$_id.TEL2',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            reqbilled: req.isbill
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 },
                        }
                    },
                    {
                        $sort: { billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon409 error:', error);
            }
            return result;
        });
    }
    findRTCommon410(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = {
                    $match: {
                        'isBill': 'billed'
                    }
                };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $unwind: '$visitcareproviders'
                    },
                    {
                        $match: {
                            'visitcareproviders.isprimarycareprovider': true
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "visitcareproviders.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: ["$departments.name", "-"] },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: { $ifNull: ['$orderitems.name', '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $ifNull: ['$uomdesc.valuedescription', ' '] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto'
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            los: '$_id.los',
                            itemnameTH: '$itemnameTH',
                            datefromto: '$_id.datefromto'
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon410 error:', error);
            }
            return result;
        });
    }
    findRTCommon411(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let fromdate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let todate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: '$bedoccupancy'
                    },
                    {
                        $match: {
                            'bedoccupancy.isactive': true
                        }
                    },
                    {
                        $unwind: '$visitcareproviders'
                    },
                    {
                        $match: {
                            'visitcareproviders.isprimarycareprovider': true
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "visitcareproviders.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            searchdate: { $concat: [fromdate, ' - ', todate] },
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $ifNull: [{
                                        $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                            },
                                            { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                    }, '-']
                            },
                            PatientNameTH: {
                                $ifNull: [{
                                        $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                            },
                                            { $ifNull: ["$patients.locallastname", ""] }]
                                    }, '-']
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            chargedate: { $dateToString: { format: "%d/%m/%Y", date: '$patientchargecodes.chargecodes.chargedate', timezone: "+07:00", onNull: "-" } },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            datefrom: { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            dateto: { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: { $ifNull: ['$orderitems.name', '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                searchdate: '$searchdate',
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                chargedate: '$chargedate',
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                datefrom: '$datefrom',
                                dateto: '$dateto',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            searchdate: '$_id.searchdate',
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            chargedate: '$_id.chargedate',
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            datefrom: '$_id.datefrom',
                            dateto: '$_id.dateto',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net"
                        }
                    },
                    {
                        $sort: { billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon411 error:', error);
            }
            return result;
        });
    }
    findRTCommon412(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let fromdate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let todate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $unwind: '$visitcareproviders'
                    },
                    {
                        $match: {
                            'visitcareproviders.isprimarycareprovider': true
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "visitcareproviders.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            searchdate: { $concat: [fromdate, ' - ', todate] },
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            chargedate: { $dateToString: { format: "%d/%m/%Y", date: '$patientchargecodes.chargecodes.chargedate', timezone: "+07:00", onNull: "-" } },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: { $ifNull: ['$orderitems.name', '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                searchdate: '$searchdate',
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                chargedate: '$chargedate',
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            searchdate: '$_id.searchdate',
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            chargedate: '$_id.chargedate',
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            los: '$_id.los',
                            itemnameTH: '$_id.itemnameTH',
                            datefromto: '$_id.datefromto',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon412 error:', error);
            }
            return result;
        });
    }
    findRTCommon413(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let patientt = { $match: {} };
                try {
                    if (req.patientuid != '' && req.patientuid != null) {
                        patientt = {
                            $match: {
                                'patientuid': new mongoose_1.Types.ObjectId(req.patientuid),
                            }
                        };
                    }
                }
                catch (res) {
                    req.patientuid = '';
                }
                let balance = parseFloat(req.fromamount);
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDeposits = yield this.depositsModel.aggregate([
                    patientt,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "deposits",
                            localField: "orgdepositrefuid",
                            foreignField: "_id",
                            as: "deposits2"
                        }
                    },
                    {
                        $unwind: { path: "$deposits2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            balance: { $ifNull: [req.fromamount, '-'] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            fullname: { $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $cond: { if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ",
                                                    { $ifNull: ["$patients.localfirstname", ""] }, " ",
                                                    { $ifNull: ["$patients.localmiddlename", ""] }, " ",
                                                    { $ifNull: ["$patients.locallastname", ""] }] }
                                        }
                                    },
                                    else: { $cond: { if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ",
                                                    { $ifNull: ["$patients.firstname", ""] }, " ",
                                                    { $ifNull: ["$patients.middlename", ""] }, " ",
                                                    { $ifNull: ["$patients.lastname", ""] }] }
                                        }
                                    }
                                }
                            },
                            fullnameTH: {
                                $ifNull: [{
                                        $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                            },
                                            { $ifNull: ["$patients.locallastname", ""] }]
                                    }, '-']
                            },
                            typeDeposit: {
                                $cond: {
                                    if: { $eq: ["$iscancelled", true] }, then: '4.Cancelled', else: {
                                        $cond: {
                                            if: { "$eq": [{ "$substr": ["$sequencenumber", 0, 2] }, "RF"] }, then: '3.Refund', else: {
                                                $cond: {
                                                    if: { "$eq": [{ "$substr": ["$sequencenumber", 3, 2] }, "DC"] }, then: '2.Use Deposit', else: {
                                                        $cond: {
                                                            if: {
                                                                $or: [
                                                                    { "$eq": [{ "$substr": ["$sequencenumber", 3, 2] }, "DO"] },
                                                                    { "$eq": [{ "$substr": ["$sequencenumber", 3, 2] }, "DP"] }
                                                                ]
                                                            }, then: '1.DEPOSIT', else: 'ERROR!'
                                                        }
                                                    },
                                                }
                                            },
                                        }
                                    },
                                }
                            },
                            date: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$depositdate", timezone: "+07:00", onNull: "-" } },
                            billNumber: { $ifNull: ['$sequencenumber', '-'] },
                            originalNumber: { $ifNull: ['$deposits2.sequencenumber', '-'] },
                            paidamount: { $ifNull: ['$amount', '-'] },
                            cashier: { $ifNull: ['$users.description', '-'] },
                            cashierEN: { $ifNull: ['$users.printname', '-'] },
                            reason: { $ifNull: ['$comments', '-'] },
                            user: _user.name
                        }
                    },
                    {
                        $sort: { HN: 1, typeDeposit: 1, date: 1 }
                    }
                ]).exec();
                result = resultDeposits;
            }
            catch (error) {
                this.logger.error('findRTCommon413 error:', error);
            }
            return result;
        });
    }
    findRTCommon414(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let startdate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let enddate = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDeposits = yield this.depositsModel.aggregate([
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'depositdate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'statusflag': 'A',
                            'shouldnotbeused': { $ne: true }
                        }
                    },
                    { $lookup: { from: "referencevalues", localField: "cancelrefundreasonuid", foreignField: "_id", as: "cancelrefundreason" } },
                    { $unwind: { path: "$cancelrefundreason", preserveNullAndEmptyArrays: true } },
                    { $addFields: { cancelrefundreason: {
                                $cond: { if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: ['$cancelrefundreason.locallanguagedesc', ""] },
                                    else: { $ifNull: ['$cancelrefundreason.valuedescription', ""] } }
                            } } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "deposits",
                            localField: "orgdepositrefuid",
                            foreignField: "_id",
                            as: "deposits2"
                        }
                    },
                    {
                        $unwind: { path: "$deposits2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientbills",
                            localField: "adjustedbilluid",
                            foreignField: "_id",
                            as: "patientbills"
                        }
                    },
                    {
                        $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            "istransferredrefunded": { $ifNull: ['$istransferredrefund', false] },
                        }
                    },
                    { $lookup: { from: "deposits", localField: "orgdepositrefuid", foreignField: "orgdepositrefuid", as: "deposits3" } },
                    {
                        $addFields: {
                            "refnumber": {
                                $arrayElemAt: [{
                                        $filter: {
                                            input: "$deposits3", as: "dep3",
                                            cond: {
                                                $and: [{ $eq: ["$$dep3.isrefund", true] },
                                                    {
                                                        $or: [
                                                            { $eq: [{ $arrayElemAt: ["$$dep3.transferto", 0] }, '$_id'] },
                                                            { $eq: [{ $ifNull: [{ $arrayElemAt: ["$$dep3.transferto", 0] }, null] }, null] }
                                                        ]
                                                    },
                                                    { $eq: ["$$dep3.linkedtransferuid", "$linkedtransferuid"] },
                                                    { $eq: ["$$dep3.istransferredrefund", true] },
                                                    { $gte: [{ $dateToString: { format: "%Y/%m/%d %H/%M", date: "$$dep3.depositdate", timezone: "+07:00", onNull: "-" } }, { $dateToString: { format: "%Y/%m/%d %H/%M", date: "$depositdate", timezone: "+07:00", onNull: "-" } }] }
                                                ]
                                            }
                                        }
                                    }, 0]
                            }
                        }
                    },
                    {
                        $addFields: {
                            "typeDeposit_before_check": {
                                $cond: {
                                    if: {
                                        $or: [{
                                                $and: [{ $eq: [{ "$substr": ["$sequencenumber", 0, 2] }, 'RF'] },
                                                    { $eq: [{ $abs: '$amount' }, { $abs: { $ifNull: ['$deposits2.amount', 0] } }] },
                                                    {
                                                        $eq: [{ $dateToString: { format: "%Y/%m/%d", date: "$depositdate", timezone: "+07:00", onNull: "-" } },
                                                            { $dateToString: { format: "%Y/%m/%d", date: "$deposits2.depositdate", timezone: "+07:00", onNull: "-" } }]
                                                    }]
                                            },
                                        ]
                                    }, then: 'Cancelled',
                                    else: {
                                        $cond: {
                                            if: { "$eq": [{ "$substr": ["$sequencenumber", 0, 2] }, "RF"] }, then: 'Refund', else: {
                                                $cond: {
                                                    if: { "$eq": [{ "$substr": ["$sequencenumber", 3, 2] }, "DC"] }, then: 'Use Deposit', else: {
                                                        $cond: {
                                                            if: {
                                                                $or: [
                                                                    { "$eq": [{ "$substr": ["$sequencenumber", 3, 2] }, "DO"] },
                                                                    { "$eq": [{ "$substr": ["$sequencenumber", 3, 2] }, "DP"] }
                                                                ]
                                                            }, then: 'DEPOSIT', else: 'ERROR!'
                                                        }
                                                    },
                                                }
                                            },
                                        }
                                    },
                                }
                            },
                        }
                    },
                    {
                        $addFields: {
                            "typeDeposit_before": {
                                $cond: {
                                    if: { $eq: ['$typeDeposit_before_check', "Cancelled"] }, then: {
                                        $cond: {
                                            if: { "$eq": [{ $substr: ["$refnumber.sequencenumber", 0, 2] }, "RF"] }, then: 'Refund',
                                            else: '$typeDeposit_before_check'
                                        }
                                    },
                                    else: '$typeDeposit_before_check'
                                }
                            },
                        }
                    },
                    {
                        $addFields: {
                            fullname: {
                                $ifNull: [{
                                        $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                            },
                                            { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                    }, '-']
                            },
                        }
                    },
                    {
                        $addFields: {
                            fullnameTH: {
                                $ifNull: [{
                                        $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                            },
                                            { $ifNull: ["$patients.locallastname", ""] }]
                                    }, '-']
                            },
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            fromdate: startdate,
                            todate: enddate,
                            fullname: {
                                $cond: {
                                    if: { $and: [{ $eq: ["$preflang.valuedescription", "Thai"] }, { $eq: ["$patients.isanonymous", true] }] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' Anonymous'] },
                                    else: {
                                        $cond: {
                                            if: { $and: [{ $eq: ["$patients.isanonymous", true] }] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' Anonymous'] },
                                            else: {
                                                $cond: {
                                                    if: { $and: [{ $eq: ["$preflang.valuedescription", "Thai"] }] },
                                                    then: { $ifNull: ['$fullnameTH', ""] },
                                                    else: { $ifNull: ["$fullname", ""] }
                                                }
                                            },
                                        },
                                    },
                                },
                            },
                            dateGroup_sort: { $dateToString: { format: "%Y/%m/%d", date: "$depositdate", timezone: "+07:00", onNull: "-" } },
                            dateGroup: { $dateToString: { format: "%d/%m/%Y", date: "$depositdate", timezone: "+07:00", onNull: "-" } },
                            typeDeposit: '$typeDeposit_before',
                            typeDeposit_sort: {
                                $cond: {
                                    if: {
                                        $or: [{
                                                $and: [{ $eq: [{ "$substr": ["$sequencenumber", 0, 2] }, 'RF'] },
                                                    { $eq: [{ $abs: '$amount' }, { $abs: { $ifNull: ['$deposits2.amount', 0] } }] },
                                                    {
                                                        $eq: [{ $dateToString: { format: "%Y/%m/%d", date: "$depositdate", timezone: "+07:00", onNull: "-" } },
                                                            { $dateToString: { format: "%Y/%m/%d", date: "$deposits2.depositdate", timezone: "+07:00", onNull: "-" } }]
                                                    }]
                                            },
                                        ]
                                    }, then: {
                                        $cond: {
                                            if: { "$eq": [{ $substr: ["$refnumber.sequencenumber", 0, 2] }, "RF"] }, then: '3Refund',
                                            else: '4Cancelled'
                                        }
                                    },
                                    else: {
                                        $cond: {
                                            if: { "$eq": [{ "$substr": ["$sequencenumber", 0, 2] }, "RF"] }, then: '3Refund', else: {
                                                $cond: {
                                                    if: { "$eq": [{ "$substr": ["$sequencenumber", 3, 2] }, "DC"] }, then: '2Use Deposit', else: {
                                                        $cond: {
                                                            if: {
                                                                $or: [
                                                                    { "$eq": [{ "$substr": ["$sequencenumber", 3, 2] }, "DO"] },
                                                                    { "$eq": [{ "$substr": ["$sequencenumber", 3, 2] }, "DP"] }
                                                                ]
                                                            }, then: '1DEPOSIT', else: 'ERROR!'
                                                        }
                                                    },
                                                }
                                            },
                                        }
                                    },
                                }
                            },
                            date: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$depositdate", timezone: "+07:00", onNull: "-" } },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            billNumber: { $cond: { if: { "$eq": [{ "$substr": ["$sequencenumber", 3, 2] }, "DC"] }, then: '$patientbills.sequencenumber', else: { $ifNull: ['$sequencenumber', '-'] } } },
                            originalNumber: { $cond: { if: {
                                        $or: [
                                            { "$eq": [{ "$substr": ["$sequencenumber", 3, 2] }, "DO"] },
                                            { "$eq": [{ "$substr": ["$sequencenumber", 3, 2] }, "DP"] }
                                        ]
                                    }, then: '', else: { $ifNull: ['$deposits2.sequencenumber', '-'] } } },
                            paidamount: { $ifNull: ['$amount', 0] },
                            cashier: { $ifNull: ['$users.description', '-'] },
                            cashierEN: { $ifNull: ['$users.printname', '-'] },
                            reason: {
                                $concat: [{
                                        $ifNull: [
                                            {
                                                $cond: {
                                                    if: {
                                                        $and: [
                                                            { $eq: ['$typeDeposit_before', 'Refund'] },
                                                            { $eq: ['$istransferredrefund', true] },
                                                        ]
                                                    },
                                                    then: { $concat: ['Transfer ', { $ifNull: ['$comments', ''] }] },
                                                    else: {
                                                        $cond: {
                                                            if: {
                                                                $and: [
                                                                    { $eq: ['$typeDeposit_before', 'DEPOSIT'] },
                                                                    { $eq: [{ "$substr": ["$refnumber.sequencenumber", 0, 2] }, 'RF'] },
                                                                ]
                                                            }, then: { $concat: [{ $ifNull: [{ $concat: ['ref : ', "$refnumber.sequencenumber", ' '] }, ''] }, { $ifNull: ['$comments', ''] }] },
                                                            else: { $ifNull: ['$comments', ''] }
                                                        }
                                                    }
                                                }
                                            },
                                            ''
                                        ]
                                    }, ' ', { $ifNull: ['$cancelrefundreason', ''] }, ' ', { $ifNull: ['$cancelrefundcomments', ''] }]
                            },
                            user: _user.name
                        }
                    },
                    {
                        $sort: { dateGroup_sort: 1, typeDeposit_sort: 1 }
                    }
                ]).exec();
                result = resultDeposits;
            }
            catch (error) {
                this.logger.error('findRTCommon414 error:', error);
            }
            return result;
        });
    }
    findRTCommon423(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let fromdate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(new Date(req.fromdate));
                let todate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(new Date(req.todate));
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                const resultPatientorders = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $addFields: {
                            lastdepartmentuid: { $arrayElemAt: ["$visitcareproviders.departmentuid", -1] }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "lastdepartmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: ["$departments.name", "-"] },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemname: { $ifNull: ["$patientchargecodes.chargecodes.orderitemname", '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billingGroupCodeEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billingGroupCodeTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingSubGroupCodeEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingSubGroupCodeTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            CashierEN: { $ifNull: ['$users.printname', '-'] },
                            CashierTH: { $ifNull: ['$users.description', '-'] },
                            PackageCode: { $ifNull: ['$ordersets.code', '-'] },
                            PackageNameEN: { $ifNull: ['$ordersets.name', '-'] },
                            PackageNameTH: { $ifNull: ['$ordersets.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            isflexipackage: { $ifNull: ['$ordersets.isflexipackage'] },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billingGroupCodeEN: '$billingGroupCodeEN',
                                billingGroupCodeTH: '$billingGroupCodeTH',
                                billingSubGroupCodeEN: '$billingSubGroupCodeEN',
                                billingSubGroupCodeTH: '$billingSubGroupCodeTH',
                                isBill: '$isBill',
                                CashierEN: '$CashierEN',
                                CashierTH: '$CashierTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                PackageCode: '$PackageCode',
                                PackageNameEN: '$PackageNameEN',
                                PackageNameTH: '$PackageNameTH',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                                isflexipackage: '$isflexipackage'
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billingGroupCodeEN: '$_id.billingGroupCodeEN',
                            billingGroupCodeTH: '$_id.billingGroupCodeTH',
                            billingSubGroupCodeEN: '$_id.billingSubGroupCodeEN',
                            billingSubGroupCodeTH: '$_id.billingSubGroupCodeTH',
                            isBill: '$_id.isBill',
                            CashierEN: '$_id.CashierEN',
                            CashierTH: '$_id.CashierTH',
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            PackageNameEN: '$_id.PackageNameEN',
                            PackageNameTH: '$_id.PackageNameTH',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            isflexipackage: '$_id.isflexipackage',
                            user: _user.name
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { billingGroupCodeEN: 1, billingSubGroupCodeEN: 1, PackageNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon423 error:', error);
            }
            return result;
        });
    }
    findRTCommon424(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let printbydate1 = { $match: {} };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                try {
                    if (req.printbydate == 'true') {
                        printbydate1 = {
                            $match: {
                                'patientchargecodes.chargecodes.chargedate': {
                                    $gte: new Date(req.fromdate),
                                    $lte: new Date(req.todate)
                                },
                            }
                        };
                    }
                }
                catch (res) { }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    { $addFields: { 'firstcareprovideruid': { $arrayElemAt: ['$visitcareproviders.careprovideruid', 0] } } },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: { "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }] },
                    },
                    { $lookup: { from: "users", localField: "patientchargecodes.chargecodes.careprovideruid", foreignField: "_id", as: "doctor_last" } },
                    {
                        $addFields: {
                            "doctor_last": { $arrayElemAt: [{ $filter: { input: "$doctor_last", as: "doc_last", cond: { $and: [{ $eq: ['$$doc_last.iscareprovider', true] }] } } }, -1] }
                        }
                    },
                    {
                        $addFields: {
                            "doctor_last_name_EN": '$doctor_last.printname'
                        }
                    },
                    {
                        $addFields: {
                            "doctor_last_name_TH": '$doctor_last.description'
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    printbydate1,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "users", localField: "patientchargecodes.chargecodes.careprovideruid", foreignField: "_id", as: "doctor1" } },
                    { $unwind: { path: "$doctor1", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientorders1" } },
                    { $lookup: { from: "patientorders", localField: "patientorders1.patientorderitems.parentorderuid", foreignField: "_id", as: "patientorders2" } },
                    { $lookup: { from: "users", localField: "patientorders2.patientorderitems.careprovideruid", foreignField: "_id", as: "users2" } },
                    { $unwind: { path: "$users2", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientpackages", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientpackages1" } },
                    { $unwind: { path: "$patientpackages1", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            visitcareproviders_lookup_first: { $min: "$visitcareproviders.careprovideruid" }
                        }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "visitcareproviders_lookup_first",
                            foreignField: "_id",
                            as: "users_first"
                        }
                    },
                    {
                        $unwind: { path: "$users_first", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            CareproviderEN: { $ifNull: [{ $ifNull: ["$doctor1.printname", '$users_first.printname'] }, '-'] }
                        }
                    },
                    {
                        $addFields: {
                            CareproviderTH: { $ifNull: [{ $ifNull: ["$doctor1.description", '$users_first.description'] }, '-'] }
                        }
                    },
                    {
                        $addFields: {
                            iscareprovider_doc: { $ifNull: [{ $ifNull: ["$doctor1.iscareprovider", '$users_first.iscareprovider'] }, '-'] }
                        }
                    },
                    { $addFields: { 'postaudits': { $arrayElemAt: ['$patients.patientdemochanges.postaudit', -1] } } },
                    { $addFields: { sLocationF: { $ifNull: [{ $indexOfBytes: ["$postaudits", '"firstname'] }, 0] } } },
                    { $addFields: { eLocationF: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sLocationF'] }, 0] } } },
                    { $addFields: { FirstName: { $substr: ["$postaudits", { $add: ['$sLocationF', 13] }, { $subtract: [{ $subtract: ['$eLocationF', '$sLocationF'] }, 14] }] } } },
                    { $addFields: { sLocationL: { $ifNull: [{ $indexOfBytes: ["$postaudits", '"lastname'] }, 0] } } },
                    { $addFields: { eLocationL: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sLocationL'] }, 0] } } },
                    { $addFields: { LastName: { $substr: ["$postaudits", { $add: ['$sLocationL', 12] }, { $subtract: [{ $subtract: ['$eLocationL', '$sLocationL'] }, 13] }] } } },
                    { $addFields: { sposF: { $ifNull: [{ $indexOfBytes: ["$postaudits", "localfirstname"] }, 0] } } },
                    { $addFields: { eposF: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sposF'] }, 0] } } },
                    { $addFields: { LocalFirstName: { $substr: ["$postaudits", { $add: ['$sposF', 17] }, { $subtract: [{ $subtract: ['$eposF', '$sposF'] }, 18] }] } } },
                    { $addFields: { sposL: { $ifNull: [{ $indexOfBytes: ["$postaudits", "locallastname"] }, 0] } } },
                    { $addFields: { eposL: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sposL'] }, 0] } } },
                    { $addFields: { LocalLastName: { $substr: ["$postaudits", { $add: ['$sposL', 16] }, { $subtract: [{ $subtract: ['$eposL', '$sposL'] }, 17] }] } } },
                    {
                        $project: {
                            careprovideruid: "$doctor1._id",
                            firstcareprovideruid: "$firstcareprovideruid",
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ',
                                                    { $ifNull: ['$FirstName', ""] }, ' ',
                                                    { $ifNull: [{ $ifNull: ['$LastName', ""] }, ""] }]
                                            }, '-']
                                    },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ',
                                                    { $ifNull: ['$LocalFirstName', ""] }, ' ',
                                                    { $ifNull: [{ $ifNull: ['$LocalLastName', ""] }, ""] }]
                                            }, '-']
                                    },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            Quantity: { $cond: { if: { $eq: [{ $ifNull: [req.payoragreement, ''] }, ''] }, then: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] }, else: { $ifNull: ['$patientchargecodes.chargecodes.orgquantity', '-'] } } },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            CareproviderEN: { $cond: { if: { $eq: ['$iscareprovider_doc', true] }, then: "$CareproviderEN", else: { $ifNull: ['$doctor_last_name_EN', '-'] } } },
                            CareproviderTH: { $cond: { if: { $eq: ['$iscareprovider_doc', true] }, then: "$CareproviderTH", else: { $ifNull: ['$doctor_last_name_TH', '-'] } } },
                            Department: '',
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$patientpackages.packagename", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                careprovideruid: '$careprovideruid',
                                firstcareprovideruid: '$firstcareprovideruid',
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                CareproviderEN: '$CareproviderEN',
                                CareproviderTH: '$CareproviderTH',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            careprovideruid: { $cond: { if: { $eq: ['$_id.careprovideruid', '$_id.firstcareprovideruid'] }, then: "A", else: "B" } },
                            firstcareprovideruid: '$_id.firstcareprovideruid',
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            CareproviderEN: '$_id.CareproviderEN',
                            CareproviderTH: '$_id.CareproviderTH',
                            uom: '$_id.uom',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { careprovideruid: 1, CareproviderEN: 1, billinggroupCode: 1, billingsubgroupCode: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon424 error:', error);
            }
            return result;
        });
    }
    findRTCommon425(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let printbydate1 = { $match: {} };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                try {
                    if (req.printbydate == 'true') {
                        printbydate1 = {
                            $match: {
                                'patientchargecodes.chargecodes.chargedate': {
                                    $gte: new Date(req.fromdate),
                                    $lte: new Date(req.todate)
                                },
                            }
                        };
                    }
                }
                catch (res) { }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    { $addFields: { 'firstdepartment': { $arrayElemAt: ['$visitjourneys.departmentuid', 0] } } },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    printbydate1,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "departments", localField: "patientchargecodes.chargecodes.departmentuid", foreignField: "_id", as: "departments1" } },
                    { $unwind: { path: "$departments1", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientorders1" } },
                    { $lookup: { from: "patientorders", localField: "patientorders1.patientorderitems.parentorderuid", foreignField: "_id", as: "patientorders2" } },
                    { $lookup: { from: "departments", localField: "patientorders2.orderdepartmentuid", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientpackages", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientpackages1" } },
                    { $unwind: { path: "$patientpackages1", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "patientpackages1.userdepartmentuid", foreignField: "_id", as: "departments2" } },
                    { $unwind: { path: "$departments2", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientpackages", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientpackages1" } },
                    { $unwind: { path: "$patientpackages1", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'postaudits': { $arrayElemAt: ['$patients.patientdemochanges.postaudit', -1] } } },
                    { $addFields: { sLocationF: { $ifNull: [{ $indexOfBytes: ["$postaudits", '"firstname'] }, 0] } } },
                    { $addFields: { eLocationF: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sLocationF'] }, 0] } } },
                    { $addFields: { FirstName: { $substr: ["$postaudits", { $add: ['$sLocationF', 13] }, { $subtract: [{ $subtract: ['$eLocationF', '$sLocationF'] }, 14] }] } } },
                    { $addFields: { sLocationL: { $ifNull: [{ $indexOfBytes: ["$postaudits", '"lastname'] }, 0] } } },
                    { $addFields: { eLocationL: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sLocationL'] }, 0] } } },
                    { $addFields: { LastName: { $substr: ["$postaudits", { $add: ['$sLocationL', 12] }, { $subtract: [{ $subtract: ['$eLocationL', '$sLocationL'] }, 13] }] } } },
                    { $addFields: { sposF: { $ifNull: [{ $indexOfBytes: ["$postaudits", "localfirstname"] }, 0] } } },
                    { $addFields: { eposF: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sposF'] }, 0] } } },
                    { $addFields: { LocalFirstName: { $substr: ["$postaudits", { $add: ['$sposF', 17] }, { $subtract: [{ $subtract: ['$eposF', '$sposF'] }, 18] }] } } },
                    { $addFields: { sposL: { $ifNull: [{ $indexOfBytes: ["$postaudits", "locallastname"] }, 0] } } },
                    { $addFields: { eposL: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sposL'] }, 0] } } },
                    { $addFields: { LocalLastName: { $substr: ["$postaudits", { $add: ['$sposL', 16] }, { $subtract: [{ $subtract: ['$eposL', '$sposL'] }, 17] }] } } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ',
                                                    { $ifNull: ['$FirstName', ""] }, ' ',
                                                    { $ifNull: [{ $ifNull: ['$LastName', ""] }, ""] }]
                                            }, '-']
                                    },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ',
                                                    { $ifNull: ['$LocalFirstName', ""] }, ' ',
                                                    { $ifNull: [{ $ifNull: ['$LocalLastName', ""] }, ""] }]
                                            }, '-']
                                    },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: [{ $ifNull: [{ $ifNull: ["$departments.name", "$departments1.name"] }, "$departments2.name"] }, "-"] },
                            Departmentuid: { $ifNull: [{ $ifNull: [{ $ifNull: ["$departments._id", "$departments1._id"] }, "$departments2._id"] }, "-"] },
                            seqDepartment: '$firstdepartment',
                            Room: '',
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$patientpackages.packagename", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $cond: { if: { $eq: [{ $ifNull: [req.payoragreement, ''] }, ''] }, then: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] }, else: { $ifNull: ['$patientchargecodes.chargecodes.orgquantity', '-'] } } },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Departmentuid: '$Departmentuid',
                                seqDepartment: '$seqDepartment',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Departmentuid: '$_id.Departmentuid',
                            seqDepartment: { $cond: { if: { $eq: ['$_id.seqDepartment', '$_id.Departmentuid'] }, then: "A", else: "B" } },
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 }
                        }
                    },
                    {
                        $sort: { seqDepartment: 1, billinggroupCode: 1, billingsubgroupCode: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon425 error:', error);
            }
            return result;
        });
    }
    findRTCommon426(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = {
                    $match: {
                        'isBill': 'billed'
                    }
                };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.chargecodes.careprovideruid",
                            foreignField: "_id",
                            as: "users2"
                        }
                    },
                    {
                        $unwind: { path: "$users2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: ["$departments.name", "-"] },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: { $ifNull: ['$orderitems.name', '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            CareproviderEN: { $ifNull: ['$users2.printname', '-'] },
                            CareproviderTH: { $ifNull: ['$users2.description', '-'] },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                CareproviderEN: '$CareproviderEN',
                                CareproviderTH: '$CareproviderTH',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            CareproviderEN: '$_id.CareproviderEN',
                            CareproviderTH: '$_id.CareproviderTH',
                            uom: '$_id.uom',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { Department: 1, CareproviderEN: 1, CareproviderTH: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon426 error:', error);
            }
            return result;
        });
    }
    findRTCommon427(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = {
                    $match: {
                        'isBill': 'billed'
                    }
                };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: ["$departments.name", "-"] },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: { $ifNull: ['$orderitems.name', '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            los: '$_id.los',
                            itemnameTH: '$_id.itemnameTH',
                            datefromto: '$_id.datefromto',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { Department: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon427 error:', error);
            }
            return result;
        });
    }
    findRTCommon428(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let fromdate = dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate));
                let todate = dateutils_1.default.convertUTCtoGMT(new Date(req.todate));
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            createdat: {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(todate))
                            },
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: 'patients',
                            localField: 'patientuid',
                            foreignField: '_id',
                            as: 'patients'
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: 'patients.titleuid',
                            foreignField: '_id',
                            as: 'referencevalues'
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'users',
                            localField: 'visitcareproviders.careprovideruid',
                            foreignField: '_id',
                            as: 'users'
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: 'visitstatusuid',
                            foreignField: '_id',
                            as: 'referencevalues2'
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientpackages",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientpackages"
                        }
                    },
                    {
                        $unwind: "$patientpackages"
                    },
                    {
                        $match: {
                            'visitid': { $regex: /^I/ }
                        }
                    },
                    {
                        $project: {
                            HN: '$patients.mrn',
                            Name: {
                                $concat: [{ $ifNull: ['$referencevalues.valuedescription', ""] }, { $ifNull: [{ $ifNull: ['$patients.firstname', ""] }, ""] }, ' ',
                                    {
                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                    },
                                    { $ifNull: [{ $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }, ""] }]
                            },
                            EN: '$visitid',
                            AdmitDate: '$startdate',
                            DischargeDate: '$medicaldischargedate',
                            wardname: '$wards.name',
                            bedname: '$beds.name',
                            careProvider: {
                                $ifNull: [
                                    {
                                        $concat: [{ $ifNull: ['$users.name', ''] }, ' ', { $ifNull: ['$users.lastname', ''] }]
                                    },
                                    "-"
                                ]
                            },
                            Status: '$referencevalues2.valuedescription',
                            FixPrice: '$patientpackages.packagename'
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            HN: { $ifNull: ['$HN', '-'] },
                            Name: { $ifNull: ['$Name', '-'] },
                            EN: { $ifNull: ['$EN', '-'] },
                            year: { $dateToString: { format: " %Y", date: '$AdmitDate', timezone: "+07:00", onNull: "" } },
                            month: { $toInt: { $dateToString: { format: "%m", date: '$AdmitDate', timezone: "+07:00", onNull: 0 } } },
                            date: { $dateToString: { format: "%d ", date: '$AdmitDate', timezone: "+07:00", onNull: "" } },
                            year2: { $dateToString: { format: " %Y", date: '$DischargeDate', timezone: "+07:00", onNull: "" } },
                            month2: { $toInt: { $dateToString: { format: "%m", date: '$DischargeDate', timezone: "+07:00", onNull: 0 } } },
                            date2: { $dateToString: { format: "%d ", date: '$DischargeDate', timezone: "+07:00", onNull: "" } },
                            Ward: { $ifNull: ['$wardname', '-'] },
                            Room: { $ifNull: ['$bedname', '-'] },
                            CareProvider: { $ifNull: ['$careProvider', '-'] },
                            Status: { $ifNull: ['$Status', '-'] },
                            FixPrice: { $ifNull: ['$FixPrice', "-"] }
                        }
                    },
                    {
                        $addFields: {
                            month: {
                                $let: {
                                    vars: {
                                        monthsInString: ['-', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month']
                                    }
                                }
                            },
                            month2: {
                                $let: {
                                    vars: {
                                        monthsInString: ['-', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month2']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            fromdate: dateutils_1.default.convertISOtoDatetimeSlash(fromdate),
                            todate: dateutils_1.default.convertISOtoDatetimeSlash(todate),
                            user: _user.name,
                            HN: '$HN',
                            Name: '$Name',
                            EN: '$EN',
                            AdmitDate: { $concat: ['$date', '$month', '$year'] },
                            DischargeDate: { $concat: ['$date2', '$month2', '$year2'] },
                            Ward: '$Ward',
                            Room: '$Room',
                            CareProvider: '$CareProvider',
                            Status: '$Status',
                            FixPrice: '$FixPrice',
                        }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon428 error:', error);
            }
            return result;
        });
    }
    findRTCommon429(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let incomesource = { $match: {} };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                try {
                    if (req.incomesource != '' && req.incomesource != null) {
                        incomesource = {
                            $match: {
                                'referencevalues2._id': new mongoose_1.Types.ObjectId(req.incomesource)
                            }
                        };
                    }
                }
                catch (res) {
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "orderitems.incomesourceuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    incomesource,
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            incomesource: { $ifNull: ['$referencevalues2.valuedescription', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: { $ifNull: ['$orderitems.name', '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                incomesource: '$incomesource',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            incomesource: '$_id.incomesource',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            los: '$_id.los',
                            itemnameTH: '$_id.itemnameTH',
                            datefromto: '$_id.datefromto',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { incomesource: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon429 error:', error);
            }
            return result;
        });
    }
    findRTCommon430(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisit = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            'medicaldischargedate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid), 'statusflag': "A"
                        }
                    },
                    { $unwind: { path: "$visitjourneys", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "visitjourneys.statusuid", foreignField: "_id", as: "visitstatuss" } },
                    { $unwind: { path: "$visitstatuss", preserveNullAndEmptyArrays: true } },
                    { $match: { "$or": [{ "visitstatuss.valuedescription": { $eq: 'Billing Inprogress' } }, { "visitstatuss.valuedescription": { $eq: "Financial Discharge" } }] } },
                    { $addFields: { BillingInprogress: '$visitjourneys.modifiedat' } },
                    { $addFields: { BillingInprogress: { $cond: { if: { $eq: ['$visitstatuss.valuedescription', 'Billing Inprogress'] }, then: '$visitjourneys.modifiedat', else: "" } } } },
                    { $addFields: { GenarateBill: { $cond: { if: { $eq: ['$visitstatuss.valuedescription', 'Financial Discharge'] }, then: '$visitjourneys.modifiedat', else: "" } } } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientbills", localField: "_id", foreignField: "patientvisituid", as: "patientbills" } },
                    { $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            'patientbills.billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'patientbills.orguid': new mongoose_1.Types.ObjectId(req.organisationuid), 'patientbills.statusflag': "A"
                        }
                    },
                    { $addFields: { payoruid: "$visitpayors.payoruid" } },
                    { $lookup: { from: "payors", localField: "payoruid", foreignField: "_id", as: "payors" } },
                    { $addFields: { payorname: "$payors.name" } },
                    {
                        $group: {
                            _id: {
                                mrn: '$patients.mrn',
                                PatientName: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                visitid: '$visitid',
                                startdate: '$startdate',
                                medicaldischargedate: "$medicaldischargedate",
                                payor: "$payorname",
                            },
                            max_BillingInprogress: { $max: '$BillingInprogress' },
                            max_GenarateBill: { $max: '$GenarateBill' },
                            min_billdate: { $min: '$patientbills.billdate' }
                        }
                    },
                    { $match: { 'max_GenarateBill': { $ne: "" }, 'max_BillingInprogress': { $ne: "" } } },
                    {
                        $project: {
                            HN: "$_id.mrn",
                            PatientName: '$_id.PatientName',
                            EN: '$_id.visitid',
                            payor: '$_id.payor',
                            Start_Date: { $dateToString: { format: "%d/%m/%Y", date: "$_id.startdate", timezone: "+07:00", onNull: "-" } },
                            MedicalDischarge: { $dateToString: { format: "%H:%M", date: "$_id.medicaldischargedate", timezone: "+07:00", onNull: "" } },
                            DischargeDate: { $dateToString: { format: "%d/%m/%Y", date: "$_id.medicaldischargedate", timezone: "+07:00", onNull: "" } },
                            BillingInprogress: { $dateToString: { format: "%H:%M", date: "$max_BillingInprogress", timezone: "+07:00", onNull: "" } },
                            GenarateBill: { $dateToString: { format: "%H:%M", date: "$min_billdate", timezone: "+07:00", onNull: "" } },
                            DurationMin: { $ifNull: [{ $ceil: { $divide: [{ $subtract: ["$min_billdate", "$max_BillingInprogress"] }, 1000 * 60] } }, ""] },
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    },
                    { $match: { DurationMin: { $gt: 0 } } }
                ])
                    .exec();
                result = resultpatientvisit;
            }
            catch (error) {
                this.logger.error('findRTCommon430 error:', error);
            }
            return result;
        });
    }
    findRTCommon432(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDeposits = yield this.depositsModel.aggregate([
                    {
                        $limit: 10000
                    },
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "patientuid": new mongoose_1.Types.ObjectId(req.patientuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "deposits",
                            localField: "_id",
                            foreignField: "_id",
                            as: "deposits"
                        }
                    },
                    {
                        $unwind: { path: "$deposits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            "patientvisits.visitid": { $not: /I/ }
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            "patients.mrn": req.ReceiptNumber
                        }
                    },
                    {
                        $unwind: "$patients.contact"
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "deposits.useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                'datetime': '$deposits.depositdate',
                                'HN': '$patients.mrn',
                                'patientname': { $concat: [{ $ifNull: ['$patients.firstname', ""] }, ' ', '$patients.middlename', ' ', { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }] },
                                'titleuid': '$patients.titleuid',
                                'billnumber': '$deposits.sequencenumber',
                                'paidamount': '$deposits.amount',
                                'cashier': '$users.name',
                                'CashierTH': '$users.description',
                                'contact': '$patient.contact.mobilephone'
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "results.titleuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            _id: 0,
                            'datetime': { $ifNull: ['$results.datetime', '-'] },
                            'ID': { $ifNull: ['$results.HN', '-'] },
                            'fullname': { $ifNull: [{ $concat: ['$referencevalues.valuedescription', '$results.patientname'] }, '-'] },
                            'Deposit': { $ifNull: ['$results.billnumber', '-'] },
                            'Credit': { $ifNull: ['$results.paidamount', '-'] },
                            CashierTH: { $ifNull: ['$results.CashierTH', '-'] },
                            CashierEN: { $ifNull: ['$results.cashier', '-'] },
                            'contact': { $ifNull: ['$result.scontact', '-'] },
                            user: _user.name
                        }
                    }
                ]).limit(1).exec();
                for (let entry of resultDeposits) {
                    entry.datetime = dateutils_1.default.convertISOtoDatetimeSlashPlusHourMin(dateutils_1.default.convertUTCtoGMT(new Date(entry.datetime)));
                }
                result = resultDeposits;
            }
            catch (error) {
                this.logger.error('findRTCommon432 error:', error);
            }
            return result;
        });
    }
    findRTCommon433(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDeposits = yield this.depositsModel.aggregate([
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "patientuid": new mongoose_1.Types.ObjectId(req.patientuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "deposits",
                            localField: "_id",
                            foreignField: "_id",
                            as: "deposits"
                        }
                    },
                    {
                        $unwind: { path: "$deposits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            "deposits.sequencenumber": req.DocNo,
                        }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            "patientvisits.visitid": { $regex: /O/ }
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: "$patients.contact"
                    },
                    {
                        $match: {
                            "patients.mrn": req.ReceiptNumber
                        }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "deposits.useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            "results": {
                                'datetime': '$deposits.depositdate',
                                'HN': '$patients.mrn',
                                'patientname': { $concat: [{ $ifNull: ['$patients.firstname', ""] }, ' ', '$patients.middlename', ' ', { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }] },
                                'contact': '$patients.contact.mobliephone',
                                'titleuid': '$patients.titleuid',
                                'billnumber': '$deposits.sequencenumber',
                                'paidamount': '$deposits.amount',
                                'cashier': '$users.name',
                                'cashierEN': 'users.description'
                            }
                        }
                    },
                    {
                        $unwind: "$results"
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "results.titleuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            _id: 0,
                            'datetime': { $dateToString: { format: "%Y/%m/%d %H:%M", date: '$results.datetime', timezone: "+07:00", onNull: "-" } },
                            'ID': { $ifNull: ['$results.HN', '-'] },
                            'contact': { $ifNull: ['$results.contact', '-'] },
                            'fullname': { $ifNull: [{ $concat: ['$referencevalues.valuedescription', '$results.patientname'] }, '-'] },
                            'Deposit': { $ifNull: ['$results.billnumber', '-'] },
                            'Credit': { $ifNull: ['$results.paidamount', '-'] },
                            'cashierTH': { $ifNull: ['$results.cashier', '-'] },
                            'cashierEN': { $ifNull: ['$results.cashierEN', '-'] },
                            user: _user.name
                        }
                    }
                ]).exec();
                let sum = 0;
                for (let x of resultDeposits) {
                    sum += x.Credit;
                }
                let temp = new Object();
                temp = resultDeposits[resultDeposits.length - 1];
                temp['Total'] = utils_1.default.numberToWordSatang(sum);
                resultDeposits.pop();
                resultDeposits.push(temp);
                result = resultDeposits;
            }
            catch (error) {
                this.logger.error('findRTCommon433 error:', error);
            }
            return result;
        });
    }
    findRTCommon435(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            try {
                let storeuid = { $match: {} };
                if (req.storeuid != '') {
                    storeuid = {
                        $match: {
                            '_id': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    };
                }
                const resultInventorystores = yield this.inventorystoresModel.aggregate([
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    storeuid,
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "_id",
                            foreignField: "handlingstores.storeuid",
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemmasters.baseuomuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemmasters.purchasinguomuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemmasters.productcategoryuid",
                            foreignField: "_id",
                            as: "referencevalues3"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues3", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "itemmasters.stockauditgroup",
                            foreignField: "_id",
                            as: "referencevalues4"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues4", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: '$itemmasters.handlingstores'
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$_id', '$itemmasters.handlingstores.storeuid'] },
                                ]
                            }
                        }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    { $addFields: { p_index: { $indexOfArray: ['$itemmasters.reorderdetails.storeuid', '$_id'] } } },
                    { $addFields: { reorderdetailarray: { $arrayElemAt: ["$itemmasters.reorderdetails", { $cond: { if: { $eq: ["$p_index", -1] }, then: null, else: "$p_index" } }] }, } },
                    { $addFields: { minstocklevel: "$reorderdetailarray.minstocklevel" } },
                    { $addFields: { maxstocklevel: "$reorderdetailarray.maxstocklevel" } },
                    { $addFields: { reorderlevel: "$reorderdetailarray.reorderlevel" } },
                    { $addFields: { reorderquantity: "$reorderdetailarray.reorderquantity" } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            'storetitle': { $cond: { if: { $eq: [req.storeuid, ''] }, then: '', else: { $ifNull: ["$description", '-'] } } },
                            "description": { $ifNull: ["$description", '-'] },
                            "code": { $ifNull: ["$itemmasters.code", '-'] },
                            "name": { $ifNull: ["$itemmasters.name", '-'] },
                            "UOM": { $ifNull: ["$referencevalues.valuedescription", '-'] },
                            "PurchaseUOM": { $ifNull: ["$referencevalues2.valuedescription", '-'] },
                            "MainStore": { $ifNull: ["$code", '-'] },
                            "StkCategory": { $ifNull: ["$referencevalues3.valuedescription", '-'] },
                            "StkTake": { $ifNull: ["$referencevalues4.valuedescription", '-'] },
                            "BatchReq": { $cond: { if: { $eq: ["$itemmasters.isbatchidmandatory", true] }, then: "Required", else: "Optional" } },
                            "ExpReq": { $cond: { if: { $eq: ["$itemmasters.isexpirydatemandatory", true] }, then: "Required", else: "Optional" } },
                            "ActiveFrom": { $dateToString: { format: "%d/%m/%Y", date: "$itemmasters.activefrom", timezone: "+07:00", onNull: "-" } },
                            "ActiveTo": { $dateToString: { format: "%d/%m/%Y", date: { $ifNull: ["$itemmasters.activeto", null] }, timezone: "+07:00", onNull: "-" } },
                            "minstocklevel": { $ifNull: ["$minstocklevel", null] },
                            "maxstocklevel": { $ifNull: ["$maxstocklevel", null] },
                            "reorderlevel": { $ifNull: ["$reorderlevel", null] },
                            "reorderquantity": { $ifNull: ["$reorderquantity", null] },
                            "user": _user.name,
                        }
                    },
                    {
                        $sort: { description: 1 }
                    }
                ]).exec();
                result = resultInventorystores;
            }
            catch (error) {
                this.logger.error('findRTCommon435 error:', error);
            }
            return result;
        });
    }
    findRTCommon434(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            try {
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "rejectclaims",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "rejectclaims"
                        }
                    },
                    {
                        $unwind: { path: "$rejectclaims", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'rejectclaims.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'rejectclaims.chargecodes.netamount': {
                                $gt: 0
                            },
                            'rejectclaims.iscancelled': null,
                            'rejectclaims.chargecodes.statusflag': 'A'
                        }
                    },
                    {
                        $unwind: "$rejectclaims.chargecodes"
                    },
                    {
                        $match: {
                            'rejectclaims.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'rejectclaims.chargecodes.netamount': {
                                $gt: 0
                            },
                            'rejectclaims.chargecodes.statusflag': 'A'
                        }
                    },
                    {
                        $unwind: '$visitcareproviders'
                    },
                    {
                        $match: {
                            'visitcareproviders.isprimarycareprovider': true
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "visitcareproviders.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "rejectclaims.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "rejectclaims.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "rejectclaims.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "rejectclaims.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "rejectclaims.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: ["$departments.name", "-"] },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: { $ifNull: ['$orderitems.name', '-'] },
                            Quantity: { $ifNull: ['$rejectclaims.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$rejectclaims.chargecodes.netamount', '$rejectclaims.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$rejectclaims.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$rejectclaims.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $ifNull: ['$rejectclaims.chargecodes.patientbilluid', false] }, then: "unbilled", else: "billed" } },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon434 error:', error);
            }
            return result;
        });
    }
    findRTCommon717(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultOUT = yield this.patientordersModel.aggregate([
                    { $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'orderdate': { $gte: new Date(req.fromdate), $lt: new Date(req.todate) },
                        }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: 'ordersts'
                        }
                    },
                    { $unwind: '$ordersts' },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patient"
                        }
                    },
                    { $unwind: { path: "$patient", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patient.titleuid",
                            foreignField: "_id",
                            as: 'title'
                        }
                    },
                    { $unwind: '$title' },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            '_id': 0,
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            'ORDDATE': { $dateToString: { format: "%Y-%m-%d %H:%M", date: "$orderdate", timezone: "+07:00", onNull: "-" } },
                            'HN': '$patient.mrn',
                            'DOB': '$patient.dateofbirth',
                            'TITLE': '$title.valuedescription',
                            'FIRSTNAME': '$patient.firstname',
                            'LASTNAME': '$patient.lastname',
                            'ORDSTSCODE': '$ordersts.valuecode',
                            'ORDSTSDESC': "$ordersts.valuedescription",
                            'ITEMCODE': '$patientorderitems.chargecode',
                            'ITEMNAME': '$patientorderitems.orderitemname',
                            'QTY': '$patientorderitems.quantity',
                            'N1': { $cond: { if: { $eq: ["$patientorderitems.chargecode", "51142219000008"] }, then: "$patientorderitems.quantity", else: 0 } },
                            'N2': { $cond: { if: { $eq: ["$patientorderitems.chargecode", "51142205000001"] }, then: "$patientorderitems.quantity", else: 0 } },
                            'N3': { $cond: { if: { $eq: ["$patientorderitems.chargecode", "51142206000014"] }, then: "$patientorderitems.quantity", else: 0 } },
                            'N4': { $cond: { if: { $eq: ["$patientorderitems.chargecode", "51141542000003"] }, then: "$patientorderitems.quantity", else: 0 } },
                            'DOZ': '$patientorderitems.dosage',
                            'D1': { $cond: { if: { $eq: ["$patientorderitems.chargecode", "51142219000008"] }, then: "$patientorderitems.dosage", else: 0 } },
                            'D2': { $cond: { if: { $eq: ["$patientorderitems.chargecode", "51142205000001"] }, then: "$patientorderitems.dosage", else: 0 } },
                            'D3': { $cond: { if: { $eq: ["$patientorderitems.chargecode", "51142206000014"] }, then: "$patientorderitems.dosage", else: 0 } },
                            'D4': { $cond: { if: { $eq: ["$patientorderitems.chargecode", "51141542000003"] }, then: "$patientorderitems.dosage", else: 0 } },
                        }
                    },
                    {
                        $match: {
                            'ITEMCODE': { $in: ['51142219000008', '51142205000001', '51142206000014', '51141542000003'] },
                            'ORDSTSDESC': { $ne: 'Cancelled' }
                        }
                    },
                    { $sort: { ORDDATE: 1, HN: 1 } },
                ])
                    .exec();
                result = resultOUT;
            }
            catch (error) {
                this.logger.error('findRTCommon717 error:', error);
            }
            return result;
        });
    }
    findRTCommon409_billed(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let patientbill = { $match: {} };
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let allocatebydate = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.searchstring = '';
                }
                try {
                    if (req.allocatebydate === true) {
                        allocatebydate = {
                            $match: {
                                'patientchargecodes.chargecodes.chargedate': {
                                    $gte: new Date(req.fromdate),
                                    $lte: new Date(req.todate)
                                },
                            }
                        };
                    }
                }
                catch (res) {
                    req.searchstring = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    payoragreement,
                    patientbill,
                    allocatebydate,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "referencevalues1"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "patientorders",
                            localField: "patientchargecodes.chargecodes.patientorderuid",
                            foreignField: "_id",
                            as: "patientorders2"
                        }
                    },
                    {
                        $unwind: { path: "$patientorders", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            losstart: {
                                $cond: {
                                    if: { $eq: [req.allocatebydate, true] }, then: req.fromdate,
                                    else: '$patientvisit.startdate'
                                }
                            }
                        }
                    },
                    {
                        $addFields: {
                            losend: {
                                $cond: {
                                    if: { $eq: [req.allocatebydate, true] }, then: req.fromdate,
                                    else: {
                                        $cond: {
                                            if: { $ne: ['$patientvisit.medicaldischargedate', null] }, then: '$patientvisit.medicaldischargedate',
                                            else: new Date()
                                        }
                                    },
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$referencevalues1.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$referencevalues1.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: {
                                $cond: {
                                    if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.code", '-'] },
                                    else: { $ifNull: ['$orderitems.code', '-'] }
                                }
                            },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $and: [{ $eq: [req.searchstring, ''] }, { $eq: [req.searchcriteria, ''] }] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $and: [{ $eq: [req.searchstring, ''] }, { $eq: [req.searchcriteria, ''] }] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                            los: { $floor: { $divide: [{ $subtract: ['$losend', '$losstart'] }, 86400000] } },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            TEL1: { $ifNull: ['$repcfg.documentno', '-'] },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            TEL2: { $ifNull: ['$repcfg.documenttype', '-'] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                TEL1: '$TEL1',
                                TEL2: '$TEL2',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            TEL1: '$_id.TEL1',
                            TEL2: '$_id.TEL2',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            reqbilled: req.isbill
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 },
                        }
                    },
                    {
                        $sort: { billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon409_billed error:', error);
            }
            return result;
        });
    }
    findRTCommon409_billed_prov(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let patientbill = { $match: {} };
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.searchstring = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    payoragreement,
                    patientbill,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "referencevalues1"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "patientorders",
                            localField: "patientchargecodes.chargecodes.patientorderuid",
                            foreignField: "_id",
                            as: "patientorders2"
                        }
                    },
                    {
                        $unwind: { path: "$patientorders", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$referencevalues1.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$referencevalues1.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: {
                                $cond: {
                                    if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.code", '-'] },
                                    else: { $ifNull: ['$orderitems.code', '-'] }
                                }
                            },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            TEL1: { $ifNull: ['$repcfg.documentno', '-'] },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            TEL2: { $ifNull: ['$repcfg.documenttype', '-'] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                TEL1: '$TEL1',
                                TEL2: '$TEL2',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            TEL1: '$_id.TEL1',
                            TEL2: '$_id.TEL2',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            reqbilled: req.isbill
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 },
                        }
                    },
                    {
                        $sort: { billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon409_billed_prov error:', error);
            }
            return result;
        });
    }
    findRTCommon429_billed(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let allocatebydate = { $match: {} };
                let patientbill = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                try {
                    if (req.allocatebydate === true) {
                        allocatebydate = {
                            $match: {
                                'patientchargecodes.chargecodes.chargedate': {
                                    $gte: new Date(req.fromdate),
                                    $lte: new Date(req.todate)
                                },
                            }
                        };
                    }
                }
                catch (res) {
                    req.searchstring = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    payoragreement,
                    patientbill,
                    allocatebydate,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "orderitems.incomesourceuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: { $ifNull: ['$orderitems.name', '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            incomesource: { $ifNull: ['$referencevalues2.valuedescription', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                incomesource: '$incomesource',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            incomesource: '$_id.incomesource',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            reqbilled: req.isbill,
                            uom: '$_id.uom',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon429_billed error:', error);
            }
            return result;
        });
    }
    findRTCommon429_billed_prov(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let patientbill = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    payoragreement,
                    patientbill,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "orderitems.incomesourceuid",
                            foreignField: "_id",
                            as: "referencevalues2"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: { $ifNull: ['$orderitems.name', '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            incomesource: { $ifNull: ['$referencevalues2.valuedescription', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                incomesource: '$incomesource',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            incomesource: '$_id.incomesource',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            reqbilled: req.isbill,
                            uom: '$_id.uom',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon429_billed_prov error:', error);
            }
            return result;
        });
    }
    findRTCommon425_billed(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let patientbill = { $match: {} };
                let allocatebydate = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                try {
                    if (req.allocatebydate === true) {
                        allocatebydate = {
                            $match: {
                                'patientchargecodes.chargecodes.chargedate': {
                                    $gte: new Date(req.fromdate),
                                    $lte: new Date(req.todate)
                                },
                            }
                        };
                    }
                }
                catch (res) {
                    req.searchstring = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    { $addFields: { 'firstdepartment': { $arrayElemAt: ['$visitjourneys.departmentuid', 0] } } },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    payoragreement,
                    patientbill,
                    allocatebydate,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "departments", localField: "patientchargecodes.chargecodes.departmentuid", foreignField: "_id", as: "departments1" } },
                    { $unwind: { path: "$departments1", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientorders1" } },
                    { $lookup: { from: "patientorders", localField: "patientorders1.patientorderitems.parentorderuid", foreignField: "_id", as: "patientorders2" } },
                    { $lookup: { from: "departments", localField: "patientorders2.orderdepartmentuid", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientpackages", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientpackages1" } },
                    { $unwind: { path: "$patientpackages1", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "patientpackages1.userdepartmentuid", foreignField: "_id", as: "departments2" } },
                    { $unwind: { path: "$departments2", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientpackages", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientpackages1" } },
                    { $unwind: { path: "$patientpackages1", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'postaudits': { $arrayElemAt: ['$patients.patientdemochanges.postaudit', -1] } } },
                    { $addFields: { sLocationF: { $ifNull: [{ $indexOfBytes: ["$postaudits", '"firstname'] }, 0] } } },
                    { $addFields: { eLocationF: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sLocationF'] }, 0] } } },
                    { $addFields: { FirstName: { $substr: ["$postaudits", { $add: ['$sLocationF', 13] }, { $subtract: [{ $subtract: ['$eLocationF', '$sLocationF'] }, 14] }] } } },
                    { $addFields: { sLocationL: { $ifNull: [{ $indexOfBytes: ["$postaudits", '"lastname'] }, 0] } } },
                    { $addFields: { eLocationL: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sLocationL'] }, 0] } } },
                    { $addFields: { LastName: { $substr: ["$postaudits", { $add: ['$sLocationL', 12] }, { $subtract: [{ $subtract: ['$eLocationL', '$sLocationL'] }, 13] }] } } },
                    { $addFields: { sposF: { $ifNull: [{ $indexOfBytes: ["$postaudits", "localfirstname"] }, 0] } } },
                    { $addFields: { eposF: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sposF'] }, 0] } } },
                    { $addFields: { LocalFirstName: { $substr: ["$postaudits", { $add: ['$sposF', 17] }, { $subtract: [{ $subtract: ['$eposF', '$sposF'] }, 18] }] } } },
                    { $addFields: { sposL: { $ifNull: [{ $indexOfBytes: ["$postaudits", "locallastname"] }, 0] } } },
                    { $addFields: { eposL: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sposL'] }, 0] } } },
                    { $addFields: { LocalLastName: { $substr: ["$postaudits", { $add: ['$sposL', 16] }, { $subtract: [{ $subtract: ['$eposL', '$sposL'] }, 17] }] } } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ',
                                                    { $ifNull: ['$FirstName', ""] }, ' ',
                                                    { $ifNull: [{ $ifNull: ['$LastName', ""] }, ""] }]
                                            }, '-']
                                    },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ',
                                                    { $ifNull: ['$LocalFirstName', ""] }, ' ',
                                                    { $ifNull: [{ $ifNull: ['$LocalLastName', ""] }, ""] }]
                                            }, '-']
                                    },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: [{ $ifNull: [{ $ifNull: ["$departments.name", "$departments1.name"] }, "$departments2.name"] }, "-"] },
                            Departmentuid: { $ifNull: [{ $ifNull: [{ $ifNull: ["$departments._id", "$departments1._id"] }, "$departments2._id"] }, "-"] },
                            seqDepartment: '$firstdepartment',
                            Room: '',
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$patientpackages1.packagename", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $cond: { if: { $and: [{ $eq: [{ $ifNull: [req.searchstring, ''] }, ''] }, { $eq: [{ $ifNull: [req.searchcriteria, ''] }, ''] }] }, then: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] }, else: { $ifNull: ['$patientchargecodes.chargecodes.orgquantity', '-'] } } },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                seqDepartment: '$seqDepartment',
                                Departmentuid: '$Departmentuid',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Departmentuid: '$_id.Departmentuid',
                            seqDepartment: { $cond: { if: { $eq: ['$_id.seqDepartment', '$_id.Departmentuid'] }, then: "A", else: "B" } },
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 }
                        }
                    },
                    {
                        $sort: { seqDepartment: 1, billinggroupCode: 1, billingsubgroupCode: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon425_billed error:', error);
            }
            return result;
        });
    }
    findRTCommon425_billed_prov(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let patientbill = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    payoragreement,
                    patientbill,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "departments", localField: "patientchargecodes.chargecodes.departmentuid", foreignField: "_id", as: "departments1" } },
                    { $unwind: { path: "$departments1", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientorders1" } },
                    { $lookup: { from: "patientorders", localField: "patientorders1.patientorderitems.parentorderuid", foreignField: "_id", as: "patientorders2" } },
                    { $lookup: { from: "departments", localField: "patientorders2.orderdepartmentuid", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: [{ $ifNull: ["$departments.name", "$departments1.name"] }, "-"] },
                            Room: '',
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { Department: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon425_billed_prov error:', error);
            }
            return result;
        });
    }
    findRTCommon424_billed(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let patientbill = { $match: {} };
                let allocatebydate = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                try {
                    if (req.allocatebydate === true) {
                        allocatebydate = {
                            $match: {
                                'patientchargecodes.chargecodes.chargedate': {
                                    $gte: new Date(req.fromdate),
                                    $lte: new Date(req.todate)
                                },
                            }
                        };
                    }
                }
                catch (res) {
                    req.searchstring = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    { $addFields: { 'firstcareprovideruid': { $arrayElemAt: ['$visitcareproviders.careprovideruid', 0] } } },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    { $lookup: { from: "users", localField: "patientchargecodes.chargecodes.careprovideruid", foreignField: "_id", as: "doctor_last" } },
                    {
                        $addFields: {
                            "doctor_last": { $arrayElemAt: [{ $filter: { input: "$doctor_last", as: "doc_last", cond: { $and: [{ $eq: ['$$doc_last.iscareprovider', true] }] } } }, -1] }
                        }
                    },
                    {
                        $addFields: {
                            "doctor_last_name_EN": '$doctor_last.printname'
                        }
                    },
                    {
                        $addFields: {
                            "doctor_last_name_TH": '$doctor_last.description'
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    payoragreement,
                    patientbill,
                    allocatebydate,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "users", localField: "patientchargecodes.chargecodes.careprovideruid", foreignField: "_id", as: "doctor1" } },
                    { $unwind: { path: "$doctor1", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientorders1" } },
                    { $lookup: { from: "patientorders", localField: "patientorders1.patientorderitems.parentorderuid", foreignField: "_id", as: "patientorders2" } },
                    { $lookup: { from: "users", localField: "patientorders2.patientorderitems.careprovideruid", foreignField: "_id", as: "users2" } },
                    { $unwind: { path: "$users2", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientpackages", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientpackages1" } },
                    { $unwind: { path: "$patientpackages1", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "patientpackages1.userdepartmentuid", foreignField: "_id", as: "departments2" } },
                    { $unwind: { path: "$departments2", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientpackages", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientpackages1" } },
                    { $unwind: { path: "$patientpackages1", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            visitcareproviders_lookup_first: { $min: "$visitcareproviders.careprovideruid" }
                        }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "visitcareproviders_lookup_first",
                            foreignField: "_id",
                            as: "users_first"
                        }
                    },
                    {
                        $unwind: { path: "$users_first", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            CareproviderEN: { $ifNull: [{ $ifNull: ["$doctor1.printname", '$users_first.printname'] }, '-'] }
                        }
                    },
                    {
                        $addFields: {
                            CareproviderTH: { $ifNull: [{ $ifNull: ["$doctor1.description", '$users_first.description'] }, '-'] }
                        }
                    },
                    {
                        $addFields: {
                            iscareprovider_doc: { $ifNull: [{ $ifNull: ["$doctor1.iscareprovider", '$users_first.iscareprovider'] }, '-'] }
                        }
                    },
                    { $addFields: { 'postaudits': { $arrayElemAt: ['$patients.patientdemochanges.postaudit', -1] } } },
                    { $addFields: { sLocationF: { $ifNull: [{ $indexOfBytes: ["$postaudits", '"firstname'] }, 0] } } },
                    { $addFields: { eLocationF: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sLocationF'] }, 0] } } },
                    { $addFields: { FirstName: { $substr: ["$postaudits", { $add: ['$sLocationF', 13] }, { $subtract: [{ $subtract: ['$eLocationF', '$sLocationF'] }, 14] }] } } },
                    { $addFields: { sLocationL: { $ifNull: [{ $indexOfBytes: ["$postaudits", '"lastname'] }, 0] } } },
                    { $addFields: { eLocationL: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sLocationL'] }, 0] } } },
                    { $addFields: { LastName: { $substr: ["$postaudits", { $add: ['$sLocationL', 12] }, { $subtract: [{ $subtract: ['$eLocationL', '$sLocationL'] }, 13] }] } } },
                    { $addFields: { sposF: { $ifNull: [{ $indexOfBytes: ["$postaudits", "localfirstname"] }, 0] } } },
                    { $addFields: { eposF: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sposF'] }, 0] } } },
                    { $addFields: { LocalFirstName: { $substr: ["$postaudits", { $add: ['$sposF', 17] }, { $subtract: [{ $subtract: ['$eposF', '$sposF'] }, 18] }] } } },
                    { $addFields: { sposL: { $ifNull: [{ $indexOfBytes: ["$postaudits", "locallastname"] }, 0] } } },
                    { $addFields: { eposL: { $ifNull: [{ $indexOfBytes: ["$postaudits", ",", '$sposL'] }, 0] } } },
                    { $addFields: { LocalLastName: { $substr: ["$postaudits", { $add: ['$sposL', 16] }, { $subtract: [{ $subtract: ['$eposL', '$sposL'] }, 17] }] } } },
                    {
                        $project: {
                            careprovideruid: "$doctor1._id",
                            firstcareprovideruid: "$firstcareprovideruid",
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ',
                                                    { $ifNull: ['$FirstName', ""] }, ' ',
                                                    { $ifNull: [{ $ifNull: ['$LastName', ""] }, ""] }]
                                            }, '-']
                                    },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ',
                                                    { $ifNull: ['$LocalFirstName', ""] }, ' ',
                                                    { $ifNull: [{ $ifNull: ['$LocalLastName', ""] }, ""] }]
                                            }, '-']
                                    },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$patientpackages1.packagename", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $cond: { if: { $and: [{ $eq: [{ $ifNull: [req.searchstring, ''] }, ''] }, { $eq: [{ $ifNull: [req.searchcriteria, ''] }, ''] }] }, then: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] }, else: { $ifNull: ['$patientchargecodes.chargecodes.orgquantity', '-'] } } },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            CareproviderEN: { $cond: { if: { $eq: ['$iscareprovider_doc', true] }, then: "$CareproviderEN", else: { $ifNull: ['$doctor_last_name_EN', '-'] } } },
                            CareproviderTH: { $cond: { if: { $eq: ['$iscareprovider_doc', true] }, then: "$CareproviderTH", else: { $ifNull: ['$doctor_last_name_TH', '-'] } } },
                            Department: '',
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                careprovideruid: '$careprovideruid',
                                firstcareprovideruid: '$firstcareprovideruid',
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                CareproviderEN: '$CareproviderEN',
                                CareproviderTH: '$CareproviderTH',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            careprovideruid: { $cond: { if: { $eq: ['$_id.careprovideruid', '$_id.firstcareprovideruid'] }, then: "A", else: "B" } },
                            firstcareprovideruid: '$_id.firstcareprovideruid',
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            CareproviderEN: { $ifNull: ['$_id.CareproviderEN', '-'] },
                            CareproviderTH: { $ifNull: ['$_id.CareproviderTH', '-'] },
                            uom: '$_id.uom',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { CareproviderEN: 1, billinggroupCode: 1, billingsubgroupCode: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon424_billed error:', error);
            }
            return result;
        });
    }
    findRTCommon424_billed_prov(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let patientbill = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    payoragreement,
                    patientbill,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "users", localField: "patientchargecodes.chargecodes.careprovideruid", foreignField: "_id", as: "doctor1" } },
                    { $unwind: { path: "$doctor1", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "patientorders1" } },
                    { $lookup: { from: "patientorders", localField: "patientorders1.patientorderitems.parentorderuid", foreignField: "_id", as: "patientorders2" } },
                    { $lookup: { from: "users", localField: "patientorders2.patientorderitems.careprovideruid", foreignField: "_id", as: "users2" } },
                    { $unwind: { path: "$users2", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: { $ifNull: ['$orderitems.code', '-'] },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            CareproviderEN: { $cond: { if: { $eq: [{ $ifNull: ["$users2._id", "-"] }, "-"] }, then: "$doctor1.printname", else: "$users2.printname" } },
                            CareproviderTH: { $cond: { if: { $eq: [{ $ifNull: ["$users2._id", "-"] }, "-"] }, then: "$doctor1.description", else: "$users2.description" } },
                            Department: '',
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                CareproviderEN: '$CareproviderEN',
                                CareproviderTH: '$CareproviderTH',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            CareproviderEN: '$_id.CareproviderEN',
                            CareproviderTH: '$_id.CareproviderTH',
                            uom: '$_id.uom',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { CareproviderEN: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon424_billed_prov error:', error);
            }
            return result;
        });
    }
    findRTCommon286_billed(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let fromdttm = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate)));
                let todttm = dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)));
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let billingSubGroupUidsString = req.billingSubGroupUids === null || req.billingSubGroupUids === undefined || req.billingSubGroupUids === '' ? null : req.billingSubGroupUids.split(",");
                let billingGroupUidsString = req.billingGroupUids === null || req.billingGroupUids === undefined || req.billingGroupUids === '' ? null : req.billingGroupUids.split(",");
                let billingSubGroupUids = [];
                if (billingSubGroupUidsString != null) {
                    billingSubGroupUidsString.forEach(function (s) {
                        billingSubGroupUids.push(new mongoose_1.Types.ObjectId(s));
                    });
                }
                let billingGroupUids = [];
                if (billingGroupUidsString != null) {
                    billingGroupUidsString.forEach(function (s) {
                        billingGroupUids.push(new mongoose_1.Types.ObjectId(s));
                    });
                }
                let group = { $match: {} };
                let supGroup = { $match: {} };
                if (billingSubGroupUids[0] != undefined) {
                    supGroup = {
                        $match: {
                            "billinggroups2._id": {
                                $in: billingSubGroupUids
                            }
                        }
                    };
                }
                else {
                    if (billingGroupUids[0] != undefined) {
                        group = {
                            $match: {
                                "billinggroups1._id": {
                                    $in: billingGroupUids
                                }
                            }
                        };
                    }
                }
                const resultPatientbills = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'patientvisituid': new mongoose_1.Types.ObjectId(req.patientvisituid),
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': 'A'
                        }
                    },
                    {
                        $unwind: "$patientorderitems"
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: "referencevalues_status"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues_status", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $and: [
                                {
                                    "referencevalues_status.valuedescription": { $ne: 'Cancelled' }
                                },
                                {
                                    "referencevalues_status.valuedescription": { $ne: 'Raised' }
                                }
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    { $unwind: { path: "$patientvisits.bedoccupancy", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            'patientvisits.bedoccupancy.isactive': true,
                            "patientvisits.bedoccupancy.islodgerbed": { "$ne": true }
                        }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "patientvisits.bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "patientvisits.bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tariffs",
                            localField: "patientorderitems.tariffuid",
                            foreignField: "_id",
                            as: "tariffs"
                        }
                    },
                    {
                        $unwind: { path: "$tariffs", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "tariffs.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    group,
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "tariffs.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    supGroup,
                    {
                        $lookup: {
                            from: "users",
                            localField: "orderinguseruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            fromdttm: fromdttm,
                            todttm: todttm,
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            ward: { $ifNull: ['$wards.name', '-'] },
                            bed: { $ifNull: ['$beds.name', '-'] },
                            admissiondate: { $dateToString: { format: "%d/%m/%Y", date: "$patientvisits.startdate", timezone: "+07:00", onNull: "-" } },
                            EN: { $ifNull: ['$patientvisits.visitid', '-'] },
                            fullname: {
                                $ifNull: [{
                                        $concat: [{ $ifNull: ['$nametitle.valuedescription', ''] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                            },
                                            { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                    }, '-']
                            },
                            groupDescription: { $ifNull: ['$billinggroups1.description', '-'] },
                            subGroupDescription: { $ifNull: ['$billinggroups2.description', '-'] },
                            description: { $ifNull: ['$patientorderitems.orderitemname', '-'] },
                            billdate: { $dateToString: { format: "%d/%m/%Y", date: "$orderdate", timezone: "+07:00", onNull: "-" } },
                            quantity: { $ifNull: ['$patientorderitems.quantity', '-'] },
                            unitprice: { $ifNull: ['$patientorderitems.unitprice', '-'] },
                            unitcost: { $ifNull: [{ $multiply: ["$patientorderitems.quantity", "$patientorderitems.unitprice"] }, '-'] },
                            payordiscount: { $ifNull: ['$patientorderitems.payordiscount', '0'] },
                            netamount: { $ifNull: ['$patientorderitems.totalprice', '-'] },
                            CashierEN: { $ifNull: ['$users.printnname', '-'] },
                            CashierTH: { $ifNull: ['$users.description', '-'] },
                            groupDescriptionEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            subGroupDescriptionEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            user: _user.name
                        }
                    },
                    { $sort: { groupDescription: 1, subGroupDescription: 1, billdate: 1 } }
                ])
                    .exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon286_billed error:', error);
            }
            return result;
        });
    }
    findRTCommon423_billed(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let fromdate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(new Date(req.fromdate));
                let todate = dateutils_1.default.convertISOtoMonthTextUsingSpaceDatetime(new Date(req.todate));
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                const resultPatientorders = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                        }
                    },
                    {
                        $unwind: "$patientchargecodes.chargecodes"
                    },
                    payoragreement,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        }
                    },
                    {
                        $addFields: {
                            lastdepartmentuid: { $arrayElemAt: ["$visitcareproviders.departmentuid", -1] }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "lastdepartmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: ["$departments.name", "-"] },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemname: { $ifNull: ["$patientchargecodes.chargecodes.orderitemname", '-'] },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billingGroupCodeEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billingGroupCodeTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingSubGroupCodeEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingSubGroupCodeTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            CashierEN: { $ifNull: ['$users.printname', '-'] },
                            CashierTH: { $ifNull: ['$users.description', '-'] },
                            PackageCode: { $ifNull: ['$ordersets.code', '-'] },
                            PackageNameEN: { $ifNull: ['$ordersets.name', '-'] },
                            PackageNameTH: { $ifNull: ['$ordersets.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            isflexipackage: { $ifNull: ['$ordersets.isflexipackage'] },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                        }
                    }, isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billingGroupCodeEN: '$billingGroupCodeEN',
                                billingGroupCodeTH: '$billingGroupCodeTH',
                                billingSubGroupCodeEN: '$billingSubGroupCodeEN',
                                billingSubGroupCodeTH: '$billingSubGroupCodeTH',
                                isBill: '$isBill',
                                CashierEN: '$CashierEN',
                                CashierTH: '$CashierTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                PackageCode: '$PackageCode',
                                PackageNameEN: '$PackageNameEN',
                                PackageNameTH: '$PackageNameTH',
                                uom: '$uom',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                                isflexipackage: '$isflexipackage',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billingGroupCodeEN: '$_id.billingGroupCodeEN',
                            billingGroupCodeTH: '$_id.billingGroupCodeTH',
                            billingSubGroupCodeEN: '$_id.billingSubGroupCodeEN',
                            billingSubGroupCodeTH: '$_id.billingSubGroupCodeTH',
                            isBill: '$_id.isBill',
                            CashierEN: '$_id.CashierEN',
                            CashierTH: '$_id.CashierTH',
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            PackageNameEN: '$_id.PackageNameEN',
                            PackageNameTH: '$_id.PackageNameTH',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            user: _user.name,
                            uom: '$_id.uom',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            isflexipackage: '$_id.isflexipackage',
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $ne: 0 }
                        }
                    },
                    {
                        $sort: { billingGroupCodeEN: 1, billingSubGroupCodeEN: 1, PackageNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon423_billed error:', error);
            }
            return result;
        });
    }
    findRTCommon999(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultAll = yield this.mongodbModel.aggregate([
                    {
                        $match: {
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    {
                        $unwind: { path: "$alerts", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $limit: 50
                    }
                ]).exec();
                result = resultAll;
            }
            catch (error) {
                this.logger.error('findRTCommon999 error:', error);
            }
            return result;
        });
    }
    findRTCommon811(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisit = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            'medicaldischargedate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'visitid': { $regex: /I/ }
                        }
                    },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "diagnoses", localField: "_id", foreignField: "patientvisituid", as: "diagnoses" } },
                    { $addFields: { 'firstdiag': { $arrayElemAt: ['$diagnoses.diagnosis.problemuid', 0] } } },
                    { $addFields: { 'firstdiag1': { $arrayElemAt: ['$firstdiag', 0] } } },
                    { $lookup: { from: "problems", localField: "firstdiag1", foreignField: "_id", as: "problems" } },
                    { $unwind: { path: "$problems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "orrecords", localField: "_id", foreignField: "patientvisituid", as: "orrecords" } },
                    { $addFields: { 'firstor': { $arrayElemAt: ['$orrecords.procedures.procedureuid', 0] } } },
                    { $addFields: { 'firstor1': { $arrayElemAt: ['$firstor', 0] } } },
                    { $lookup: { from: "referencevalues", localField: "firstor1", foreignField: "_id", as: "referencevalues2" } },
                    { $unwind: { path: "$referencevalues2", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'index1': { $indexOfArray: ['$bedoccupancy.isactive', true] } } },
                    { $addFields: { 'bed': { $arrayElemAt: ["$bedoccupancy.beduid", "$index1"] } } },
                    { $addFields: { 'ward': { $arrayElemAt: ["$bedoccupancy.warduid", "$index1"] } } },
                    { $lookup: { from: "beds", localField: "bed", foreignField: "_id", as: "beds" } },
                    { $unwind: { path: "$beds", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "wards", localField: "ward", foreignField: "_id", as: "wards" } },
                    { $unwind: { path: "$wards", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientbills", localField: "_id", foreignField: "patientvisituid", as: "patientbills" } },
                    { $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            'patientbills.statusflag': 'A',
                            'patientbills.iscancelled': false,
                            'patientbills.isrefund': false,
                        }
                    },
                    { $lookup: { from: "tpas", localField: "patientbills.tpauid", foreignField: "_id", as: "tpas" } },
                    { $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            WardBed: { $concat: [{ $ifNull: ["$wards.name", ""] }, ' / ', { $ifNull: ["$beds.name", ""] }] },
                            HN: "$patients.mrn",
                            EN: "$visitid",
                            NamePatient: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: {
                                                $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ",
                                                    { $ifNull: ["$patients.localfirstname", ""] }, " ",
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }
                                        }
                                    },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: {
                                                $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ",
                                                    { $ifNull: ["$patients.firstname", ""] }, " ",
                                                    { $ifNull: ["$patients.lastname", ""] }]
                                            }
                                        }
                                    }
                                }
                            },
                            MainDiag: { $ifNull: ["$problems.description", "-"] },
                            DateReg: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$startdate", timezone: "+07:00", onNull: "" } },
                            EndDate: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$medicaldischargedate", timezone: "+07:00", onNull: "" } },
                            LOS: { $ifNull: [{ $ceil: { $divide: [{ $subtract: ["$medicaldischargedate", "$startdate"] }, 1000 * 3600 * 24] } }, ""] },
                            ICDS: { $concat: [{ $ifNull: ["$procedures.name", ""] }, "", { $ifNull: ["$referencevalues2.valuedescription", ""] }] },
                            Payor: { $ifNull: ["$tpas.name", "-"] },
                            NetAmountByVia: '$patientbills.totalbillamount',
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "" } },
                        }
                    },
                ])
                    .exec();
                result = resultpatientvisit;
            }
            catch (error) {
                this.logger.error('findRTCommon811 error:', error);
            }
            return result;
        });
    }
    findRTCommon815(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientbills = this.patientbillsModel.aggregate([
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'iscancelled': false,
                            'statusflag': "A",
                        }
                    },
                    {
                        $unwind: "$patientbilleditems"
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientbilleditems.ordertodepartmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $or: [
                                {
                                    'tpas.code': "Z9021"
                                },
                                {
                                    'tpas.code': "Z9007"
                                }
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "payoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            check_Net: { $cond: { if: { $eq: ["$iscancelled", true] }, then: { $multiply: [-1, "$patientbilleditems.netamount"] }, else: "$patientbilleditems.netamount" } },
                        }
                    },
                    {
                        $group: {
                            _id: {
                                RecNo: { $ifNull: ['$sequencenumber', '-'] },
                                EN: { $ifNull: ['$patientvisits.visitid', '-'] },
                                HN: { $ifNull: ['$patients.mrn', '-'] },
                                Name: {
                                    $ifNull: [{
                                            $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                {
                                                    $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                },
                                                { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                        }, '-']
                                },
                                Companyname: { $ifNull: ['$tpas.name', '-'] },
                                CompanyShare: { $ifNull: ['$payors.name', '-'] },
                                Cashier: { $ifNull: ['$users.name', '-'] },
                                ENTYPE: { $ifNull: [{ $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } }, '-'] },
                                ORG: { $ifNull: ['$organisations.name', '-'] },
                                date: { $dateToString: { format: "%d/%m/%Y", date: "$billdate", timezone: "+07:00", onNull: "-" } },
                                datefromto: {
                                    $ifNull: [{
                                            $concat: [
                                                { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                                " - ",
                                                { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                            ]
                                        }, '-']
                                },
                                user: _user.name
                            },
                            NetAmount: { $sum: '$check_Net' }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            RecNo: '$_id.RecNo',
                            EN: '$_id.EN',
                            HN: '$_id.HN',
                            Name: '$_id.Name',
                            NetAmount: { $ifNull: ['$NetAmount', 0] },
                            Companyname: '$_id.Companyname',
                            CompanyShare: '$_id.CompanyShare',
                            Cashier: '$_id.Cashier',
                            ENTYPE: '$_id.ENTYPE',
                            ORG: '$_id.ORG',
                            date: '$_id.date',
                            datefromto: '$_id.datefromto',
                            user: '$_id.user'
                        }
                    },
                    {
                        $addFields: {
                            NetAmount_gte_zero: { $cond: { if: { $gte: ['$NetAmount', 0] }, then: '$NetAmount', else: 0 } }
                        }
                    },
                    {
                        $sort: { ENTYPE: 1, date: 1 }
                    }
                ]).exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon815 error:', error);
            }
            return result;
        });
    }
    findRTCommon816(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                this.logger.debug(req);
                const _user = yield this.findOrgByLoginId(req.loginuid);
                this.logger.debug(_user);
                const resultPatientbills = this.patientbillsModel.aggregate([
                    {
                        $match: {
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            $or: [
                                { 'sequencenumber': { $regex: /CI/ } },
                                { 'sequencenumber': { $regex: /CO/ } },
                                { 'sequencenumber': { $regex: /II/ } },
                                { 'sequencenumber': { $regex: /IO/ } },
                            ]
                        }
                    },
                    {
                        $addFields: {
                            iscancell_null_and_false: { $ifNull: ['$iscancelled', false] }
                        }
                    },
                    {
                        $match: {
                            'iscancell_null_and_false': false
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientbilleditems.ordertodepartmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "payoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }
                                ]
                            }
                        }
                    },
                    { $project: {
                            _id: 0,
                            RecNo: { $ifNull: ['$sequencenumber', '-'] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            Name: { $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $cond: { if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ",
                                                    { $ifNull: ["$patients.localfirstname", ""] }, " ",
                                                    { $ifNull: ["$patients.localmiddlename", ""] }, " ",
                                                    { $ifNull: ["$patients.locallastname", ""] }] }
                                        }
                                    },
                                    else: { $cond: { if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ",
                                                    { $ifNull: ["$patients.firstname", ""] }, " ",
                                                    { $ifNull: ["$patients.middlename", ""] }, " ",
                                                    { $ifNull: ["$patients.lastname", ""] }] }
                                        }
                                    }
                                }
                            },
                            NetAmount: { $ifNull: [{ $sum: '$patientbilleditems.netamount' }, '-'] },
                            Companyname: { $ifNull: ['$tpas.name', '-'] },
                            CompanyShare: { $ifNull: ['$payors.name', '-'] },
                            Cashier: { $ifNull: ['$users.name', '-'] },
                            ENTYPE: { $ifNull: [{ $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } }, '-'] },
                            departmentcode: { $ifNull: ['$departments.code', '-'] },
                            departmentname: { $ifNull: ['$departments.name', '-'] },
                            user: _user.name
                        }
                    },
                    {
                        $sort: { departmentname: 1, ENTYPE: 1 }
                    }
                ]).exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon816 error:', error);
            }
            return result;
        });
    }
    findRTCommon817(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                this.logger.debug(req);
                const _user = yield this.findOrgByLoginId(req.loginuid);
                this.logger.debug(_user);
                const resultPatientbills = this.patientbillsModel.aggregate([
                    {
                        $match: {
                            $or: [
                                { 'sequencenumber': { $regex: /CI/ } },
                                { 'sequencenumber': { $regex: /CO/ } },
                                { 'sequencenumber': { $regex: /II/ } },
                                { 'sequencenumber': { $regex: /IO/ } },
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientbilleditems.ordertodepartmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "payoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $ne: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }
                                ]
                            }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            RecNo: { $ifNull: ['$sequencenumber', '-'] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            Name: {
                                $ifNull: [{
                                        $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                            {
                                                $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                            },
                                            { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                    }, '-']
                            },
                            NetAmount: { $ifNull: [{ $sum: '$patientbilleditems.netamount' }, '-'] },
                            Companyname: { $ifNull: ['$tpas.name', '-'] },
                            CompanyShare: { $ifNull: ['$payors.name', '-'] },
                            Cashier: { $ifNull: ['$users.name', '-'] },
                            ENTYPE: { $ifNull: [{ $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } }, '-'] },
                            departmentcode: { $ifNull: ['$departments.code', '-'] },
                            departmentname: { $ifNull: ['$departments.name', '-'] },
                            user: _user.name
                        }
                    },
                    {
                        $sort: { departmentname: 1, ENTYPE: 1 }
                    }
                ]).exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon817 error:', error);
            }
            return result;
        });
    }
    findRTCommon818(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                this.logger.debug(req);
                const _user = yield this.findOrgByLoginId(req.loginuid);
                this.logger.debug(_user);
                const resultPatientbills = this.patientbillsModel.aggregate([
                    {
                        $match: {
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            $or: [
                                { 'sequencenumber': { $regex: /CI/ } },
                                { 'sequencenumber': { $regex: /CO/ } },
                                { 'sequencenumber': { $regex: /II/ } },
                                { 'sequencenumber': { $regex: /IO/ } },
                            ]
                        }
                    },
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $group: {
                            _id: {
                                billdate: { $dateToString: { format: "%Y-%m-%d", date: "$billdate", timezone: "+07:00", onNull: "-" } },
                                patientuid: '$patients._id',
                                IorO: { $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } }
                            },
                            "patientbilluid": { "$push": "$_id" },
                        }
                    },
                    {
                        $addFields: {
                            countI: { $cond: { if: { $eq: ['$_id.IorO', "IPD"] }, then: 1, else: 0 } }
                        }
                    },
                    {
                        $addFields: {
                            countO: { $cond: { if: { $eq: ['$_id.IorO', "OPD"] }, then: 1, else: 0 } }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                billdate: '$_id.billdate',
                                IorO: '$_id.IorO'
                            },
                            sum_countI: { $sum: '$countI' },
                            sum_countO: { $sum: '$countO' },
                            "patientbilluid": { "$push": "$patientbilluid" },
                        }
                    },
                    {
                        $unwind: { path: "$patientbilluid", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientbills",
                            localField: "patientbilluid",
                            foreignField: "_id",
                            as: "patientbills"
                        }
                    },
                    {
                        $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientbills.patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.preflanguid",
                            foreignField: "_id",
                            as: "preflang"
                        }
                    },
                    {
                        $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "patientbills.tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientbills.payoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientbills.useruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientbills.patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            sum_Net: { $ifNull: [{ $sum: '$patientbills.patientbilleditems.netamount' }, 0] }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            IorO: '$_id.IorO',
                            sum_countI: '$sum_countI',
                            sum_countO: '$sum_countO',
                            RecNo: { $ifNull: ['$patientbills.sequencenumber', '-'] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            Name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                        }
                                    }
                                }
                            },
                            NetAmount: { $cond: { if: { $eq: ["$patientbills.iscancelled", true] }, then: { $multiply: [-1, "$sum_Net"] }, else: "$sum_Net" } },
                            Companyname: { $ifNull: ['$tpas.name', '-'] },
                            CompanyShare: { $ifNull: ['$payors.name', '-'] },
                            Cashier: { $ifNull: ['$users.name', '-'] },
                            ENTYPE: { $ifNull: [{ $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: "IPD", else: "OPD" } }, '-'] },
                            departmentcode: { $ifNull: ['$departments.code', '-'] },
                            departmentname: { $ifNull: ['$departments.name', '-'] },
                            user: _user.name,
                            billdate: { $dateToString: { format: "%Y-%m-%d", date: "$patientbills.billdate", timezone: "+07:00", onNull: "-" } },
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    },
                    {
                        $addFields: {
                            NetAmount_gte_zero: { $cond: { if: { $gte: ['$NetAmount', 0] }, then: '$NetAmount', else: 0 } }
                        }
                    },
                    {
                        $sort: { billdate: 1, ENTYPE: 1 }
                    }
                ]).exec();
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon818 error:', error);
            }
            return result;
        });
    }
    findRTCommon802(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "patientorders",
                            localField: "patientchargecodes.chargecodes.patientorderuid",
                            foreignField: "_id",
                            as: "patientorders2"
                        }
                    },
                    {
                        $unwind: { path: "$patientorders", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: ['$patients.lastname', ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: ["$departments.name", "-"] },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: {
                                $cond: {
                                    if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.code", '-'] },
                                    else: { $ifNull: ['$orderitems.code', '-'] }
                                }
                            },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $ifNull: ['$payors.name', '-'] },
                            payoragreementTH: { $ifNull: ['$payors.name', '-'] },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            reptemplate: '$reptemplate.code',
                            TEL1: { $ifNull: ['$repcfg.documentno', '-'] },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            TEL2: { $ifNull: ['$repcfg.documenttype', '-'] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                reptemplate: '$reptemplate',
                                TEL1: '$TEL1',
                                TEL2: '$TEL2',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            reptemplate: '$_id.reptemplate',
                            TEL1: '$_id.TEL1',
                            TEL2: '$_id.TEL2',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            reqbilled: req.isbill
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 },
                        }
                    },
                    {
                        $sort: { payoragreementEN: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon802 error:', error);
            }
            return result;
        });
    }
    findRTCommon802_billed(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    payoragreement,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: ['$patients.lastname', ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $ifNull: ["$departments.name", "-"] },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: {
                                $cond: {
                                    if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.code", '-'] },
                                    else: { $ifNull: ['$orderitems.code', '-'] }
                                }
                            },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $ifNull: ['$payors.name', '-'] },
                            payoragreementTH: { $ifNull: ['$payors.name', '-'] },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            reptemplate: '$reptemplate.code',
                            TEL1: { $ifNull: ['$repcfg.documentno', '-'] },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            TEL2: { $ifNull: ['$repcfg.documenttype', '-'] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                reptemplate: '$reptemplate',
                                TEL1: '$TEL1',
                                TEL2: '$TEL2',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            reptemplate: '$_id.reptemplate',
                            TEL1: '$_id.TEL1',
                            TEL2: '$_id.TEL2',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            reqbilled: req.isbill
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 },
                        }
                    },
                    {
                        $sort: { payoragreementEN: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon802_billed error:', error);
            }
            return result;
        });
    }
    findRTCommon820(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [], result_last = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            try {
                const resultpatientorder = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'orderdate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            }
                        }
                    },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patientvisits.bedoccupancy", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            'patientvisits.bedoccupancy.isactive': true,
                            "patientvisits.bedoccupancy.islodgerbed": { "$ne": true }
                        }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.genderuid", foreignField: "_id", as: "gender" } },
                    { $unwind: { path: "$gender", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "wards", localField: "patientvisits.bedoccupancy.warduid", foreignField: "_id", as: "wards" } },
                    { $unwind: { path: "$wards", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "beds", localField: "patientvisits.bedoccupancy.beduid", foreignField: "_id", as: "beds" } },
                    { $unwind: { path: "$beds", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patientvisits.visitstatusuid", foreignField: "_id", as: "visitsts" } },
                    { $unwind: { path: "$visitsts", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.religionuid", foreignField: "_id", as: "religion" } },
                    { $unwind: { path: "$religion", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "ordercategories", localField: "patientorderitems.ordercatuid", foreignField: "_id", as: "ordercategories" } },
                    { $unwind: { path: "$ordercategories", preserveNullAndEmptyArrays: true } },
                    { $match: { $or: [{ 'ordercategories.code': "08 (P)" }, { 'ordercategories.code': "08" }] } },
                    { $lookup: { from: "referencevalues", localField: "patientorderitems.statusuid", foreignField: "_id", as: "ordsts" } },
                    { $unwind: { path: "$ordsts", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "frequencies", localField: "patientorderitems.frequencyuid", foreignField: "_id", as: "frequencies" } },
                    { $unwind: { path: "$frequencies", preserveNullAndEmptyArrays: true } },
                    { $addFields: { year: { $subtract: [{ $toInt: { $substr: [{ $add: [{ $year: { "date": new Date(), "timezone": "+07:00" } }, 543] }, 0, 4] }, }, { $toInt: { $substr: [{ $add: [{ $year: { "date": "$patients.dateofbirth", "timezone": "+07:00" } }, 543] }, 0, 4] } }] } } },
                    { $addFields: { month: { $cond: { if: { $lt: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 0] }, then: { $add: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 11] }, else: { $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] } } } } },
                    { $addFields: { date: { $subtract: [{ $toInt: { $dateToString: { format: "%d", date: new Date(), timezone: "+07:00", onNull: "-" } } }, { $toInt: { $dateToString: { format: "%d", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } } }] } } },
                    { $lookup: { from: "patientdietplans", localField: "patientvisituid", foreignField: "patientvisituid", as: "patientdietplans" } },
                    { $unwind: { path: "$patientdietplans", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            PatientNameEN: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                        }
                    },
                    {
                        $addFields: {
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            "results": {
                                "patientvisituid": "$patientvisituid",
                                "ordercate": "$ordercategories.code",
                                "visitend": "$patientvisits.enddate",
                                "HN": "$patients.mrn",
                                "Name": {
                                    $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $ifNull: [{ $ifNull: ["$PatientNameTH", "$PatientNameEN"] }, ""] },
                                        else: { $ifNull: ["$PatientNameEN", ""] }
                                    }
                                },
                                "Gender": { $ifNull: ["$gender.valuedescription", "-"] },
                                DOB: { $dateToString: { format: "%d/%m/%Y", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } },
                                DOBY: { $substr: [{ $add: [{ $year: { "date": "$patients.dateofbirth", "timezone": "+07:00" } }, 543] }, 0, 4], },
                                "Age": {
                                    $concat: [
                                        { $toString: { $cond: { if: { $and: [{ $lt: ['$date', 0] }, { $eq: ['$month', 0] }] }, then: { $subtract: ['$year', 1] }, else: '$year' } } }, ' Y ',
                                        { $toString: { $cond: { if: { $and: [{ $lt: ['$date', 0] }, { $eq: ['$month', 0] }] }, then: { $sum: ['$month', 11] }, else: { $cond: { if: { $and: [{ $lt: ['$date', 0] }] }, then: { $subtract: ['$month', 1] }, else: '$month' } } } } }, ' M ',
                                        { $toString: { $cond: { if: { $and: [{ $lt: ['$date', 0] }] }, then: { $sum: ['$date', '$monthvalue'] }, else: '$date' } } }, ' D'
                                    ]
                                },
                                "Ward": { $ifNull: ["$wards.name", "-"] },
                                "Wardcode": { $ifNull: ["$wards.code", "-"] },
                                "Room": { $ifNull: ["$beds.name", "-"] },
                                "orderitemuid": "$patientorderitems.orderitemuid",
                                "orderitem": "$patientorderitems.orderitemname",
                                "frequency": { $ifNull: ["$frequencies.description", "-"] },
                                "orderqty": "$patientorderitems.quantity",
                                "ordernumber": "$ordernumber",
                                "orderdate": { $dateToString: { format: "%d/%m/%Y", date: "$orderdate", timezone: "+07:00", onNull: "-" } },
                                "orderstart": { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$patientorderitems.startdate", timezone: "+07:00", onNull: "-" } },
                                "orderstatusuid": "$ordsts.valuedescription",
                                "ordercomment": "$patientorderitems.comments",
                                "ordernok": { $ifNull: ["$patientorderitems.isnokdiet", false] },
                                "EN": "$patientvisits.visitid",
                                "visitstatus": "$visitsts.valuedescription",
                                "Religioncode": "$religion.valuecode",
                                "Religion": "$religion.valuedescription",
                                "AdmitDate": { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$patientvisits.startdate", timezone: "+07:00", onNull: "-" } },
                                "datefromto": "",
                                "user": "",
                                "dietplan": "$patientdietplans.prescribeddietuid",
                                "dietplandate": "$patientdietplans.modifiedat",
                            },
                        },
                    },
                    { $unwind: "$results" },
                    {
                        $group: {
                            _id: {
                                patientvisituid: "$results.patientvisituid",
                                "ordercate": "$results.ordercate",
                                "visitend": "$results.visitend",
                                "HN": "$results.HN",
                                "Name": "$results.Name",
                                "Gender": "$results.Gender",
                                DOB: "$results.DOB",
                                DOBY: "$results.DOBY",
                                "Age": "$results.Age",
                                "Ward": "$results.Ward",
                                "Wardcode": "$results.Wardcode",
                                "Room": "$results.Room",
                                "orderitemuid": "$results.orderitemuid",
                                "orderitem": "$results.orderitem",
                                "frequency": "$results.frequency",
                                "orderqty": "$results.orderqty",
                                "ordernumber": "$results.ordernumber",
                                "orderdate": "$results.orderdate",
                                "orderstart": "$results.orderstart",
                                "orderstatusuid": "$results.orderstatusuid",
                                "ordercomment": "$results.ordercomment",
                                "ordernok": "$results.ordernok",
                                "EN": "$results.EN",
                                "visitstatus": "$results.visitstatus",
                                "Religion": "$results.Religion",
                                "Religioncode": "$results.Religioncode",
                                "AdmitDate": "$results.AdmitDate",
                                "datefromto": "$results.datefromto",
                                "user": "$results.user",
                            },
                            "lastdietplandate": { "$last": "$results.dietplandate" },
                            "dietplan": { "$last": "$results.dietplan" },
                        }
                    },
                    {
                        $project: {
                            _id: {
                                patientvisituid: "$_id.patientvisituid",
                                "ordercate": "$_id.ordercate",
                                "visitend": "$_id.visitend",
                                "HN": "$_id.HN",
                                "Name": "$_id.Name",
                                "Gender": "$_id.Gender",
                                DOB: "$_id.DOB",
                                DOBY: "$_id.DOBY",
                                "Age": "$_id.Age",
                                "Ward": "$_id.Ward",
                                "Wardcode": "$_id.Wardcode",
                                "Room": "$_id.Room",
                                "orderitemuid": "$_id.orderitemuid",
                                "orderitem": "$_id.orderitem",
                                "frequency": "$_id.frequency",
                                "orderqty": "$_id.orderqty",
                                "ordernumber": "$_id.ordernumber",
                                "orderdate": "$_id.orderdate",
                                "orderstart": "$_id.orderstart",
                                "orderstatusuid": "$_id.orderstatusuid",
                                "ordercomment": "$_id.ordercomment",
                                "ordernok": "$_id.ordernok",
                                "EN": "$_id.EN",
                                "visitstatus": "$_id.visitstatus",
                                "Religion": "$_id.Religion",
                                "Religioncode": "$_id.Religioncode",
                                "AdmitDate": "$_id.AdmitDate",
                                "datefromto": "$_id.datefromto",
                                "user": "$_id.user",
                                "lastdietplandate": "$lastdietplandate",
                                "dietplan": "$dietplan",
                            },
                        }
                    },
                    { $lookup: { from: "allergies", localField: "_id.patientvisituid", foreignField: "patientvisituid", as: "foodallergy" } },
                    { $unwind: { path: "$foodallergy", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$foodallergy.foodallergies", preserveNullAndEmptyArrays: true } },
                    { $lookup: { "from": "orderresultitems", "localField": "foodallergy.foodallergies.resultitemuid", "foreignField": "_id", "as": "orderresultitems" } },
                    { $unwind: { path: "$orderresultitems", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                patientvisituid: "$_id.patientvisituid",
                                "ordercate": "$_id.ordercate",
                                "visitend": "$_id.visitend",
                                "HN": "$_id.HN",
                                "Name": "$_id.Name",
                                "Gender": "$_id.Gender",
                                DOB: "$_id.DOB",
                                DOBY: "$_id.DOBY",
                                "Age": "$_id.Age",
                                "Ward": "$_id.Ward",
                                "Wardcode": "$_id.Wardcode",
                                "Room": "$_id.Room",
                                "orderitemuid": "$_id.orderitemuid",
                                "orderitem": "$_id.orderitem",
                                "frequency": "$_id.frequency",
                                "orderqty": "$_id.orderqty",
                                "ordernumber": "$_id.ordernumber",
                                "orderdate": "$_id.orderdate",
                                "orderstart": "$_id.orderstart",
                                "orderstatusuid": "$_id.orderstatusuid",
                                "ordercomment": "$_id.ordercomment",
                                "ordernok": "$_id.ordernok",
                                "EN": "$_id.EN",
                                "visitstatus": "$_id.visitstatus",
                                "Religion": "$_id.Religion",
                                "Religioncode": "$_id.Religioncode",
                                "AdmitDate": "$_id.AdmitDate",
                                "datefromto": "$_id.datefromto",
                                "user": "$_id.user",
                                "lastdietplandate": "$_id.lastdietplandate",
                                "dietplan": "$_id.dietplan",
                            },
                            "foodallergy": { "$push": "$orderresultitems.name" },
                        }
                    },
                    {
                        $project: {
                            _id: {
                                patientvisituid: "$_id.patientvisituid",
                                "ordercate": "$_id.ordercate",
                                "visitend": "$_id.visitend",
                                "HN": "$_id.HN",
                                "Name": "$_id.Name",
                                "Gender": "$_id.Gender",
                                DOB: "$_id.DOB",
                                DOBY: "$_id.DOBY",
                                "Age": "$_id.Age",
                                "Ward": "$_id.Ward",
                                "Wardcode": "$_id.Wardcode",
                                "Room": "$_id.Room",
                                "orderitemuid": "$_id.orderitemuid",
                                "orderitem": "$_id.orderitem",
                                "frequency": "$_id.frequency",
                                "orderqty": "$_id.orderqty",
                                "ordernumber": "$_id.ordernumber",
                                "orderdate": "$_id.orderdate",
                                "orderstart": "$_id.orderstart",
                                "orderstatusuid": "$_id.orderstatusuid",
                                "ordercomment": "$_id.ordercomment",
                                "ordernok": "$_id.ordernok",
                                "EN": "$_id.EN",
                                "visitstatus": "$_id.visitstatus",
                                "Religion": "$_id.Religion",
                                "Religioncode": "$_id.Religioncode",
                                "AdmitDate": "$_id.AdmitDate",
                                "datefromto": "$_id.datefromto",
                                "user": "$_id.user",
                                "lastdietplandate": "$_id.lastdietplandate",
                                "dietplan": "$_id.dietplan",
                                "foodallergy": "$foodallergy",
                            },
                        }
                    },
                    {
                        $addFields: {
                            foodallergy: {
                                $reduce: {
                                    input: "$_id.foodallergy", initialValue: "",
                                    in: { $cond: { if: { $eq: ["$$value", ""] }, then: "$$this", else: { $concat: ["$$value", " {replace} ", "$$this"] } } }
                                }
                            }
                        }
                    },
                    { $lookup: { from: "referencevalues", localField: "_id.dietplan", foreignField: "_id", as: "dietplandesc" } },
                    { $unwind: { path: "$dietplandesc", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                patientvisituid: "$_id.patientvisituid",
                                "ordercate": "$_id.ordercate",
                                "visitend": "$_id.visitend",
                                "HN": "$_id.HN",
                                "Name": "$_id.Name",
                                "Gender": "$_id.Gender",
                                DOB: "$_id.DOB",
                                DOBY: "$_id.DOBY",
                                "Age": "$_id.Age",
                                "Ward": "$_id.Ward",
                                "Wardcode": "$_id.Wardcode",
                                "Room": "$_id.Room",
                                "orderitemuid": "$_id.orderitemuid",
                                "orderitem": "$_id.orderitem",
                                "frequency": "$_id.frequency",
                                "orderqty": "$_id.orderqty",
                                "ordernumber": "$_id.ordernumber",
                                "orderdate": "$_id.orderdate",
                                "orderstart": "$_id.orderstart",
                                "orderstatusuid": "$_id.orderstatusuid",
                                "ordercomment": "$_id.ordercomment",
                                "ordernok": "$_id.ordernok",
                                "EN": "$_id.EN",
                                "visitstatus": "$_id.visitstatus",
                                "Religion": "$_id.Religion",
                                "Religioncode": "$_id.Religioncode",
                                "AdmitDate": "$_id.AdmitDate",
                                "datefromto": "$_id.datefromto",
                                "user": "$_id.user",
                                "lastdietplandate": "$_id.lastdietplandate",
                                "foodallergy": "$foodallergy",
                            },
                            "dietplans": { "$push": "$dietplandesc.valuedescription" },
                        }
                    },
                    {
                        $addFields: {
                            dietplanss: {
                                $reduce: {
                                    input: "$dietplans", initialValue: "",
                                    in: { $cond: { if: { $eq: ["$$value", ""] }, then: "$$this", else: { $concat: ["$$value", " {replace} ", "$$this"] } } }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            patientvisituid: { $ifNull: ["$_id.patientvisituid", "-"] },
                            "ordercate": { $ifNull: ["$_id.ordercate", "-"] },
                            "visitend": { $ifNull: ["$_id.visitend", "-"] },
                            "HN": { $ifNull: ["$_id.HN", "-"] },
                            "Name": { $ifNull: ["$_id.Name", "-"] },
                            "Gender": { $ifNull: ["$_id.Gender", "-"] },
                            DOB: { $ifNull: ["$_id.DOB", "-"] },
                            DOBY: { $ifNull: ["$_id.DOBY", "-"] },
                            "Age": { $ifNull: ["$_id.Age", "-"] },
                            "Ward": { $ifNull: ["$_id.Ward", "-"] },
                            "Wardcode": { $ifNull: ["$_id.Wardcode", "-"] },
                            "Room": { $ifNull: ["$_id.Room", "-"] },
                            "orderitemuid": { $ifNull: ["$_id.orderitemuid", "-"] },
                            "orderitem": { $ifNull: ["$_id.orderitem", "-"] },
                            "frequency": { $ifNull: ["$_id.frequency", "-"] },
                            "orderqty": { $ifNull: ["$_id.orderqty", "-"] },
                            "ordernumber": { $ifNull: ["$_id.ordernumber", "-"] },
                            "orderdate": { $ifNull: ["$_id.orderdate", "-"] },
                            "orderstart": { $ifNull: ["$_id.orderstart", "-"] },
                            "orderstatusuid": { $ifNull: ["$_id.orderstatusuid", "-"] },
                            "ordercomment": { $ifNull: ["$_id.ordercomment", "-"] },
                            "ordernok": { $ifNull: ["$_id.ordernok", "-"] },
                            "EN": { $ifNull: ["$_id.EN", "-"] },
                            "visitstatus": { $ifNull: ["$_id.visitstatus", "-"] },
                            "Religion": { $ifNull: ["$_id.Religion", 99] },
                            "Religioncode": { $ifNull: ["$_id.Religioncode", "-"] },
                            "AdmitDate": { $ifNull: ["$_id.AdmitDate", "-"] },
                            "datefromto": { $ifNull: ["$_id.datefromto", "-"] },
                            "user": { $ifNull: ["$_id.user", "-"] },
                            "foodallergy": { $ifNull: ["$_id.foodallergy", "-"] },
                            "dietplan": { $ifNull: ["$dietplanss", "-"] },
                        }
                    },
                    {
                        $sort: { Ward: 1, Room: 1, frequency: 1 }
                    }
                ]).exec();
                result = resultpatientorder;
            }
            catch (error) {
                console.log('findRTCommon820 error:', error);
            }
            return result;
        });
    }
    findRTCommon822(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultStockdispenses = yield this.patientsModel.aggregate([
                    {
                        $match: {
                            "$or": [{ "nationalid": { "$eq": null } }, { "nationalid": { "$eq": "" } }],
                            statusflag: 'A',
                            createdat: {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "nationalityuid", foreignField: "_id", as: "nationality" } },
                    { $unwind: { path: "$nationality", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "titleuid", foreignField: "_id", as: "titleen" } },
                    { $unwind: { path: "$titleen", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "localnametitleuid", foreignField: "_id", as: "titleth" } },
                    { $unwind: { path: "$titleth", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            'nationality.valuecode': 'TH'
                        }
                    },
                    {
                        $addFields: {
                            month1: { $month: { $dateFromString: { dateString: { $dateToString: { date: "$dateofbirth", timezone: "+07:00", onNull: null } } } } },
                        }
                    },
                    {
                        $addFields: {
                            Month1nameTH: {
                                $let: {
                                    vars: {
                                        monthsInString: ['', 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฏาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
                                    },
                                    in: {
                                        $arrayElemAt: ['$$monthsInString', '$month1']
                                    }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            orguidName: { $ifNull: ['$organisations.name', ""] },
                            user: _user.name,
                            nationality: { $ifNull: ["$nationality.valuecode", "-"] },
                            HN: { $ifNull: ['$mrn', '-'] },
                            Firstname: { $ifNull: ["$firstname", ""] },
                            Lastname: { $ifNull: ["$lastname", ""] },
                            localfirsttname: { $ifNull: ["$localfirstname", ""] },
                            locallastname: { $ifNull: ["$locallastname", ""] },
                            Dateofbirth: "$dateofbirth",
                            NationnalID: { $ifNull: ["$nationalid", "-"] },
                            nationalityuid: "$nationalityuid",
                            createdate: { $dateToString: { format: "%d-%m-%Y %H:%M:%S", date: "$createdat", timezone: "+07:00", onNull: "-" } },
                            titleuid: "$titleuid",
                            titleen: { $ifNull: ["$titleen.valuedescription", ""] },
                            localnametitleuid: "$localnametitleuid",
                            titleth: { $ifNull: ["$titleth.valuedescription", ""] },
                            DOBEN: { $dateToString: { format: "%d-%m-%Y", date: "$dateofbirth", timezone: "+07:00", onNull: "-" } },
                            DOBTH: { $substr: [{ $add: [{ $year: { "date": "$dateofbirth", "timezone": "+07:00" } }, 543] }, 0, 4], },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                        }
                    }
                ])
                    .exec();
                result = resultStockdispenses;
            }
            catch (error) {
                this.logger.error('findRTCommon822error:', error);
            }
            return result;
        });
    }
    findRTCommon28(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let patientbill = { $match: {} };
                try {
                    if (req.payoragreement != '' && req.payoragreement != null) {
                        payoragreement = {
                            $match: {
                                'payoragreements._id': new mongoose_1.Types.ObjectId(req.payoragreement),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientorders",
                            localField: "patientchargecodes.chargecodes.patientorderuid",
                            foreignField: "_id",
                            as: "patientorders"
                        }
                    },
                    {
                        $unwind: { path: "$patientorders", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientorders.patientorderitems", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$patientchargecodes.chargecodes.patientorderitemuid', '$patientorders.patientorderitems._id'] }
                                ]
                            }
                        }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            statusflag: { $ifNull: ['$patientchargecodes.chargecodes.statusflag', '-'] },
                            flexipackageuid: { $ifNull: ["$patientorders.patientorderitems.patientpackageuid", "-"] },
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: ['$patients.lastname', ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: {
                                $cond: {
                                    if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.code", '-'] },
                                    else: { $ifNull: ['$orderitems.code', '-'] }
                                }
                            },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.payoragreement, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            TEL1: { $ifNull: ['$repcfg.documentno', '-'] },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            TEL2: { $ifNull: ['$repcfg.documenttype', '-'] },
                        }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$statusflag', 'A'] },
                                    { $and: [{ $eq: ['$statusflag', 'D'] }, { $ne: ['$flexipackageuid', '-'] }] },
                                ]
                            }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                flexipackageuid: '$flexipackageuid',
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                TEL1: '$TEL1',
                                TEL2: '$TEL2',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            statusflag: '',
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            TEL1: '$_id.TEL1',
                            TEL2: '$_id.TEL2',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            reqbilled: req.isbill
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 },
                        }
                    },
                    {
                        $sort: { statusflag: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon28 error:', error);
            }
            return result;
        });
    }
    findRTCommon28_billed(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let patientbill = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    patientbill,
                    {
                        $match: {
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientorders",
                            localField: "patientchargecodes.chargecodes.patientorderuid",
                            foreignField: "_id",
                            as: "patientorders"
                        }
                    },
                    {
                        $unwind: { path: "$patientorders", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientorders.patientorderitems", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $match: {
                            $expr: {
                                $and: [
                                    { $eq: ['$patientchargecodes.chargecodes.patientorderitemuid', '$patientorders.patientorderitems._id'] }
                                ]
                            }
                        }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            statusflag: { $ifNull: ['$patientchargecodes.chargecodes.statusflag', '-'] },
                            flexipackageuid: { $ifNull: ["$patientorders.patientorderitems.patientpackageuid", "-"] },
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: ['$patients.lastname', ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: {
                                $cond: {
                                    if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.code", '-'] },
                                    else: { $ifNull: ['$orderitems.code', '-'] }
                                }
                            },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            TEL1: { $ifNull: ['$repcfg.documentno', '-'] },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            TEL2: { $ifNull: ['$repcfg.documenttype', '-'] },
                        }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$statusflag', 'A'] },
                                    { $and: [{ $eq: ['$statusflag', 'D'] }, { $ne: ['$flexipackageuid', '-'] }] },
                                ]
                            }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                flexipackageuid: '$flexipackageuid',
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                TEL1: '$TEL1',
                                TEL2: '$TEL2',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            statusflag: '',
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            TEL1: '$_id.TEL1',
                            TEL2: '$_id.TEL2',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            reqbilled: req.isbill
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 },
                        }
                    },
                    {
                        $sort: { statusflag: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon28_billed error:', error);
            }
            return result;
        });
    }
    findRTCommon823_billed(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let patientbill = { $match: {} };
                let allocatebydate = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                try {
                    if (req.allocatebydate === true) {
                        allocatebydate = {
                            $match: {
                                'patientchargecodes.chargecodes.chargedate': {
                                    $gte: new Date(req.fromdate),
                                    $lte: new Date(req.todate)
                                },
                            }
                        };
                    }
                }
                catch (res) {
                    req.searchstring = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    patientbill,
                    allocatebydate,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            flexipackageuid: { $ifNull: ["$patientchargecodes.chargecodes.flexipackageuid", "-"] },
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: ['$patients.lastname', ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: {
                                $cond: {
                                    if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.code", '-'] },
                                    else: { $ifNull: ['$orderitems.code', '-'] }
                                }
                            },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            TEL1: { $ifNull: ['$repcfg.documentno', '-'] },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            TEL2: { $ifNull: ['$repcfg.documenttype', '-'] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                flexipackageuid: '$flexipackageuid',
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                TEL1: '$TEL1',
                                TEL2: '$TEL2',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            flexipackageuid: '$_id.flexipackageuid',
                            statusflag: { $cond: [{ $ne: ["$_id.flexipackageuid", "-"] }, "IN", "OUT"] },
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            TEL1: '$_id.TEL1',
                            TEL2: '$_id.TEL2',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            reqbilled: req.isbill
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 },
                            'statusflag': { $eq: 'IN' }
                        }
                    },
                    {
                        $sort: { statusflag: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon823_billed error:', error);
            }
            return result;
        });
    }
    findRTCommon823_billed_prov(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let patientbill = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    patientbill,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            flexipackageuid: { $ifNull: ["$patientchargecodes.chargecodes.flexipackageuid", "-"] },
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: ['$patients.lastname', ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: {
                                $cond: {
                                    if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.code", '-'] },
                                    else: { $ifNull: ['$orderitems.code', '-'] }
                                }
                            },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            TEL1: { $ifNull: ['$repcfg.documentno', '-'] },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            TEL2: { $ifNull: ['$repcfg.documenttype', '-'] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                flexipackageuid: '$flexipackageuid',
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                TEL1: '$TEL1',
                                TEL2: '$TEL2',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            flexipackageuid: '$_id.flexipackageuid',
                            statusflag: { $cond: [{ $ne: ["$_id.flexipackageuid", "-"] }, "IN", "OUT"] },
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            TEL1: '$_id.TEL1',
                            TEL2: '$_id.TEL2',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            reqbilled: req.isbill
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 },
                            'statusflag': { $eq: 'IN' }
                        }
                    },
                    {
                        $sort: { statusflag: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon823_billed_prov error:', error);
            }
            return result;
        });
    }
    findRTCommon827_billed(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let patientbill = { $match: {} };
                let allocatebydate = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                try {
                    if (req.allocatebydate === true) {
                        allocatebydate = {
                            $match: {
                                'patientchargecodes.chargecodes.chargedate': {
                                    $gte: new Date(req.fromdate),
                                    $lte: new Date(req.todate)
                                },
                            }
                        };
                    }
                }
                catch (res) {
                    req.searchstring = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    patientbill,
                    allocatebydate,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            flexipackageuid: { $ifNull: ["$patientchargecodes.chargecodes.flexipackageuid", "-"] },
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: ['$patients.lastname', ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: {
                                $cond: {
                                    if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.code", '-'] },
                                    else: { $ifNull: ['$orderitems.code', '-'] }
                                }
                            },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            TEL1: { $ifNull: ['$repcfg.documentno', '-'] },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            TEL2: { $ifNull: ['$repcfg.documenttype', '-'] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                flexipackageuid: '$flexipackageuid',
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                TEL1: '$TEL1',
                                TEL2: '$TEL2',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            flexipackageuid: '$_id.flexipackageuid',
                            statusflag: { $cond: [{ $ne: ["$_id.flexipackageuid", "-"] }, "IN", "OUT"] },
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            TEL1: '$_id.TEL1',
                            TEL2: '$_id.TEL2',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            reqbilled: req.isbill
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 },
                            'statusflag': { $eq: 'OUT' }
                        }
                    },
                    {
                        $sort: { statusflag: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon827_billed error:', error);
            }
            return result;
        });
    }
    findRTCommon827_billed_prov(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let patientbill = { $match: {} };
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.payoragreement = '';
                }
                if (req.searchcriteria != '' && req.searchcriteria != null) {
                    patientbill = { $match: { 'patientchargecodes.chargecodes.patientbilluid': new mongoose_1.Types.ObjectId(req.searchcriteria), } };
                }
                if (req.isbill != 'all') {
                    isBill = {
                        $match: {
                            'isBill': req.isbill
                        }
                    };
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    patientbill,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.chargedate': {
                                $gte: new Date(req.fromdate),
                                $lte: new Date(req.todate)
                            },
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            flexipackageuid: { $ifNull: ["$patientchargecodes.chargecodes.flexipackageuid", "-"] },
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: ['$patients.lastname', ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            title_name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] },
                                    else: { $ifNull: ["$nametitle.valuedescription", ""] }
                                }
                            },
                            first_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localfirstname", ""] },
                                            else: { $ifNull: ["$patients.firstname", ""] }
                                        }
                                    }
                                }
                            },
                            middle_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.localmiddlename", ""] },
                                            else: { $ifNull: ["$patients.middlename", ""] }
                                        }
                                    }
                                }
                            },
                            last_name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: "",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                            then: { $ifNull: ["$patients.locallastname", ""] },
                                            else: { $ifNull: ["$patients.lastname", ""] }
                                        }
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: {
                                $cond: {
                                    if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.code", '-'] },
                                    else: { $ifNull: ['$orderitems.code', '-'] }
                                }
                            },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            TEL1: { $ifNull: ['$repcfg.documentno', '-'] },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            TEL2: { $ifNull: ['$repcfg.documenttype', '-'] }
                        }
                    },
                    isBill,
                    {
                        $group: {
                            _id: {
                                flexipackageuid: '$flexipackageuid',
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                title_name: { $ifNull: ["$title_name", ""] },
                                first_name: { $ifNull: ["$first_name", ""] },
                                middle_name: { $ifNull: ["$middle_name", ""] },
                                last_name: { $ifNull: ["$last_name", ""] },
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                TEL1: '$TEL1',
                                TEL2: '$TEL2',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            flexipackageuid: '$_id.flexipackageuid',
                            statusflag: { $cond: [{ $ne: ["$_id.flexipackageuid", "-"] }, "IN", "OUT"] },
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            title_name: { $ifNull: ["$_id.title_name", ""] },
                            first_name: { $ifNull: ["$_id.first_name", ""] },
                            middle_name: { $ifNull: ["$_id.middle_name", ""] },
                            last_name: { $ifNull: ["$_id.last_name", ""] },
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            TEL1: '$_id.TEL1',
                            TEL2: '$_id.TEL2',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            reqbilled: req.isbill
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 },
                            'statusflag': { $eq: 'OUT' }
                        }
                    },
                    {
                        $sort: { statusflag: 1, billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon827_billed_prov error:', error);
            }
            return result;
        });
    }
    findRTCommon801(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                let patientbill = { $match: {} };
                let payoragreement = { $match: {} };
                let isBill = { $match: {} };
                let billingSubGroupUidsString = req.billingSubGroupUids === null || req.billingSubGroupUids === undefined || req.billingSubGroupUids === '' ? null : req.billingSubGroupUids.split(",");
                let billingGroupUidsString = req.billingGroupUids === null || req.billingGroupUids === undefined || req.billingGroupUids === '' ? null : req.billingGroupUids.split(",");
                let billingSubGroupUids = [];
                if (billingSubGroupUidsString != null) {
                    billingSubGroupUidsString.forEach(function (s) {
                        billingSubGroupUids.push(new mongoose_1.Types.ObjectId(s));
                    });
                }
                let billingGroupUids = [];
                if (billingGroupUidsString != null) {
                    billingGroupUidsString.forEach(function (s) {
                        billingGroupUids.push(new mongoose_1.Types.ObjectId(s));
                    });
                }
                let group = { $match: {} };
                let supGroup = { $match: {} };
                if (billingSubGroupUids[0] != undefined) {
                    supGroup = {
                        $match: {
                            "billinggroups2._id": {
                                $in: billingSubGroupUids
                            }
                        }
                    };
                }
                else {
                    if (billingGroupUids[0] != undefined) {
                        group = {
                            $match: {
                                "billinggroups1._id": {
                                    $in: billingGroupUids
                                }
                            }
                        };
                    }
                }
                try {
                    if (req.searchstring != '' && req.searchstring != null) {
                        payoragreement = {
                            $match: {
                                'patientchargecodes.chargecodes.allocatedpayoruid': new mongoose_1.Types.ObjectId(req.searchstring),
                            }
                        };
                    }
                }
                catch (res) {
                    req.searchstring = '';
                }
                const resultPatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            _id: new mongoose_1.Types.ObjectId(req.patientvisituid),
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    {
                        $lookup: {
                            from: "patientchargecodes",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "patientchargecodes"
                        }
                    },
                    {
                        $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: false }
                    },
                    payoragreement,
                    {
                        $match: {
                            'patientchargecodes.chargecodes.statusflag': 'A',
                            "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }],
                            'patientchargecodes.chargecodes.netamount': { $ne: 0 }
                        },
                    },
                    {
                        $unwind: { path: "$bedoccupancy", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            $expr: {
                                $or: [
                                    { $eq: ['$bedoccupancy.isactive', true] },
                                    { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] },
                                ]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "patientchargecodes.chargecodes.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payors",
                            localField: "patientchargecodes.chargecodes.allocatedpayoruid",
                            foreignField: "_id",
                            as: "payors"
                        }
                    },
                    {
                        $unwind: { path: "$payors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "payoragreements",
                            localField: "patientchargecodes.chargecodes.allocatedagreementuid",
                            foreignField: "_id",
                            as: "payoragreements"
                        }
                    },
                    {
                        $unwind: { path: "$payoragreements", preserveNullAndEmptyArrays: true }
                    },
                    payoragreement,
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "referencevalues1"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues1", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "localnametitle"
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "orderitems",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "_id",
                            as: "orderitems"
                        }
                    },
                    {
                        $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "ordersets",
                            localField: "patientchargecodes.chargecodes.ordersetuid",
                            foreignField: "_id",
                            as: "ordersets"
                        }
                    },
                    {
                        $unwind: { path: "$ordersets", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billinggroupuid",
                            foreignField: "_id",
                            as: "billinggroups1"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups1", preserveNullAndEmptyArrays: true }
                    },
                    group,
                    {
                        $lookup: {
                            from: "billinggroups",
                            localField: "patientchargecodes.chargecodes.billingsubgroupuid",
                            foreignField: "_id",
                            as: "billinggroups2"
                        }
                    },
                    {
                        $unwind: { path: "$billinggroups2", preserveNullAndEmptyArrays: true }
                    },
                    supGroup,
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientchargecodes.modifiedby",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "patientchargecodes.chargecodes.orderitemuid",
                            foreignField: "orderitemuid",
                            as: "items"
                        }
                    },
                    {
                        $unwind: { path: "$items", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "items.baseuomuid",
                            foreignField: "_id",
                            as: "uomdesc"
                        }
                    },
                    {
                        $unwind: { path: "$uomdesc", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "patientorders", localField: "patientchargecodes.chargecodes.patientorderuid", foreignField: "_id", as: "pod" } },
                    { $unwind: { path: "$pod", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            ReportNameEN: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "Statement for Inpatient Department", else: "Statement for Outpatient Department" } },
                            ReportNameTH: "ใบแจ้งรายละเอียดค่ารักษาพยาบาล",
                            PatientName: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$referencevalues1.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$referencevalues1.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            },
                            HN: { $ifNull: ["$patients.mrn", "-"] },
                            EN: { $ifNull: ["$visitid", "-"] },
                            AdmissionDate: {
                                $concat: [
                                    { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                                    " - ",
                                    { $dateToString: { format: "%d/%m/%Y", date: "$enddate", timezone: "+07:00", onNull: "-" } }
                                ]
                            },
                            RoomOrBlank: { $cond: { if: { $eq: [{ $ifNull: ["$beds.name", "-"] }, "-"] }, then: "", else: "Room :" } },
                            Department: { $cond: { if: { $eq: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "", else: { $ifNull: ["$departments.name", "-"] } } },
                            Room: { $concat: [{ $ifNull: ["$wards.name", ""] }, { $cond: { if: { $eq: [{ $ifNull: ["$wards.name", "-"] }, "-"] }, then: "", else: " / " } }, { $ifNull: ["$beds.name", ""] }] },
                            itemcode: {
                                $cond: {
                                    if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.code", '-'] },
                                    else: { $ifNull: ['$orderitems.code', '-'] }
                                }
                            },
                            itemname: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.name", '-'] },
                                            else: { $ifNull: ['$orderitems.name', '-'] }
                                        }
                                    }
                                }
                            },
                            Quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', '-'] },
                            Amount: { $ifNull: [{ $add: ['$patientchargecodes.chargecodes.netamount', '$patientchargecodes.chargecodes.payordiscount'] }, '-'] },
                            Discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', '-'] },
                            Net: { $ifNull: ['$patientchargecodes.chargecodes.netamount', '-'] },
                            billinggroupCode: { $ifNull: ['$billinggroups1.code', '-'] },
                            billinggroupNameEN: { $ifNull: ['$billinggroups1.name', '-'] },
                            billinggroupNameTH: { $ifNull: ['$billinggroups1.description', '-'] },
                            billingsubgroupCode: { $ifNull: ['$billinggroups2.code', '-'] },
                            billingsubgroupNameEN: { $ifNull: ['$billinggroups2.name', '-'] },
                            billingsubgroupNameTH: { $ifNull: ['$billinggroups2.description', '-'] },
                            isBill: { $cond: { if: { $not: ['$patientchargecodes.chargecodes.patientbilluid'] }, then: "unbilled", else: "billed" } },
                            userEN: { $ifNull: ['$users.printname', '-'] },
                            userTH: { $ifNull: ['$users.description', '-'] },
                            payoragreementEN: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            payoragreementTH: { $cond: { if: { $eq: [req.searchstring, ''] }, then: "", else: { $ifNull: ['$payors.name', '-'] } } },
                            datefromto: {
                                $ifNull: [{
                                        $concat: [
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                                            " - ",
                                            { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } }
                                        ]
                                    }, '-']
                            },
                            los: {
                                $cond: {
                                    if: { $ne: [{ $substr: ["$visitid", 0, 1] }, "I"] }, then: "",
                                    else: {
                                        $cond: {
                                            if: {
                                                $eq: [{ $ceil: { $divide: [{ $subtract: ["$enddate", "$startdate"] }, 1000 * 3600 * 24] } }, null]
                                            }, then: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: new Date() } },
                                                                        '-',
                                                                        { $toString: { $month: new Date() } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: new Date() } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            },
                                            else: {
                                                $divide: [{
                                                        $subtract: [
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$enddate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$enddate' } }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                $toDate: {
                                                                    $concat: [
                                                                        { $toString: { $year: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $month: '$startdate' } },
                                                                        '-',
                                                                        { $toString: { $dayOfMonth: '$startdate' } }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }, 1000 * 3600 * 24]
                                            }
                                        }
                                    }
                                }
                            },
                            uom: { $cond: { if: { $eq: ["$pod.ordercattype", "MEDICINE"] }, then: { $ifNull: ["$uomdesc.valuedescription", ''] }, else: '' } },
                            TEL1: { $ifNull: ['$repcfg.documentno', '-'] },
                            itemnameTH: {
                                $cond: {
                                    if: { $eq: ["$orderitems.code", ["010002", "01MEDEX", "04SUPEX", "18025", "011001"]] }, then: { $ifNull: ["$patientchargecodes.chargecodes.comments", '-'] },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patientchargecodes.chargecodes.chargecodetype", 'PATIENTPACKAGE'] }, then: { $ifNull: ["$ordersets.description", '-'] },
                                            else: { $ifNull: ['$orderitems.description', '-'] }
                                        }
                                    }
                                }
                            },
                            TEL2: { $ifNull: ['$repcfg.documenttype', '-'] }
                        }
                    },
                    {
                        $match: {
                            isBill: 'billed'
                        }
                    },
                    {
                        $group: {
                            _id: {
                                ReportNameEN: '$ReportNameEN',
                                ReportNameTH: '$ReportNameTH',
                                PatientName: '$PatientName',
                                PatientNameTH: '$PatientNameTH',
                                HN: '$HN',
                                EN: '$EN',
                                AdmissionDate: '$AdmissionDate',
                                RoomOrBlank: '$RoomOrBlank',
                                Department: '$Department',
                                Room: '$Room',
                                billinggroupCode: '$billinggroupCode',
                                billinggroupNameEN: '$billinggroupNameEN',
                                billinggroupNameTH: '$billinggroupNameTH',
                                billingsubgroupCode: '$billingsubgroupCode',
                                billingsubgroupNameEN: '$billingsubgroupNameEN',
                                billingsubgroupNameTH: '$billingsubgroupNameTH',
                                isBill: '$isBill',
                                userEN: '$userEN',
                                userTH: '$userTH',
                                payoragreementEN: '$payoragreementEN',
                                payoragreementTH: '$payoragreementTH',
                                itemcode: '$itemcode',
                                itemname: '$itemname',
                                uom: '$uom',
                                TEL1: '$TEL1',
                                TEL2: '$TEL2',
                                los: '$los',
                                datefromto: '$datefromto',
                                itemnameTH: '$itemnameTH',
                            },
                            Quantity: { $sum: "$Quantity" },
                            Amount: { $sum: "$Amount" },
                            Discount: { $sum: "$Discount" },
                            Net: { $sum: "$Net" }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            ReportNameEN: '$_id.ReportNameEN',
                            ReportNameTH: '$_id.ReportNameTH',
                            PatientName: '$_id.PatientName',
                            PatientNameTH: '$_id.PatientNameTH',
                            HN: '$_id.HN',
                            EN: '$_id.EN',
                            AdmissionDate: '$_id.AdmissionDate',
                            RoomOrBlank: '$_id.RoomOrBlank',
                            Department: '$_id.Department',
                            Room: '$_id.Room',
                            billinggroupCode: '$_id.billinggroupCode',
                            billinggroupNameEN: '$_id.billinggroupNameEN',
                            billinggroupNameTH: '$_id.billinggroupNameTH',
                            billingsubgroupCode: '$_id.billingsubgroupCode',
                            billingsubgroupNameEN: '$_id.billingsubgroupNameEN',
                            billingsubgroupNameTH: '$_id.billingsubgroupNameTH',
                            isBill: '$_id.isBill',
                            userEN: { $ifNull: [_user.printname, '-'] },
                            userTH: { $ifNull: [_user.description, '-'] },
                            payoragreementEN: '$_id.payoragreementEN',
                            payoragreementTH: '$_id.payoragreementTH',
                            itemcode: '$_id.itemcode',
                            itemname: '$_id.itemname',
                            Quantity: "$Quantity",
                            Amount: "$Amount",
                            Discount: "$Discount",
                            Net: "$Net",
                            uom: '$_id.uom',
                            TEL1: '$_id.TEL1',
                            TEL2: '$_id.TEL2',
                            los: '$_id.los',
                            datefromto: '$_id.datefromto',
                            itemnameTH: '$_id.itemnameTH',
                            reqbilled: req.isbill
                        }
                    },
                    {
                        $match: {
                            'Quantity': { $gt: 0 },
                        }
                    },
                    {
                        $sort: { billinggroupNameEN: 1, billingsubgroupNameEN: 1 }
                    }
                ]).exec();
                result = resultPatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon801 error:', error);
            }
            return result;
        });
    }
    findRTCommon831(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientbills = yield this.patientbillsModel.aggregate([
                    {
                        $match: {
                            'billdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'isrefund': false,
                            $or: [
                                { 'sequencenumber': { $regex: /CI/ } },
                                { 'sequencenumber': { $regex: /CO/ } },
                                { 'sequencenumber': { $regex: /II/ } },
                                { 'sequencenumber': { $regex: /IO/ } },
                            ],
                            'iscancelled': { $ne: true }
                        }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "tpas",
                            localField: "tpauid",
                            foreignField: "_id",
                            as: "tpas"
                        }
                    },
                    {
                        $unwind: { path: "$tpas", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "tpas.arcategoryuid",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$patientbilleditems", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            entyp: "",
                            code: "$referencevalues.valuecode",
                            description: "$referencevalues.valuedescription",
                            billno: "$sequencenumber",
                            totalAmount: { $multiply: ["$patientbilleditems.unitprice", "$patientbilleditems.quantity"] },
                            totalDiscount: "$patientbilleditems.payordiscount",
                            netAmount: "$patientbilleditems.netamount"
                        }
                    },
                    {
                        $group: {
                            _id: {
                                entyp: "$entyp",
                                description: "$description",
                                billno: "$billno",
                                code: "$code"
                            },
                            totalAmount: { $sum: "$totalAmount" },
                            totalDiscount: { $sum: "$totalDiscount" },
                            netAmount: { $sum: "$netAmount" }
                        }
                    },
                    {
                        $addFields: {
                            count: 1
                        }
                    },
                    {
                        $group: {
                            _id: {
                                entyp: "$_id.entyp",
                                code: "$_id.code",
                                description: "$_id.description",
                            },
                            totalAmount: { $sum: "$totalAmount" },
                            totalDiscount: { $sum: "$totalDiscount" },
                            netAmount: { $sum: "$netAmount" },
                            sum_count: { $sum: '$count' }
                        }
                    },
                    {
                        $sort: { _id: 1 }
                    },
                    {
                        $project: {
                            code: '$_id.code',
                            sum_count: '$sum_count',
                            Entyp: "$_id.entyp",
                            Description: "$_id.description",
                            Total_Amount: "$totalAmount",
                            Total_Discount: "$totalDiscount",
                            Net_Amount: "$netAmount",
                            charity: { $cond: { if: { $gte: [{ $substr: ["$_id.code", 0, 1] }, "A"] }, then: "$netAmount", else: 0 } },
                            user: _user.name,
                            startdate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.fromdate))),
                            enddate: dateutils_1.default.convertISOtoDatetimeSlash(dateutils_1.default.convertUTCtoGMT(new Date(req.todate)))
                        }
                    }
                ])
                    .exec();
                this.logger.debug('resultPatientbills', resultPatientbills);
                result = resultPatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon831 error:', error);
            }
            return result;
        });
    }
    findRTCommon832(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let storeuid = { $match: {} };
                if (req.storeuid != '') {
                    storeuid = {
                        $match: {
                            'storeuid': new mongoose_1.Types.ObjectId(req.storeuid),
                        }
                    };
                }
                ;
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultStockledgers = yield this.StockledgersModel.aggregate([
                    storeuid,
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'statusflag': "A",
                            'quantity': { $gt: 0 },
                        }
                    },
                    {
                        $addFields: {
                            "ledgerdetails_first": { $arrayElemAt: ["$ledgerdetails", 0] }
                        }
                    },
                    {
                        $addFields: {
                            "ledgerdetails_last": { $arrayElemAt: ["$ledgerdetails", -1] }
                        }
                    },
                    {
                        $match: {
                            $or: [{ 'ledgerdetails_last.transactiondate': { $lt: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)) } },
                            ]
                        }
                    },
                    {
                        $lookup: {
                            from: "itemmasters",
                            localField: "itemmasteruid",
                            foreignField: "_id",
                            as: "itemmasters"
                        }
                    },
                    {
                        $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "inventorystores",
                            localField: "storeuid",
                            foreignField: "_id",
                            as: "inventorystores"
                        }
                    },
                    {
                        $unwind: { path: "$inventorystores", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "ledgerdetails.quantityuom",
                            foreignField: "_id",
                            as: "referencevalues"
                        }
                    },
                    {
                        $unwind: { path: "$referencevalues", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "vendors",
                            localField: "ledgerdetails_first.vendoruid",
                            foreignField: "_id",
                            as: "vendors"
                        }
                    },
                    {
                        $unwind: { path: "$vendors", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "goodsreceives",
                            localField: "ledgerdetails_first.transactionrefuid",
                            foreignField: "_id",
                            as: "goodsreceives"
                        }
                    },
                    {
                        $unwind: { path: "$goodsreceives", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            orguidName: { $ifNull: ['$organisations.name', ""] },
                            itemCode: { $ifNull: ['$itemmasters.code', ""] },
                            itemName: { $ifNull: ['$itemmasters.name', ""] },
                            storeName: { $ifNull: ['$inventorystores.name', ""] },
                            quantity: { $ifNull: ["$quantity", 0] },
                            unit: { $ifNull: ['$referencevalues.valuedescription', ""] },
                            batchID: { $ifNull: ["$batchid", ""] },
                            expiryDate: { $dateToString: { format: "%d/%m/%Y", date: "$expirydate", timezone: "+07:00", onNull: "" } },
                            unitCost: { $ifNull: ["$ledgerdetails_last.wac", 0] },
                            TotalCost: { $ifNull: [{ $multiply: ['$quantity', '$ledgerdetails_last.wac'] }, 0] },
                            lastMovementDate: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$ledgerdetails_last.transactiondate", timezone: "+07:00", onNull: "" } },
                            vendor: { $ifNull: ["$vendors.name", ""] },
                            comment: { $ifNull: ["$goodsreceives.comments", ""] },
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            user: _user.name
                        }
                    },
                    { $sort: { storeName: 1, itemCode: 1 } },
                ])
                    .exec();
                result = resultStockledgers;
            }
            catch (error) {
                this.logger.error('findRTCommon832 error:', error);
            }
            return result;
        });
    }
    findRTCommon833(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [], result_last = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            try {
                let dept = { $match: {} };
                if (req.departmentuids != '' && req.departmentuids != null) {
                    dept = { $match: { 'patientvisits.bedoccupancy.warduid': new mongoose_1.Types.ObjectId(req.departmentuids) } };
                }
                else {
                    dept = { $match: {} };
                }
                let freq = { $match: {} };
                if (req.frequencyuid != '' && req.frequencyuid != null) {
                    freq = { $match: { 'patientorderitems.frequencyuid': new mongoose_1.Types.ObjectId(req.frequencyuid) } };
                }
                else {
                    freq = { $match: {} };
                }
                const resultpatientorder = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'orderdate': {
                                $gte: new Date(req.fromdate)
                            }
                        }
                    },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patientvisits.bedoccupancy", preserveNullAndEmptyArrays: true } },
                    {
                        $match: { $or: [
                                { 'patientvisits.visitid': { $regex: /O/ } },
                                {
                                    'patientvisits.bedoccupancy.isactive': true,
                                    "patientvisits.bedoccupancy.islodgerbed": { "$ne": true }
                                }
                            ] }
                    },
                    dept,
                    { $lookup: { from: "referencevalues", localField: "patients.genderuid", foreignField: "_id", as: "gender" } },
                    { $unwind: { path: "$gender", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "wards", localField: "patientvisits.bedoccupancy.warduid", foreignField: "_id", as: "wards" } },
                    { $unwind: { path: "$wards", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "beds", localField: "patientvisits.bedoccupancy.beduid", foreignField: "_id", as: "beds" } },
                    { $unwind: { path: "$beds", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patientvisits.visitstatusuid", foreignField: "_id", as: "visitsts" } },
                    { $unwind: { path: "$visitsts", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.religionuid", foreignField: "_id", as: "religion" } },
                    { $unwind: { path: "$religion", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: true } },
                    freq,
                    { $lookup: { from: "ordercategories", localField: "patientorderitems.ordercatuid", foreignField: "_id", as: "ordercategories" } },
                    { $unwind: { path: "$ordercategories", preserveNullAndEmptyArrays: true } },
                    { $match: { $or: [{ 'ordercategories.code': "08 (P)" }, { 'ordercategories.code': "08" }] } },
                    { $lookup: { from: "referencevalues", localField: "patientorderitems.statusuid", foreignField: "_id", as: "ordsts" } },
                    { $unwind: { path: "$ordsts", preserveNullAndEmptyArrays: true } },
                    { $match: { 'ordsts.valuedescription': { $ne: 'Cancelled' } } },
                    { $lookup: { from: "frequencies", localField: "patientorderitems.frequencyuid", foreignField: "_id", as: "frequencies" } },
                    { $unwind: { path: "$frequencies", preserveNullAndEmptyArrays: true } },
                    { $addFields: { year: { $subtract: [{ $toInt: { $substr: [{ $add: [{ $year: { "date": new Date(), "timezone": "+07:00" } }, 543] }, 0, 4] }, }, { $toInt: { $substr: [{ $add: [{ $year: { "date": "$patients.dateofbirth", "timezone": "+07:00" } }, 543] }, 0, 4] } }] } } },
                    { $addFields: { month: { $cond: { if: { $lt: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 0] }, then: { $add: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 11] }, else: { $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] } } } } },
                    { $addFields: { date: { $subtract: [{ $toInt: { $dateToString: { format: "%d", date: new Date(), timezone: "+07:00", onNull: "-" } } }, { $toInt: { $dateToString: { format: "%d", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } } }] } } },
                    { $lookup: { from: "patientdietplans", localField: "patientvisituid", foreignField: "patientvisituid", as: "patientdietplans" } },
                    { $unwind: { path: "$patientdietplans", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "nametitle"
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            PatientNameEN: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                        }
                    },
                    {
                        $addFields: {
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            }
                        }
                    },
                    { $addFields: { NOW: { $toDate: { $dateToString: { format: "%Y-%m-%d", date: new Date(), timezone: "+07:00" } } } } },
                    { $addFields: { dateNOW: { $dayOfMonth: '$NOW' } } },
                    { $addFields: { DOB: { $toDate: { $dateToString: { format: "%Y-%m-%d", date: "$patients.dateofbirth", timezone: "+07:00" } } } } },
                    { $addFields: { dateDOB: { $dayOfMonth: '$DOB' } } },
                    {
                        $addFields: {
                            LD: {
                                $cond: {
                                    if: {
                                        $and: [
                                            { "$ne": [{ $month: '$NOW' }, 3] },
                                            { $gt: ['$dateDOB', '$dateNOW'] },
                                            {
                                                $or: [{ "$eq": [{ $month: '$DOB' }, 1] }, { "$eq": [{ $month: '$DOB' }, 3] }, { "$eq": [{ $month: '$DOB' }, 5] },
                                                    { "$eq": [{ $month: '$DOB' }, 7] }, { "$eq": [{ $month: '$DOB' }, 8] }, { "$eq": [{ $month: '$DOB' }, 10] },
                                                    { "$eq": [{ $month: '$DOB' }, 12] }]
                                            }
                                        ]
                                    },
                                    then: 31, else: {
                                        $cond: {
                                            if: {
                                                $and: [
                                                    { "$eq": [{ $month: '$NOW' }, 3] },
                                                    { $gt: ['$dateDOB', '$dateNOW'] },
                                                    { "$eq": [{ $toDate: { $concat: [{ $toString: { $year: '$NOW' } }, '-12-31'] } }, 365] }
                                                ]
                                            },
                                            then: 28, else: {
                                                $cond: {
                                                    if: {
                                                        $and: [
                                                            { "$eq": [{ $month: '$NOW' }, 3] },
                                                            { $gt: ['$dateDOB', '$dateNOW'] },
                                                            { "$eq": [{ $toDate: { $concat: [{ $toString: { $year: '$NOW' } }, '-12-31'] } }, 366] }
                                                        ]
                                                    },
                                                    then: 29, else: 30
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    { $addFields: { year0: { $subtract: [{ $year: '$NOW' }, { $year: "$DOB" }] } } },
                    { $addFields: { month0: { $subtract: [{ $month: '$NOW' }, { $month: "$DOB" }] } } },
                    { $addFields: { date0: { $subtract: [{ $dayOfMonth: '$NOW' }, { $dayOfMonth: "$DOB" }] } } },
                    { $addFields: { year1: '$year0' } },
                    { $addFields: { month1: { $cond: [{ $lt: ["$date0", 0] }, { $subtract: ["$month0", 1] }, "$month0"] }, } },
                    { $addFields: { date1: { $cond: [{ $lt: ["$date0", 0] }, { $add: ['$LD', "$date0"] }, "$date0"] } } },
                    { $addFields: { year2: { $cond: [{ $lt: ["$month1", 0] }, { $subtract: ["$year1", 1] }, "$year1"] } } },
                    { $addFields: { month2: { $cond: [{ $lt: ["$month1", 0] }, { $add: [12, "$month1"] }, "$month1"] } } },
                    { $addFields: { date2: '$date1' } },
                    {
                        $project: {
                            "results": {
                                "patientvisituid": "$patientvisituid",
                                "ordercate": "$ordercategories.code",
                                "visitend": "$patientvisits.enddate",
                                "HN": "$patients.mrn",
                                "Name": {
                                    $cond: {
                                        if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                        then: { $ifNull: [{ $ifNull: ["$PatientNameTH", "$PatientNameEN"] }, ""] },
                                        else: { $ifNull: ["$PatientNameEN", ""] }
                                    }
                                },
                                "Gender": { $ifNull: ["$gender.valuedescription", "-"] },
                                DOB: { $dateToString: { format: "%d/%m/%Y", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } },
                                DOBY: { $substr: [{ $add: [{ $year: { "date": "$patients.dateofbirth", "timezone": "+07:00" } }, 543] }, 0, 4], },
                                Age: { $concat: [{ $toString: '$year2' }, ' ปี ', { $toString: '$month2' }, ' เดือน ', { $toString: '$date2' }, ' วัน'] },
                                "Ward": { $ifNull: ["$wards.name", "-"] },
                                "Wardcode": { $ifNull: ["$wards.code", "-"] },
                                "Room": { $ifNull: ["$beds.name", "-"] },
                                "orderitemuid": "$patientorderitems.orderitemuid",
                                "orderitem": "$patientorderitems.orderitemname",
                                "frequency": { $ifNull: ["$frequencies.description", "-"] },
                                "orderqty": "$patientorderitems.quantity",
                                "ordernumber": "$ordernumber",
                                "orderdate": { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$orderdate", timezone: "+07:00", onNull: "-" } },
                                "orderstart": { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$patientorderitems.startdate", timezone: "+07:00", onNull: "-" } },
                                "orderstatusuid": "$ordsts.valuedescription",
                                "ordercomment": "$patientorderitems.comments",
                                "administrationinstruction": "$patientorderitems.administrationinstruction",
                                "ordernok": { $ifNull: ["$patientorderitems.isnokdiet", false] },
                                "EN": "$patientvisits.visitid",
                                "visitstatus": "$visitsts.valuedescription",
                                "Religioncode": "$religion.valuecode",
                                "Religion": "$religion.valuedescription",
                                "AdmitDate": { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$patientvisits.startdate", timezone: "+07:00", onNull: "-" } },
                                "dietplan": "$patientdietplans.prescribeddietuid",
                                "dietplandate": "$patientdietplans.modifiedat",
                            },
                        },
                    },
                    { $unwind: "$results" },
                    {
                        $group: {
                            _id: {
                                patientvisituid: "$results.patientvisituid",
                                "ordercate": "$results.ordercate",
                                "visitend": "$results.visitend",
                                "HN": "$results.HN",
                                "Name": "$results.Name",
                                "Gender": "$results.Gender",
                                DOB: "$results.DOB",
                                DOBY: "$results.DOBY",
                                "Age": "$results.Age",
                                "Ward": "$results.Ward",
                                "Wardcode": "$results.Wardcode",
                                "Room": "$results.Room",
                                "orderitemuid": "$results.orderitemuid",
                                "orderitem": "$results.orderitem",
                                "frequency": "$results.frequency",
                                "orderqty": "$results.orderqty",
                                "ordernumber": "$results.ordernumber",
                                "orderdate": "$results.orderdate",
                                "orderstart": "$results.orderstart",
                                "orderstatusuid": "$results.orderstatusuid",
                                "ordercomment": "$results.ordercomment",
                                "administrationinstruction": "$results.administrationinstruction",
                                "ordernok": "$results.ordernok",
                                "EN": "$results.EN",
                                "visitstatus": "$results.visitstatus",
                                "Religion": "$results.Religion",
                                "Religioncode": "$results.Religioncode",
                                "AdmitDate": "$results.AdmitDate",
                                "datefromto": "$results.datefromto",
                                "user": "$results.user",
                            },
                            "lastdietplandate": { "$last": "$results.dietplandate" },
                            "dietplan": { "$last": "$results.dietplan" },
                        }
                    },
                    {
                        $project: {
                            _id: {
                                patientvisituid: "$_id.patientvisituid",
                                "ordercate": "$_id.ordercate",
                                "visitend": "$_id.visitend",
                                "HN": "$_id.HN",
                                "Name": "$_id.Name",
                                "Gender": "$_id.Gender",
                                DOB: "$_id.DOB",
                                DOBY: "$_id.DOBY",
                                "Age": "$_id.Age",
                                "Ward": "$_id.Ward",
                                "Wardcode": "$_id.Wardcode",
                                "Room": "$_id.Room",
                                "orderitemuid": "$_id.orderitemuid",
                                "orderitem": "$_id.orderitem",
                                "frequency": "$_id.frequency",
                                "orderqty": "$_id.orderqty",
                                "ordernumber": "$_id.ordernumber",
                                "orderdate": "$_id.orderdate",
                                "orderstart": "$_id.orderstart",
                                "orderstatusuid": "$_id.orderstatusuid",
                                "ordercomment": "$_id.ordercomment",
                                "administrationinstruction": "$_id.administrationinstruction",
                                "ordernok": "$_id.ordernok",
                                "EN": "$_id.EN",
                                "visitstatus": "$_id.visitstatus",
                                "Religion": "$_id.Religion",
                                "Religioncode": "$_id.Religioncode",
                                "AdmitDate": "$_id.AdmitDate",
                                "datefromto": "$_id.datefromto",
                                "user": "$_id.user",
                                "lastdietplandate": "$lastdietplandate",
                                "dietplan": "$dietplan",
                            },
                        }
                    },
                    { $lookup: { from: "allergies", localField: "_id.patientvisituid", foreignField: "patientvisituid", as: "foodallergy" } },
                    { $unwind: { path: "$foodallergy", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$foodallergy.foodallergies", preserveNullAndEmptyArrays: true } },
                    { $lookup: { "from": "orderresultitems", "localField": "foodallergy.foodallergies.resultitemuid", "foreignField": "_id", "as": "orderresultitems" } },
                    { $unwind: { path: "$orderresultitems", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                patientvisituid: "$_id.patientvisituid",
                                "ordercate": "$_id.ordercate",
                                "visitend": "$_id.visitend",
                                "HN": "$_id.HN",
                                "Name": "$_id.Name",
                                "Gender": "$_id.Gender",
                                DOB: "$_id.DOB",
                                DOBY: "$_id.DOBY",
                                "Age": "$_id.Age",
                                "Ward": "$_id.Ward",
                                "Wardcode": "$_id.Wardcode",
                                "Room": "$_id.Room",
                                "orderitemuid": "$_id.orderitemuid",
                                "orderitem": "$_id.orderitem",
                                "frequency": "$_id.frequency",
                                "orderqty": "$_id.orderqty",
                                "ordernumber": "$_id.ordernumber",
                                "orderdate": "$_id.orderdate",
                                "orderstart": "$_id.orderstart",
                                "orderstatusuid": "$_id.orderstatusuid",
                                "ordercomment": "$_id.ordercomment",
                                "administrationinstruction": "$_id.administrationinstruction",
                                "ordernok": "$_id.ordernok",
                                "EN": "$_id.EN",
                                "visitstatus": "$_id.visitstatus",
                                "Religion": "$_id.Religion",
                                "Religioncode": "$_id.Religioncode",
                                "AdmitDate": "$_id.AdmitDate",
                                "datefromto": "$_id.datefromto",
                                "user": "$_id.user",
                                "lastdietplandate": "$_id.lastdietplandate",
                                "dietplan": "$_id.dietplan",
                            },
                            "foodallergy": { "$push": "$orderresultitems.name" },
                        }
                    },
                    {
                        $project: {
                            _id: {
                                patientvisituid: "$_id.patientvisituid",
                                "ordercate": "$_id.ordercate",
                                "visitend": "$_id.visitend",
                                "HN": "$_id.HN",
                                "Name": "$_id.Name",
                                "Gender": "$_id.Gender",
                                DOB: "$_id.DOB",
                                DOBY: "$_id.DOBY",
                                "Age": "$_id.Age",
                                "Ward": "$_id.Ward",
                                "Wardcode": "$_id.Wardcode",
                                "Room": "$_id.Room",
                                "orderitemuid": "$_id.orderitemuid",
                                "orderitem": "$_id.orderitem",
                                "frequency": "$_id.frequency",
                                "orderqty": "$_id.orderqty",
                                "ordernumber": "$_id.ordernumber",
                                "orderdate": "$_id.orderdate",
                                "orderstart": "$_id.orderstart",
                                "orderstatusuid": "$_id.orderstatusuid",
                                "ordercomment": "$_id.ordercomment",
                                "administrationinstruction": "$_id.administrationinstruction",
                                "ordernok": "$_id.ordernok",
                                "EN": "$_id.EN",
                                "visitstatus": "$_id.visitstatus",
                                "Religion": "$_id.Religion",
                                "Religioncode": "$_id.Religioncode",
                                "AdmitDate": "$_id.AdmitDate",
                                "datefromto": "$_id.datefromto",
                                "user": "$_id.user",
                                "lastdietplandate": "$_id.lastdietplandate",
                                "dietplan": "$_id.dietplan",
                                "foodallergy": "$foodallergy",
                            },
                        }
                    },
                    {
                        $addFields: {
                            foodallergy: {
                                $reduce: {
                                    input: "$_id.foodallergy", initialValue: "",
                                    in: { $cond: { if: { $eq: ["$$value", ""] }, then: "$$this", else: { $concat: ["$$value", " {replace} ", "$$this"] } } }
                                }
                            }
                        }
                    },
                    { $lookup: { from: "referencevalues", localField: "_id.dietplan", foreignField: "_id", as: "dietplandesc" } },
                    { $unwind: { path: "$dietplandesc", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                patientvisituid: "$_id.patientvisituid",
                                "ordercate": "$_id.ordercate",
                                "visitend": "$_id.visitend",
                                "HN": "$_id.HN",
                                "Name": "$_id.Name",
                                "Gender": "$_id.Gender",
                                DOB: "$_id.DOB",
                                DOBY: "$_id.DOBY",
                                "Age": "$_id.Age",
                                "Ward": "$_id.Ward",
                                "Wardcode": "$_id.Wardcode",
                                "Room": "$_id.Room",
                                "orderitemuid": "$_id.orderitemuid",
                                "orderitem": "$_id.orderitem",
                                "frequency": "$_id.frequency",
                                "orderqty": "$_id.orderqty",
                                "ordernumber": "$_id.ordernumber",
                                "orderdate": "$_id.orderdate",
                                "orderstart": "$_id.orderstart",
                                "orderstatusuid": "$_id.orderstatusuid",
                                "ordercomment": "$_id.ordercomment",
                                "administrationinstruction": "$_id.administrationinstruction",
                                "ordernok": "$_id.ordernok",
                                "EN": "$_id.EN",
                                "visitstatus": "$_id.visitstatus",
                                "Religion": "$_id.Religion",
                                "Religioncode": "$_id.Religioncode",
                                "AdmitDate": "$_id.AdmitDate",
                                "datefromto": "$_id.datefromto",
                                "user": "$_id.user",
                                "lastdietplandate": "$_id.lastdietplandate",
                                "foodallergy": "$foodallergy",
                            },
                            "dietplans": { "$push": "$dietplandesc.valuedescription" },
                        }
                    },
                    {
                        $addFields: {
                            dietplanss: {
                                $reduce: {
                                    input: "$dietplans", initialValue: "",
                                    in: { $cond: { if: { $eq: ["$$value", ""] }, then: "$$this", else: { $concat: ["$$value", " {replace} ", "$$this"] } } }
                                }
                            }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            patientvisituid: { $ifNull: ["$_id.patientvisituid", "-"] },
                            "ordercate": { $ifNull: ["$_id.ordercate", "-"] },
                            "visitend": { $ifNull: ["$_id.visitend", "-"] },
                            "HN": { $ifNull: ["$_id.HN", "-"] },
                            "Name": { $ifNull: ["$_id.Name", "-"] },
                            "Gender": { $ifNull: ["$_id.Gender", "-"] },
                            DOB: { $ifNull: ["$_id.DOB", "-"] },
                            DOBY: { $ifNull: ["$_id.DOBY", "-"] },
                            "Age": { $ifNull: ["$_id.Age", "-"] },
                            "Ward": { $ifNull: ["$_id.Ward", "-"] },
                            "Wardcode": { $ifNull: ["$_id.Wardcode", "-"] },
                            "Room": { $ifNull: ["$_id.Room", "-"] },
                            "orderitemuid": { $ifNull: ["$_id.orderitemuid", "-"] },
                            "orderitem": { $ifNull: ["$_id.orderitem", "-"] },
                            "frequency": { $ifNull: ["$_id.frequency", "-"] },
                            "orderqty": { $ifNull: ["$_id.orderqty", "-"] },
                            "ordernumber": { $ifNull: ["$_id.ordernumber", "-"] },
                            "orderdate": { $ifNull: ["$_id.orderdate", "-"] },
                            "orderstart": { $ifNull: ["$_id.orderstart", "-"] },
                            "orderstatusuid": { $ifNull: ["$_id.orderstatusuid", "-"] },
                            "ordercomment": { $ifNull: ["$_id.ordercomment", "-"] },
                            "administrationinstruction": { $ifNull: ["$_id.administrationinstruction", "-"] },
                            "ordernok": { $ifNull: ["$_id.ordernok", "-"] },
                            "EN": { $ifNull: ["$_id.EN", "-"] },
                            "visitstatus": { $ifNull: ["$_id.visitstatus", "-"] },
                            "Religion": { $ifNull: ["$_id.Religion", ""] },
                            "Religioncode": { $ifNull: ["$_id.Religioncode", "-"] },
                            "AdmitDate": { $ifNull: ["$_id.AdmitDate", "-"] },
                            "datefromto": { $ifNull: ["$_id.datefromto", "-"] },
                            "user": { $ifNull: ["$_id.user", "-"] },
                            "foodallergy": { $ifNull: ["$_id.foodallergy", "-"] },
                            "dietplan": { $ifNull: ["$dietplanss", "-"] },
                        }
                    },
                    {
                        $sort: { Ward: 1, Room: 1, frequency: 1 }
                    }
                ]).exec();
                result = resultpatientorder;
                for (let i = 0; i < result.length; i += 2) {
                    if (result[i + 1] === undefined)
                        result_last.push({
                            Age: result[i].Age,
                            Ward: result[i].Ward,
                            Room: result[i].Room,
                            HN: result[i].HN,
                            DOB: result[i].DOB,
                            DOBY: result[i].DOBY,
                            Name: result[i].Name,
                            orderitem: result[i].orderitem,
                            orderdate: result[i].orderdate,
                            ordercomment: result[i].ordercomment,
                            Religion: result[i].Religion,
                            frequency: result[i].frequency,
                            foodallergy: result[i].foodallergy,
                            administrationinstruction: result[i].administrationinstruction,
                            orderstart: result[i].orderstart
                        });
                    else {
                        result_last.push({
                            Age: result[i].Age,
                            Ward: result[i].Ward,
                            Room: result[i].Room,
                            HN: result[i].HN,
                            DOB: result[i].DOB,
                            DOBY: result[i].DOBY,
                            Name: result[i].Name,
                            orderitem: result[i].orderitem,
                            orderdate: result[i].orderdate,
                            ordercomment: result[i].ordercomment,
                            Religion: result[i].Religion,
                            frequency: result[i].frequency,
                            foodallergy: result[i].foodallergy,
                            administrationinstruction: result[i].administrationinstruction,
                            orderstart: result[i].orderstart,
                            Age2: result[i + 1].Age,
                            Ward2: result[i + 1].Ward,
                            Room2: result[i + 1].Room,
                            HN2: result[i + 1].HN,
                            DOB2: result[i + 1].DOB,
                            DOBY2: result[i + 1].DOBY,
                            Name2: result[i + 1].Name,
                            orderitem2: result[i + 1].orderitem,
                            orderdate2: result[i + 1].orderdate,
                            ordercomment2: result[i + 1].ordercomment,
                            Religion2: result[i + 1].Religion,
                            frequency2: result[i + 1].frequency,
                            foodallergy2: result[i + 1].foodallergy,
                            administrationinstruction2: result[i + 1].administrationinstruction,
                            orderstart2: result[i + 1].orderstart
                        });
                    }
                }
            }
            catch (error) {
                console.log('findRTCommon833 error:', error);
            }
            return result_last;
        });
    }
    findRTCommon834(req) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('patientvisituid = ' + req.patientvisituid);
            let result = [];
            try {
                const resultpatientorder = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            "patientvisituid": new mongoose_1.Types.ObjectId(req.patientvisituid),
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid)
                        }
                    },
                    { $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            'patientorderitems.ordercattype': 'MEDICINE',
                            'patientorderitems.quantity': { $gt: 0 },
                        }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorderitems.statusuid",
                            foreignField: "_id",
                            as: 'ordersts'
                        }
                    },
                    { $unwind: { path: "$ordersts", preserveNullAndEmptyArrays: true } },
                    { $match: { $and: [
                                { 'ordersts.valuedescription': { $ne: 'Cancelled' } },
                                { 'ordersts.valuedescription': { $ne: 'Checked In' } },
                                { 'ordersts.valuedescription': { $ne: 'Dispense Returned' } }
                            ] } },
                    { $lookup: { from: 'translations', localField: "patientorderitems.quantityUOM", foreignField: "reftypeuid", as: 'quantityUOM' } },
                    { $unwind: { path: "$quantityUOM", preserveNullAndEmptyArrays: true } },
                    { $match: { 'quantityUOM.orguid': new mongoose_1.Types.ObjectId(req.organisationuid) } },
                    { $unwind: { path: "$quantityUOM.translatedtexts", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'translations', localField: "patientorderitems.dosageUOM", foreignField: "reftypeuid", as: 'dosageUOM' } },
                    { $addFields: { "dosageUOM_translatedtexts_localtext": { $arrayElemAt: ["$dosageUOM.translatedtexts.localtext", -1] } } },
                    { $addFields: { "dosageUOM_description": { $arrayElemAt: ["$dosageUOM.description", -1] } } },
                    { $unwind: { path: "$dosageUOM_translatedtexts_localtext", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$dosageUOM_description", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'referencevalues', localField: "patientorderitems.dosageUOM", foreignField: "_id", as: 'dosageUOM1' } },
                    { $unwind: { path: "$dosageUOM1", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'translations', localField: "patientorderitems.routeuid", foreignField: "reftypeuid", as: 'routeuid' } },
                    { $unwind: { path: "$routeuid", preserveNullAndEmptyArrays: true } },
                    { $match: { 'routeuid.orguid': new mongoose_1.Types.ObjectId(req.organisationuid) } },
                    { $unwind: { path: "$routeuid.translatedtexts", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'referencevalues', localField: "patientorderitems.instructionuid", foreignField: "_id", as: 'instruction' } },
                    { $unwind: { path: "$instruction", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patientorderitems.durationuom",
                            foreignField: "_id",
                            as: 'durationUOM'
                        }
                    },
                    { $unwind: { path: "$durationUOM", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'frequencies', localField: "patientorderitems.frequencyuid", foreignField: "_id", as: 'dosagefrequency' } },
                    { $unwind: { path: "$dosagefrequency", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "drugmasters",
                            localField: "patientorderitems.drugmasteruid",
                            foreignField: "_id",
                            as: "drug"
                        }
                    },
                    { $unwind: { path: "$drug", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "drug.prescibeuomuid",
                            foreignField: "_id",
                            as: 'uom'
                        }
                    },
                    {
                        $unwind: { path: "$uom", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "allergies",
                            localField: "patientvisituid",
                            foreignField: "patientvisituid",
                            as: "allergies"
                        }
                    },
                    {
                        $unwind: { path: "$allergies", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patientvisits",
                            localField: "patientvisituid",
                            foreignField: "_id",
                            as: "patientvisits"
                        }
                    },
                    {
                        $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: 'nametitle'
                        }
                    },
                    {
                        $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: 'referencevalues',
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: 'localnametitle'
                        }
                    },
                    {
                        $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true }
                    },
                    { $addFields: { max_bedoccupancy: { $max: "$patientvisits.bedoccupancy._id" }, } },
                    { $unwind: { path: "$patientvisits.bedoccupancy", preserveNullAndEmptyArrays: true } },
                    { $addFields: { _id_bedoccupancy: { $cond: { if: { $eq: ['$max_bedoccupancy', null] }, then: null, else: '$patientvisits.bedoccupancy._id' } } } },
                    { $match: { $expr: { $and: [{ $eq: ['$_id_bedoccupancy', '$max_bedoccupancy'] }] } } },
                    {
                        $lookup: {
                            from: "wards",
                            localField: "patientvisits.bedoccupancy.warduid",
                            foreignField: "_id",
                            as: "wards"
                        }
                    },
                    {
                        $unwind: { path: "$wards", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "beds",
                            localField: "patientvisits.bedoccupancy.beduid",
                            foreignField: "_id",
                            as: "beds"
                        }
                    },
                    {
                        $unwind: { path: "$beds", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "patientorderitems.careprovideruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "users.defaultdepartment.uid",
                            foreignField: "_id",
                            as: "doctordepartment"
                        }
                    },
                    {
                        $unwind: { path: "$doctordepartment", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $unwind: { path: "$organisations.address", preserveNullAndEmptyArrays: false }
                    },
                    {
                        $lookup: {
                            from: "areas",
                            localField: "patients.address.areauid",
                            foreignField: "_id",
                            as: "area"
                        }
                    },
                    {
                        $unwind: { path: "$area", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "cities",
                            localField: "patients.address.cityuid",
                            foreignField: "_id",
                            as: "city"
                        }
                    },
                    {
                        $unwind: { path: "$city", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "states",
                            localField: "patients.address.stateuid",
                            foreignField: "_id",
                            as: "state"
                        }
                    },
                    {
                        $unwind: { path: "$state", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            visitjourneysuid: { $max: "$patientvisits.visitjourneys.departmentuid" },
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "visitjourneysuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            PatientNameEN: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                        }
                    },
                    {
                        $addFields: {
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            }
                        }
                    },
                    { $lookup: { from: 'referencevalues', localField: "ordertypeuid", foreignField: "_id", as: 'ordertype' } },
                    { $unwind: { path: "$ordertype", preserveNullAndEmptyArrays: true } },
                    { $addFields: { IO: { $substr: ["$patientvisits.visitid", 0, 1] } } },
                    {
                        $project: {
                            'Patientisanonymous': { $ifNull: ['$patients.isanonymous', ""] },
                            'PatientNameTitle': { $ifNull: ['$nametitle.valuedescription', ""] },
                            'PatientFirstName': { $ifNull: ['$patients.firstname', ""] },
                            'PatientMiddleName': { $ifNull: ['$patients.middlename', ""] },
                            'PatientLastName': { $ifNull: ['$patients.lastname', ""] },
                            'PatientLocalNameTitle': { $ifNull: ['$localnametitle.valuedescription', ""] },
                            'PatientLocalFirstName': { $ifNull: ['$patients.localfirstname', ""] },
                            'PatientLocalMiddleName': { $ifNull: ['$patients.localmiddlename', ""] },
                            'PatientLocalLastName': { $ifNull: ['$patients.locallastname', ""] },
                            'Ward': { $cond: { if: { $eq: [{ $substr: ["$patientvisits.visitid", 0, 1] }, "I"] }, then: { $ifNull: ["$wards.name", "-"] }, else: { $ifNull: ["$departments.name", "-"] } } },
                            'DoctorName': { $ifNull: ['$users.description', "-"] },
                            'DoctorLicense': { $ifNull: ['$users.licensenumber', "-"] },
                            'OrgName': { $ifNull: ["$organisations.name", "-"] },
                            'OrgNo': { $ifNull: ["$organisations.address.address", "-"] },
                            'OrgDistrict': { $ifNull: ["$organisations.address.area", "-"] },
                            'OrgPrefecture': { $ifNull: ["$organisations.address.city", "-"] },
                            'OrgProvince': { $ifNull: ["$organisations.address.state", "-"] },
                            'OrgWorkPhone': { $ifNull: ["$organisations.contact.workphone", "-"] },
                            _id: 0,
                            'OrderItemName': { $ifNull: ['$patientorderitems.orderitemname', "-"] },
                            'Instruction': 'ตามแพทย์สั่ง',
                            'Qty': { $ifNull: ['$patientorderitems.quantity', "-"] },
                            'Unit': { $ifNull: ['$uom.valuedescription', "-"] },
                            'narcotic': { $ifNull: ['$drug.isnarcoticdrug', "-"] },
                            'PatientName': {
                                $cond: {
                                    if: { $eq: [{ $ifNull: ["$preflang.valuedescription", "Thai"] }, "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$PatientNameTH", ""] }, ""] },
                                    else: { $ifNull: ["$PatientNameEN", ""] }
                                }
                            },
                            'AddressNo': { $ifNull: ["$patients.address.address", "-"] },
                            'AddressDistrict': { $ifNull: ["$area.name", "-"] },
                            'AddressPrefecture': { $ifNull: ["$city.name", "-"] },
                            'AddressProvince ': { $ifNull: ["$state.name", "-"] },
                            'AddressPhone ': { $ifNull: ["$patients.contact.mobilephone", "-"] },
                            'NationalID': { $ifNull: ['$patients.nationalid', "-"] },
                            'OrderDate': { $dateToString: { date: "$orderdate", timezone: "+07:00" } },
                            'HN': { $ifNull: ['$patients.mrn', "-"] },
                            'UserCode': { $ifNull: ['$users.code', "-"] },
                            'DoctorDepartment5': { $ifNull: ['$doctordepartment.name', "-"] },
                            'OrderNo': { $ifNull: ['$ordernumber', "-"] },
                            'Bed': { $ifNull: ["$beds.name", "-"] },
                            'EN': { $ifNull: ['$patientvisits.visitid', "-"] },
                            'PatientVisitUID': { $ifNull: ['$patientvisits._id', "-"] },
                            'PatientUID': { $ifNull: ['$patients._id', "-"] },
                            'ORDSTSDESC': { $ifNull: ["$ordersts.valuedescription", "-"] },
                            'DoctorDepartment': { $ifNull: ['$doctordepartment.code', "-"] },
                            'routeuidTH': { $ifNull: ["$routeuid.translatedtexts.localtext", ""] },
                            'routeuid': { $ifNull: ["$routeuid.description", ""] },
                            'instructionTH': { $ifNull: ["$instruction.aliasname", ""] },
                            'instruction': { $ifNull: ["$instruction.valuedescription", ""] },
                            'dosage': { $ifNull: ['$patientorderitems.dosage', ""] },
                            'dosageUOMTH': { $cond: { if: { $eq: ['$patientorderitems.dosageUOM', null] }, then: { $ifNull: ["$dosageUOM1.aliasname", ""] }, else: { $ifNull: ["$dosageUOM_translatedtexts_localtext", ""] } } },
                            'dosageUOM': { $cond: { if: { $eq: ['$patientorderitems.dosageUOM', null] }, then: { $ifNull: ["$dosageUOM1.valuedescription", ""] }, else: { $ifNull: ["$dosageUOM_description", ""] } } },
                            'dosagefrequencyTH': { $ifNull: ["$dosagefrequency.locallangdesc", ""] },
                            'dosagefrequency': { $ifNull: ["$dosagefrequency.description", ""] },
                            'orderdepartmentuid': { $ifNull: ['$patientorders.orderdepartmentuid', "-"] },
                            'quantityUOMTH': { $ifNull: ["$quantityUOM.translatedtexts.localtext", ""] },
                            'quantityUOM': { $ifNull: ["$quantityUOM.description", ""] },
                            'duration': { $ifNull: ['$patientorderitems.duration', ""] },
                            'durationUOMTH': { $ifNull: ["$durationUOM.locallanguagedesc", ""] },
                            'durationUOM': { $ifNull: ["$durationUOM.valuedescription", ""] },
                            'VisitDate': { $dateToString: { format: "%d/%m/%Y", date: "$patientvisits.startdate", timezone: "+07:00", onNull: "-" } },
                            'allergies': { $ifNull: [{ $arrayElemAt: ['$allergies.drugallergies.allergenname', 0] }, "-"] },
                            'ordertype': { $ifNull: ['$ordertype.valuedescription', ""] },
                            'IO': '$IO',
                            preflang: "$preflang.valuedescription",
                        }
                    },
                    {
                        $match: {
                            $or: [
                                { IO: 'O' }, { IO: 'E' }, { IO: 'H' },
                                { $and: [{ IO: 'I' }, { ordertype: 'DISCHARGE MEDICATION' }] }
                            ]
                        }
                    },
                ])
                    .exec();
                result = resultpatientorder;
            }
            catch (error) {
                console.log('findRTCommon834 error:', error);
            }
            return result;
        });
    }
    findRTCommon835(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let patientt = { $match: {} };
                try {
                    if (req.patientuid != '' && req.patientuid != null) {
                        patientt = {
                            $match: {
                                'patientuid': new mongoose_1.Types.ObjectId(req.patientuid),
                            }
                        };
                    }
                }
                catch (res) {
                    req.patientuid = '';
                }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientbills = yield this.patientbillsModel.aggregate([
                    patientt,
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "billdate": { $gte: new Date(req.fromdate), $lte: new Date(req.todate) },
                            'sequencenumber': { $regex: /C/ },
                            'statusflag': "A",
                            'iscancelled': false,
                            'isrefund': false,
                        }
                    },
                    { $lookup: { from: "tpas", localField: "tpauid", foreignField: "_id", as: "tpa" } },
                    { $unwind: { path: "$tpa", preserveNullAndEmptyArrays: true } },
                    { $match: { 'tpa.name': /Welfare/ } },
                    { $lookup: { from: "payoragreements", localField: "payoragreementuid", foreignField: "_id", as: "agreement" } },
                    { $unwind: { path: "$agreement", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'doctor0': { $arrayElemAt: ['$patientvisits.visitcareproviders.careprovideruid', 0] } } },
                    { $addFields: { visitcareproviders_index: { $indexOfArray: ['$patientvisits.visitcareproviders.isprimarycareprovider', true] } } },
                    { $addFields: { visitcareproviders_lookup: { $arrayElemAt: ["$patientvisits.visitcareproviders.careprovideruid", { $cond: { if: { $eq: ["$visitcareproviders_index", -1] }, then: null, else: "$visitcareproviders_index" } }] }, } },
                    { $addFields: { doctorfirst: { $cond: { if: { $eq: ["$visitcareproviders_lookup", null] }, then: '$doctor0', else: '$visitcareproviders_lookup' } } } },
                    { $lookup: { from: "users", localField: "doctorfirst", foreignField: "_id", as: "firstdoctor" } },
                    { $unwind: { path: "$firstdoctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $addFields: { year: { $subtract: [{ $toInt: { $substr: [{ $add: [{ $year: { "date": new Date(), "timezone": "+07:00" } }, 543] }, 0, 4] }, }, { $toInt: { $substr: [{ $add: [{ $year: { "date": "$patients.dateofbirth", "timezone": "+07:00" } }, 543] }, 0, 4] } }] } } },
                    { $addFields: { month: { $cond: { if: { $lt: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 0] }, then: { $add: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 11] }, else: { $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] } } } } },
                    { $addFields: { date: { $subtract: [{ $toInt: { $dateToString: { format: "%d", date: new Date(), timezone: "+07:00", onNull: "-" } } }, { $toInt: { $dateToString: { format: "%d", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } } }] } } },
                    { $lookup: { from: "referencevalues", localField: "patients.genderuid", foreignField: "_id", as: "gender" } },
                    { $unwind: { path: "$gender", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "diagnoses", localField: "patientvisituid", foreignField: "patientvisituid", as: "diagnoses" } },
                    { $addFields: { 'firstdiagnoses': { $arrayElemAt: ['$diagnoses', 0] } } },
                    { $unwind: { path: "$diagnoses", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'diagnosistext': { $ifNull: ['$diagnoses.diagnosistext', ""] } } },
                    { $addFields: { 'firstdiag': { $ifNull: [{ $arrayElemAt: ['$firstdiagnoses.diagnosis._id', 0] }, ""] } } },
                    { $unwind: { path: "$diagnoses.diagnosis", preserveNullAndEmptyArrays: true } },
                    { $addFields: { cd: { $cond: { if: { $eq: ["$diagnoses.createdat", { $ifNull: ['$diagnoses.diagnosis.createdat', "$diagnoses.createdat"] }] }, then: 'Y', else: 'N' } } } },
                    { $addFields: { 'diag_id': { $ifNull: ['$diagnoses.diagnosis._id', ""] } } },
                    { $addFields: { diagseq0: { $cond: { if: { $eq: ["$firstdiag", '$diag_id'] }, then: 'Y', else: 'N' } } } },
                    { $lookup: { from: "problems", localField: "diagnoses.diagnosis.problemuid", foreignField: "_id", as: "problems" } },
                    { $unwind: { path: "$problems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "diagnoses.diagnosis.careprovideruid", foreignField: "_id", as: "doctor" } },
                    { $unwind: { path: "$doctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "diagnoses.departmentuid", foreignField: "_id", as: "last_department" } },
                    { $unwind: { path: "$last_department", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "welfares", localField: "patients.nationalid", foreignField: "nationalid", as: "welfares" } },
                    { $unwind: { path: "$welfares", preserveNullAndEmptyArrays: true } },
                    { $match: { "welfares.orguid": new mongoose_1.Types.ObjectId(req.organisationuid), "welfares.plancode": { $ne: '9999' } } },
                    { $lookup: { from: "plangroups", localField: "welfares.plancode", foreignField: "groupcode", as: "plangroups" } },
                    { $unwind: { path: "$plangroups", preserveNullAndEmptyArrays: true } },
                    { $match: { "plangroups.orguid": new mongoose_1.Types.ObjectId(req.organisationuid), 'plangroups.activeto': null } },
                    { $unwind: { path: "$welfares.balanceamount", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "welfares", localField: "welfares.businessunitempid", foreignField: "businessunitempid", as: "employee" } },
                    { $addFields: { 'employeefirstname': { $arrayElemAt: ['$employee.firstname', 0] } } },
                    { $addFields: { 'employeelastname': { $arrayElemAt: ['$employee.lastname', 0] } } },
                    { $addFields: { 'doctorflag': { $arrayElemAt: ['$employee.doctorflag', 0] } } },
                    { $addFields: { NOW: { $toDate: { $dateToString: { format: "%Y-%m-%d", date: new Date(), timezone: "+07:00" } } } } },
                    { $addFields: { dateNOW: { $dayOfMonth: '$NOW' } } },
                    { $addFields: { DOB: { $toDate: { $dateToString: { format: "%Y-%m-%d", date: "$patients.dateofbirth", timezone: "+07:00" } } } } },
                    { $addFields: { dateDOB: { $dayOfMonth: '$DOB' } } },
                    { $lookup: { from: "welfareadjustmentrequests", localField: "patients.mrn", foreignField: "hospitalnumber", as: "welfareadjustmentrequests" } },
                    { $addFields: { adjamount: { $filter: { input: "$welfareadjustmentrequests", as: "welfareadjustmentrequests", cond: { $and: [
                                            { $gte: ["$$welfareadjustmentrequests.transactiondate", new Date(req.fromdate)] },
                                            { $lte: ["$$welfareadjustmentrequests.transactiondate", new Date(req.todate)] },
                                        ] }
                                } } } },
                    { $addFields: { adj: { $sum: '$adjamount.adjustmentamount' } } },
                    {
                        $addFields: {
                            LD: {
                                $cond: {
                                    if: {
                                        $and: [
                                            { "$ne": [{ $month: '$NOW' }, 3] },
                                            { $gt: ['$dateDOB', '$dateNOW'] },
                                            {
                                                $or: [{ "$eq": [{ $month: '$DOB' }, 1] }, { "$eq": [{ $month: '$DOB' }, 3] }, { "$eq": [{ $month: '$DOB' }, 5] },
                                                    { "$eq": [{ $month: '$DOB' }, 7] }, { "$eq": [{ $month: '$DOB' }, 8] }, { "$eq": [{ $month: '$DOB' }, 10] },
                                                    { "$eq": [{ $month: '$DOB' }, 12] }]
                                            }
                                        ]
                                    },
                                    then: 31, else: {
                                        $cond: {
                                            if: {
                                                $and: [
                                                    { "$eq": [{ $month: '$NOW' }, 3] },
                                                    { $gt: ['$dateDOB', '$dateNOW'] },
                                                    { "$eq": [{ $toDate: { $concat: [{ $toString: { $year: '$NOW' } }, '-12-31'] } }, 365] }
                                                ]
                                            },
                                            then: 28, else: {
                                                $cond: {
                                                    if: {
                                                        $and: [
                                                            { "$eq": [{ $month: '$NOW' }, 3] },
                                                            { $gt: ['$dateDOB', '$dateNOW'] },
                                                            { "$eq": [{ $toDate: { $concat: [{ $toString: { $year: '$NOW' } }, '-12-31'] } }, 366] }
                                                        ]
                                                    },
                                                    then: 29, else: 30
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    { $addFields: { year0: { $subtract: [{ $year: '$NOW' }, { $year: "$DOB" }] } } },
                    { $addFields: { month0: { $subtract: [{ $month: '$NOW' }, { $month: "$DOB" }] } } },
                    { $addFields: { date0: { $subtract: [{ $dayOfMonth: '$NOW' }, { $dayOfMonth: "$DOB" }] } } },
                    { $addFields: { year1: '$year0' } },
                    { $addFields: { month1: { $cond: [{ $lt: ["$date0", 0] }, { $subtract: ["$month0", 1] }, "$month0"] }, } },
                    { $addFields: { date1: { $cond: [{ $lt: ["$date0", 0] }, { $add: ['$LD', "$date0"] }, "$date0"] } } },
                    { $addFields: { year2: { $cond: [{ $lt: ["$month1", 0] }, { $subtract: ["$year1", 1] }, "$year1"] } } },
                    { $addFields: { month2: { $cond: [{ $lt: ["$month1", 0] }, { $add: [12, "$month1"] }, "$month1"] } } },
                    { $addFields: { date2: '$date1' } },
                    {
                        $project: {
                            'adj': '$adj',
                            'firstdiag': '$firstdiag',
                            'diag_id': '$diag_id',
                            'diagseq0': '$diagseq0',
                            'doctorflag': '$doctorflag',
                            "IO": { $substr: ["$patientvisits.visitid", 0, 1] },
                            admitdate: { $dateToString: { format: "%d/%m/%Y", date: "$patientvisits.startdate", timezone: "+07:00", onNull: "" } },
                            dischargedate: { $dateToString: { format: "%d/%m/%Y", date: "$patientvisits.medicaldischargedate", timezone: "+07:00", onNull: "" } },
                            HN: "$patients.mrn",
                            EN: '$patientvisits.visitid',
                            visitdate: "$patientvisits.startdate",
                            Document_Number: "$sequencenumber",
                            firstdoctor: "$firstdoctor.code",
                            Patient_Name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] }
                                        }
                                    },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] }
                                        }
                                    }
                                }
                            },
                            DOB: { $dateToString: { format: "%d/%m/%Y", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "" } },
                            Age: { $concat: [{ $toString: '$year2' }, ' Y ', { $toString: '$month2' }, ' M ', { $toString: '$date2' }, ' D'] },
                            Gender: { $ifNull: ["$gender.valuedescription", "Unknown"] },
                            DiagType: {
                                $cond: {
                                    if: { $eq: ["$diagnoses.diagnosis.isprimary", true] },
                                    then: 'Primary',
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$diagnoses.diagnosis.isunderlyingdiagnosis", true] },
                                            then: 'Underlying',
                                            else: 'Comorbidity'
                                        }
                                    }
                                }
                            },
                            diagnosistext: { $ifNull: ["$diagnosistext", ""] },
                            ICD10: { $ifNull: ["$problems.code", ""] },
                            ICD10desc: { $ifNull: ["$problems.name", ""] },
                            department: { $ifNull: ["$last_department.name", ""] },
                            Doctor: { $ifNull: ["$doctor.description", ""] },
                            relationship: { $cond: { if: { $eq: [{ $ifNull: ["$welfares.relationship", ""] }, "SELLF"] }, then: "Self", else: "Relative" } },
                            Employee_ID: { $concat: ["0", "$welfares.businessunitempid"] },
                            HCM_Plan_Group: { $ifNull: ["$welfares.plancode", ""] },
                            Payor: '$tpa.name',
                            Agreement: { $ifNull: ['$agreement.name', ""] },
                            Employee_Name: { $concat: [{ $ifNull: ["$employeefirstname", ""] }, " ", { $ifNull: ["$employeelastname", ""] }, " "] },
                            Amount: { $cond: { if: { $eq: ['$diagseq0', "Y"] }, then: "$totalbillamount", else: 0 } },
                            Limit: { $ifNull: ["$plangroups.limitamount", "0"] },
                            Balance: { $ifNull: ["$welfares.balanceamount.balance", "0"] },
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            cd: '$cd',
                        }
                    },
                    { $match: { doctorflag: 'N' } },
                ])
                    .exec();
                result = resultpatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon835 error:', error);
            }
            return result;
        });
    }
    findRTCommon836(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let patientt = { $match: {} };
                try {
                    if (req.patientuid != '' && req.patientuid != null) {
                        patientt = {
                            $match: {
                                'patientuid': new mongoose_1.Types.ObjectId(req.patientuid),
                            }
                        };
                    }
                }
                catch (res) {
                    req.patientuid = '';
                }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientbills = yield this.patientbillsModel.aggregate([
                    patientt,
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "billdate": { $gte: new Date(req.fromdate), $lte: new Date(req.todate) },
                            'sequencenumber': { $regex: /C/ },
                            'statusflag': "A",
                            'iscancelled': false,
                            'isrefund': false
                        }
                    },
                    { $lookup: { from: "tpas", localField: "tpauid", foreignField: "_id", as: "tpa" } },
                    { $unwind: { path: "$tpa", preserveNullAndEmptyArrays: true } },
                    { $match: { 'tpa.name': /Welfare/ } },
                    { $lookup: { from: "payoragreements", localField: "payoragreementuid", foreignField: "_id", as: "agreement" } },
                    { $unwind: { path: "$agreement", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'doctor0': { $arrayElemAt: ['$patientvisits.visitcareproviders.careprovideruid', 0] } } },
                    { $addFields: { visitcareproviders_index: { $indexOfArray: ['$patientvisits.visitcareproviders.isprimarycareprovider', true] } } },
                    { $addFields: { visitcareproviders_lookup: { $arrayElemAt: ["$patientvisits.visitcareproviders.careprovideruid", { $cond: { if: { $eq: ["$visitcareproviders_index", -1] }, then: null, else: "$visitcareproviders_index" } }] }, } },
                    { $addFields: { doctorfirst: { $cond: { if: { $eq: ["$visitcareproviders_lookup", null] }, then: '$doctor0', else: '$visitcareproviders_lookup' } } } },
                    { $lookup: { from: "users", localField: "doctorfirst", foreignField: "_id", as: "firstdoctor" } },
                    { $unwind: { path: "$firstdoctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $addFields: { year: { $subtract: [{ $toInt: { $substr: [{ $add: [{ $year: { "date": new Date(), "timezone": "+07:00" } }, 543] }, 0, 4] }, }, { $toInt: { $substr: [{ $add: [{ $year: { "date": "$patients.dateofbirth", "timezone": "+07:00" } }, 543] }, 0, 4] } }] } } },
                    { $addFields: { month: { $cond: { if: { $lt: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 0] }, then: { $add: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 11] }, else: { $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] } } } } },
                    { $addFields: { date: { $subtract: [{ $toInt: { $dateToString: { format: "%d", date: new Date(), timezone: "+07:00", onNull: "-" } } }, { $toInt: { $dateToString: { format: "%d", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } } }] } } },
                    { $lookup: { from: "referencevalues", localField: "patients.genderuid", foreignField: "_id", as: "gender" } },
                    { $unwind: { path: "$gender", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "diagnoses", localField: "patientvisituid", foreignField: "patientvisituid", as: "diagnoses" } },
                    { $addFields: { 'firstdiagnoses': { $arrayElemAt: ['$diagnoses', 0] } } },
                    { $unwind: { path: "$diagnoses", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'diagnosistext': { $ifNull: ['$diagnoses.diagnosistext', ""] } } },
                    { $addFields: { 'firstdiag': { $ifNull: [{ $arrayElemAt: ['$firstdiagnoses.diagnosis._id', 0] }, ""] } } },
                    { $unwind: { path: "$diagnoses.diagnosis", preserveNullAndEmptyArrays: true } },
                    { $addFields: { cd: { $cond: { if: { $eq: ["$diagnoses.createdat", { $ifNull: ['$diagnoses.diagnosis.createdat', "$diagnoses.createdat"] }] }, then: 'Y', else: 'N' } } } },
                    { $addFields: { 'diag_id': { $ifNull: ['$diagnoses.diagnosis._id', ""] } } },
                    { $addFields: { diagseq0: { $cond: { if: { $eq: ["$firstdiag", '$diag_id'] }, then: 'Y', else: 'N' } } } },
                    { $lookup: { from: "problems", localField: "diagnoses.diagnosis.problemuid", foreignField: "_id", as: "problems" } },
                    { $unwind: { path: "$problems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "diagnoses.diagnosis.careprovideruid", foreignField: "_id", as: "doctor" } },
                    { $unwind: { path: "$doctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "diagnoses.departmentuid", foreignField: "_id", as: "last_department" } },
                    { $unwind: { path: "$last_department", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "welfares", localField: "patients.nationalid", foreignField: "nationalid", as: "welfares" } },
                    { $unwind: { path: "$welfares", preserveNullAndEmptyArrays: true } },
                    { $match: { "welfares.orguid": new mongoose_1.Types.ObjectId(req.organisationuid), "welfares.plancode": { $ne: '9999' } } },
                    { $lookup: { from: "plangroups", localField: "welfares.plancode", foreignField: "groupcode", as: "plangroups" } },
                    { $unwind: { path: "$plangroups", preserveNullAndEmptyArrays: true } },
                    { $match: { "plangroups.orguid": new mongoose_1.Types.ObjectId(req.organisationuid), 'plangroups.activeto': null } },
                    { $unwind: { path: "$welfares.balanceamount", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "welfares", localField: "welfares.businessunitempid", foreignField: "businessunitempid", as: "employee" } },
                    { $addFields: { 'employeefirstname': { $arrayElemAt: ['$employee.firstname', 0] } } },
                    { $addFields: { 'employeelastname': { $arrayElemAt: ['$employee.lastname', 0] } } },
                    { $addFields: { 'doctorflag': { $arrayElemAt: ['$employee.doctorflag', 0] } } },
                    { $addFields: { NOW: { $toDate: { $dateToString: { format: "%Y-%m-%d", date: new Date(), timezone: "+07:00" } } } } },
                    { $addFields: { dateNOW: { $dayOfMonth: '$NOW' } } },
                    { $addFields: { DOB: { $toDate: { $dateToString: { format: "%Y-%m-%d", date: "$patients.dateofbirth", timezone: "+07:00" } } } } },
                    { $addFields: { dateDOB: { $dayOfMonth: '$DOB' } } },
                    { $lookup: { from: "welfareadjustmentrequests", localField: "patients.mrn", foreignField: "hospitalnumber", as: "welfareadjustmentrequests" } },
                    { $addFields: { adjamount: { $filter: { input: "$welfareadjustmentrequests", as: "welfareadjustmentrequests", cond: { $and: [
                                            { $gte: ["$$welfareadjustmentrequests.transactiondate", new Date(req.fromdate)] },
                                            { $lte: ["$$welfareadjustmentrequests.transactiondate", new Date(req.todate)] },
                                        ] }
                                } } } },
                    { $addFields: { adj: { $sum: '$adjamount.adjustmentamount' } } },
                    {
                        $addFields: {
                            LD: {
                                $cond: {
                                    if: {
                                        $and: [
                                            { "$ne": [{ $month: '$NOW' }, 3] },
                                            { $gt: ['$dateDOB', '$dateNOW'] },
                                            {
                                                $or: [{ "$eq": [{ $month: '$DOB' }, 1] }, { "$eq": [{ $month: '$DOB' }, 3] }, { "$eq": [{ $month: '$DOB' }, 5] },
                                                    { "$eq": [{ $month: '$DOB' }, 7] }, { "$eq": [{ $month: '$DOB' }, 8] }, { "$eq": [{ $month: '$DOB' }, 10] },
                                                    { "$eq": [{ $month: '$DOB' }, 12] }]
                                            }
                                        ]
                                    },
                                    then: 31, else: {
                                        $cond: {
                                            if: {
                                                $and: [
                                                    { "$eq": [{ $month: '$NOW' }, 3] },
                                                    { $gt: ['$dateDOB', '$dateNOW'] },
                                                    { "$eq": [{ $toDate: { $concat: [{ $toString: { $year: '$NOW' } }, '-12-31'] } }, 365] }
                                                ]
                                            },
                                            then: 28, else: {
                                                $cond: {
                                                    if: {
                                                        $and: [
                                                            { "$eq": [{ $month: '$NOW' }, 3] },
                                                            { $gt: ['$dateDOB', '$dateNOW'] },
                                                            { "$eq": [{ $toDate: { $concat: [{ $toString: { $year: '$NOW' } }, '-12-31'] } }, 366] }
                                                        ]
                                                    },
                                                    then: 29, else: 30
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    { $addFields: { year0: { $subtract: [{ $year: '$NOW' }, { $year: "$DOB" }] } } },
                    { $addFields: { month0: { $subtract: [{ $month: '$NOW' }, { $month: "$DOB" }] } } },
                    { $addFields: { date0: { $subtract: [{ $dayOfMonth: '$NOW' }, { $dayOfMonth: "$DOB" }] } } },
                    { $addFields: { year1: '$year0' } },
                    { $addFields: { month1: { $cond: [{ $lt: ["$date0", 0] }, { $subtract: ["$month0", 1] }, "$month0"] }, } },
                    { $addFields: { date1: { $cond: [{ $lt: ["$date0", 0] }, { $add: ['$LD', "$date0"] }, "$date0"] } } },
                    { $addFields: { year2: { $cond: [{ $lt: ["$month1", 0] }, { $subtract: ["$year1", 1] }, "$year1"] } } },
                    { $addFields: { month2: { $cond: [{ $lt: ["$month1", 0] }, { $add: [12, "$month1"] }, "$month1"] } } },
                    { $addFields: { date2: '$date1' } },
                    {
                        $project: {
                            'adj': '$adj',
                            'firstdiag': '$firstdiag',
                            'diag_id': '$diag_id',
                            'diagseq0': '$diagseq0',
                            'doctorflag': '$doctorflag',
                            "IO": { $substr: ["$patientvisits.visitid", 0, 1] },
                            admitdate: { $dateToString: { format: "%d/%m/%Y", date: "$patientvisits.startdate", timezone: "+07:00", onNull: "" } },
                            dischargedate: { $dateToString: { format: "%d/%m/%Y", date: "$patientvisits.medicaldischargedate", timezone: "+07:00", onNull: "" } },
                            HN: "$patients.mrn",
                            EN: '$patientvisits.visitid',
                            visitdate: "$patientvisits.startdate",
                            Document_Number: "$sequencenumber",
                            firstdoctor: "$firstdoctor.code",
                            Patient_Name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] }
                                        }
                                    },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] }
                                        }
                                    }
                                }
                            },
                            DOB: { $dateToString: { format: "%d/%m/%Y", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "" } },
                            Age: { $concat: [{ $toString: '$year2' }, ' Y ', { $toString: '$month2' }, ' M ', { $toString: '$date2' }, ' D'] },
                            Gender: { $ifNull: ["$gender.valuedescription", "Unknown"] },
                            DiagType: {
                                $cond: {
                                    if: { $eq: ["$diagnoses.diagnosis.isprimary", true] },
                                    then: 'Primary',
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$diagnoses.diagnosis.isunderlyingdiagnosis", true] },
                                            then: 'Underlying',
                                            else: 'Comorbidity'
                                        }
                                    }
                                }
                            },
                            diagnosistext: { $ifNull: ["$diagnosistext", ""] },
                            ICD10: { $ifNull: ["$problems.code", ""] },
                            ICD10desc: { $ifNull: ["$problems.name", ""] },
                            department: { $ifNull: ["$last_department.name", ""] },
                            Doctor: { $ifNull: ["$doctor.description", ""] },
                            relationship: { $cond: { if: { $eq: [{ $ifNull: ["$welfares.relationship", ""] }, "SELLF"] }, then: "Self", else: "Relative" } },
                            Employee_ID: { $concat: ["0", "$welfares.businessunitempid"] },
                            HCM_Plan_Group: { $ifNull: ["$welfares.plancode", ""] },
                            Payor: '$tpa.name',
                            Agreement: { $ifNull: ['$agreement.name', ""] },
                            Employee_Name: { $concat: [{ $ifNull: ["$employeefirstname", ""] }, " ", { $ifNull: ["$employeelastname", ""] }, " "] },
                            Amount: { $cond: { if: { $eq: ['$diagseq0', "Y"] }, then: "$totalbillamount", else: 0 } },
                            Limit: { $ifNull: ["$plangroups.limitamount", "0"] },
                            Balance: { $ifNull: ["$welfares.balanceamount.balance", "0"] },
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            cd: '$cd',
                        }
                    },
                    { $match: { doctorflag: 'Y' } },
                ])
                    .exec();
                result = resultpatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon836 error:', error);
            }
            return result;
        });
    }
    findRTCommon837(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisit = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid), 'statusflag': "A", "visitid": { $not: /^I/ },
                            'startdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                        }
                    },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'firstdepartment': { $arrayElemAt: ['$visitjourneys.departmentuid', 0] } } },
                    { $lookup: { from: "departments", localField: "firstdepartment", foreignField: "_id", as: "firstdepartment" } },
                    { $unwind: { path: "$firstdepartment", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$visitjourneys", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "visitjourneys.statusuid", foreignField: "_id", as: "visitstatuss" } },
                    { $unwind: { path: "$visitstatuss", preserveNullAndEmptyArrays: true } },
                    { $match: { "visitstatuss.valuedescription": { $in: ['Registered', 'Arrived', 'Triaged', 'Screening Completed', 'Consultation Started', 'Consultation Completed', 'Medical Discharge', 'Billing Inprogress', 'Financial Discharge'] } } },
                    { $addFields: { Registered: { $cond: { if: { $eq: ['$visitstatuss.valuedescription', 'Registered'] }, then: '$visitjourneys.modifiedat', else: null } } } },
                    { $addFields: { Arrived: { $cond: { if: { $eq: ['$visitstatuss.valuedescription', 'Arrived'] }, then: '$visitjourneys.modifiedat', else: null } } } },
                    { $addFields: { Triaged: { $cond: { if: { $eq: ['$visitstatuss.valuedescription', 'Triaged'] }, then: '$visitjourneys.modifiedat', else: null } } } },
                    { $addFields: { ScreeningCompleted: { $cond: { if: { $eq: ['$visitstatuss.valuedescription', 'Screening Completed'] }, then: '$visitjourneys.modifiedat', else: null } } } },
                    { $addFields: { ConsultationStarted: { $cond: { if: { $eq: ['$visitstatuss.valuedescription', 'Consultation Started'] }, then: '$visitjourneys.modifiedat', else: null } } } },
                    { $addFields: { ConsultationCompleted: { $cond: { if: { $eq: ['$visitstatuss.valuedescription', 'Consultation Completed'] }, then: '$visitjourneys.modifiedat', else: null } } } },
                    { $addFields: { MedicalDischarge: { $cond: { if: { $eq: ['$visitstatuss.valuedescription', 'Medical Discharge'] }, then: '$visitjourneys.modifiedat', else: null } } } },
                    { $addFields: { BillingInprogress: { $cond: { if: { $eq: ['$visitstatuss.valuedescription', 'Billing Inprogress'] }, then: '$visitjourneys.modifiedat', else: null } } } },
                    { $addFields: { FinancialDischarge: { $cond: { if: { $eq: ['$visitstatuss.valuedescription', 'Financial Discharge'] }, then: '$visitjourneys.modifiedat', else: null } } } },
                    {
                        $group: {
                            _id: {
                                title_name: { $cond: { if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $ifNull: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, ""] }, else: { $ifNull: ["$nametitle.valuedescription", ""] } } },
                                first_name: { $cond: { if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous", else: { $cond: { if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $ifNull: ["$patients.localfirstname", ""] }, else: { $ifNull: ["$patients.firstname", ""] } } } } },
                                last_name: { $cond: { if: { $eq: ["$patients.isanonymous", true] }, then: "", else: { $cond: { if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $ifNull: ["$patients.locallastname", ""] }, else: { $ifNull: ["$patients.lastname", ""] } } } } },
                                mrn: '$patients.mrn',
                                visitid: '$visitid',
                                firstdepartment: '$firstdepartment.name',
                                startdate: '$startdate',
                            },
                            Registered: { $min: '$Registered' },
                            Arrived: { $min: '$Arrived' },
                            Triaged: { $min: '$Triaged' },
                            ScreeningCompleted: { $min: '$ScreeningCompleted' },
                            ConsultationStarted: { $min: '$ConsultationStarted' },
                            ConsultationCompleted: { $max: '$ConsultationCompleted' },
                            MedicalDischarge: { $max: '$MedicalDischarge' },
                            BillingInprogress: { $max: '$BillingInprogress' },
                            FinancialDischarge: { $max: '$FinancialDischarge' }
                        }
                    },
                    {
                        $project: {
                            _id: 0,
                            HN: "$_id.mrn",
                            TitleName: '$_id.title_name',
                            FirstName: '$_id.first_name',
                            LastName: '$_id.last_name',
                            EN: '$_id.visitid',
                            Department: '$_id.firstdepartment',
                            Start_Date: { $dateToString: { format: "%d/%m/%Y %H:%M:%S", date: "$_id.startdate", timezone: "+07:00", onNull: null } },
                            Registered: { $dateToString: { format: "%H:%M", date: "$Registered", timezone: "+07:00", onNull: null } },
                            Arrived: { $dateToString: { format: "%H:%M", date: "$Arrived", timezone: "+07:00", onNull: null } },
                            Triaged: { $dateToString: { format: "%H:%M", date: "$Triaged", timezone: "+07:00", onNull: null } },
                            ScreeningCompleted: { $dateToString: { format: "%H:%M", date: "$ScreeningCompleted", timezone: "+07:00", onNull: null } },
                            ConsultationStarted: { $dateToString: { format: "%H:%M", date: "$ConsultationStarted", timezone: "+07:00", onNull: null } },
                            ConsultationCompleted: { $dateToString: { format: "%H:%M", date: "$ConsultationCompleted", timezone: "+07:00", onNull: null } },
                            MedicalDischarge: { $dateToString: { format: "%H:%M", date: "$MedicalDischarge", timezone: "+07:00", onNull: null } },
                            BillingInprogress: { $dateToString: { format: "%H:%M", date: "$BillingInprogress", timezone: "+07:00", onNull: null } },
                            FinancialDischarge: { $dateToString: { format: "%H:%M", date: "$FinancialDischarge", timezone: "+07:00", onNull: null } },
                            AR: { $ifNull: [{ $trunc: { $divide: [{ $subtract: ["$Arrived", "$Registered"] }, 1000 * 60] } }, 0] },
                            TA: { $ifNull: [{ $trunc: { $divide: [{ $subtract: ["$Triaged", "$Arrived"] }, 1000 * 60] } }, 0] },
                            ET: { $ifNull: [{ $trunc: { $divide: [{ $subtract: ["$ScreeningCompleted", "$Triaged"] }, 1000 * 60] } }, 0] },
                            SE: { $ifNull: [{ $trunc: { $divide: [{ $subtract: ["$ConsultationStarted", "$ScreeningCompleted"] }, 1000 * 60] } }, 0] },
                            CS: { $ifNull: [{ $trunc: { $divide: [{ $subtract: ["$ConsultationCompleted", "$ConsultationStarted"] }, 1000 * 60] } }, 0] },
                            MC: { $ifNull: [{ $trunc: { $divide: [{ $subtract: ["$MedicalDischarge", "$ConsultationCompleted"] }, 1000 * 60] } }, 0] },
                            MS: { $ifNull: [{ $trunc: { $divide: [{ $subtract: ["$MedicalDischarge", "$ConsultationStarted"] }, 1000 * 60] } }, 0] },
                            BM: { $ifNull: [{ $trunc: { $divide: [{ $subtract: ["$BillingInprogress", "$MedicalDischarge"] }, 1000 * 60] } }, 0] },
                            FB: { $ifNull: [{ $trunc: { $divide: [{ $subtract: ["$FinancialDischarge", "$BillingInprogress"] }, 1000 * 60] } }, 0] },
                            ALL: { $ifNull: [{ $trunc: { $divide: [{ $subtract: ["$FinancialDischarge", "$_id.startdate"] }, 1000 * 60] } }, 0] },
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    },
                ])
                    .exec();
                result = resultpatientvisit;
            }
            catch (error) {
                this.logger.error('findRTCommon837 error:', error);
            }
            return result;
        });
    }
    findRTCommon839(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisits = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            'orderdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }, 'statusflag': "A"
                        }
                    },
                    { $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: false } },
                    { $lookup: { from: "referencevalues", localField: "patientorderitems.statusuid", foreignField: "_id", as: "referencevalues" } },
                    { $match: { 'referencevalues.valuedescription': { $ne: 'Cancelled' } } },
                    { $lookup: { from: 'orderitems', localField: "patientorderitems.orderitemuid", foreignField: "_id", as: 'orderitems' } },
                    { $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'referencevalues', localField: "orderitems.orderiteminstructions.instructiontypeuid", foreignField: "_id", as: 'referenceLASA' } },
                    { $addFields: { lasa: { $indexOfArray: ['$referenceLASA.valuedescription', 'LASA'] } } },
                    { $match: { $expr: { $gt: ['$lasa', -1] } } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            orgname: { $ifNull: ["$organisations.name", "-"] },
                            orderitemcode: '$orderitems.code', orderitemname: '$orderitems.name',
                            ipdbill: { $cond: { if: { $eq: [{ $substr: ["$ordernumber", 0, 1] }, "I"] }, then: '$ordernumber', else: "" } },
                            opdbill: { $cond: { if: { $ne: [{ $substr: ["$ordernumber", 0, 1] }, "I"] }, then: '$ordernumber', else: "" } },
                            ipdqty: { $cond: { if: { $eq: [{ $substr: ["$ordernumber", 0, 1] }, "I"] }, then: 1, else: 0 } },
                            opdqty: { $cond: { if: { $ne: [{ $substr: ["$ordernumber", 0, 1] }, "I"] }, then: 1, else: 0 } },
                            totalqty: { $cond: { if: { $ne: [{ $substr: ["$ordernumber", 0, 1] }, "I"] }, then: 1, else: 1 } },
                            ordernumber: '$ordernumber',
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    },
                    {
                        $group: {
                            _id: { orgname: '$orgname', orderitemcode: '$orderitemcode', orderitemname: '$orderitemname', },
                            ipdqty: { $sum: '$ipdqty' }, opdqty: { $sum: '$opdqty' }, totalqty: { $sum: '$totalqty' }
                        }
                    },
                    {
                        $project: {
                            orgname: '$_id.orgname', orderitemcode: '$_id.orderitemcode', orderitemname: '$_id.orderitemname', ipdqty: '$ipdqty', opdqty: '$opdqty', totalqty: '$totalqty', user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    },
                    { $sort: { orderitemcode: 1, ordernumber: 1 } },
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon839 error:', error);
            }
            return result;
        });
    }
    findRTCommon840(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            'startdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }, 'statusflag': "A"
                        }
                    },
                    { $addFields: { 'firstvisittypeuid': { $arrayElemAt: ['$visitcareproviders.visittypeuid', 0] } } },
                    { $lookup: { from: "referencevalues", localField: "firstvisittypeuid", foreignField: "_id", as: "visittype" } },
                    { $unwind: { path: "$visittype", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'firstdepartmentuid': { $arrayElemAt: ['$visitjourneys.departmentuid', 0] } } },
                    { $match: { "firstdepartmentuid": { $ne: null } } },
                    { $unwind: { path: "$visitjourneys", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                orgname: { $ifNull: ["$organisations.name", ""] },
                                firstdepartmentuid: '$firstdepartmentuid',
                                departmentuid: '$visitjourneys.departmentuid',
                                visitid: '$visitid',
                                visittype: "$visittype.valuedescription",
                                visituid: '$_id',
                                HN: '$patients.mrn',
                            }
                        }
                    },
                    {
                        $project: {
                            orgname: '$_id.orgname',
                            HN: '$_id.HN',
                            firstdepartmentuid: '$_id.firstdepartmentuid',
                            departmentuid: '$_id.departmentuid',
                            visitid: '$_id.visitid',
                            visittype: '$_id.visittype',
                            visituid: '$_id.visituid',
                        }
                    },
                    { $addFields: { ET: { $substr: ['$visitid', 0, 1] } } },
                    { $addFields: { firstdepartmentflag: { $cond: { if: { $eq: ["$departmentuid", '$firstdepartmentuid'] }, then: 'Y', else: 'N' } } } },
                    { $lookup: { from: "departments", localField: "departmentuid", foreignField: "_id", as: "department" } },
                    { $unwind: { path: "$department", preserveNullAndEmptyArrays: true } },
                    { $match: { "department.name": { $ne: 'Registration' } } },
                    { $lookup: { from: "departments", localField: "firstdepartmentuid", foreignField: "_id", as: "firstdepartment" } },
                    { $unwind: { path: "$firstdepartment", preserveNullAndEmptyArrays: true } },
                    { $addFields: { E: { $cond: { if: { $and: [{ $eq: ['$ET', "E"] }, { $eq: ['$firstdepartmentflag', "Y"] },] }, then: 1, else: 0 } } } },
                    { $addFields: { O: { $cond: { if: { $or: [
                                            { $and: [{ $eq: ['$ET', "O"] }, { $eq: ['$firstdepartmentflag', "Y"] },] },
                                            { $and: [{ $eq: ['$ET', "H"] }, { $eq: ['$firstdepartmentflag', "Y"] }, { $and: [{ $ne: ['$visittype', "Health Promotion"] }, { $ne: ['$visittype', "Buy Medicine without see doctor"] },] }] }
                                        ] }, then: 1, else: 0 } } } },
                    { $addFields: { H: { $cond: { if: { $and: [{ $eq: ['$ET', "H"] }, { $eq: ['$firstdepartmentflag', "Y"] }, { $or: [{ $eq: ['$visittype', "Health Promotion"] }, { $eq: ['$visittype', "Buy Medicine without see doctor"] },] }] }, then: 1, else: 0 } } } },
                    { $addFields: { H1: { $cond: { if: { $and: [{ $eq: ['$ET', "H"] }, { $eq: ['$firstdepartmentflag', "Y"] }, { $eq: ['$visittype', "Health Promotion"] }] }, then: 1, else: 0 } } } },
                    { $addFields: { H2: { $cond: { if: { $and: [{ $eq: ['$ET', "H"] }, { $eq: ['$firstdepartmentflag', "Y"] }, { $eq: ['$visittype', "Buy Medicine without see doctor"] }] }, then: 1, else: 0 } } } },
                    { $addFields: { I: { $cond: { if: { $and: [{ $eq: ['$ET', "I"] }, { $eq: ['$firstdepartmentflag', "Y"] },] }, then: 1, else: 0 } } } },
                    { $addFields: { C: { $cond: { if: { $eq: ['$firstdepartmentflag', "N"] }, then: 1, else: 0 } } } },
                    { $addFields: { entype: { $cond: { if: { $eq: ['$E', 1] }, then: "E", else: { $cond: { if: { $eq: ['$O', 1] }, then: "O", else: { $cond: { if: { $eq: ['$H', 1] }, then: "H", else: { $cond: { if: { $eq: ['$I', 1] }, then: "I", else: { $cond: { if: { $eq: ['$C', 1] }, then: "C", else: "" } }
                                                        } }
                                                } }
                                        } }
                                } }
                        } },
                    {
                        $project: {
                            orgname: '$orgname',
                            firstdepartmentflag: '$firstdepartmentflag',
                            department: '$department.name',
                            visitid: '$visitid',
                            visittype: { $ifNull: ['$visittype', ""] },
                            entype: '$entype',
                            HN: '$HN',
                            E: '$E',
                            O: '$O',
                            H: '$H',
                            H1: '$H1',
                            H2: '$H2',
                            I: '$I',
                            C: '$C',
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            dpt: { $substr: ['$department.name', 0, 7] },
                        }
                    },
                    {
                        $match: {
                            $or: [
                                { "dpt": { $ne: 'Cashier' } },
                                { $and: [{ "dpt": { $eq: 'Cashier' } }, { "entype": { $ne: 'C' } }] },
                            ]
                        }
                    },
                    { $sort: { 'visitid': 1, firstdepartmentflag: -1 } }
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon840 error:', error);
            }
            return result;
        });
    }
    findRTCommon841(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            'startdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }, 'statusflag': "A"
                        }
                    },
                    { $addFields: { 'firstvisittypeuid': { $arrayElemAt: ['$visitcareproviders.visittypeuid', 0] } } },
                    { $lookup: { from: "referencevalues", localField: "firstvisittypeuid", foreignField: "_id", as: "visittype" } },
                    { $unwind: { path: "$visittype", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'firstdepartmentuid': { $arrayElemAt: ['$visitjourneys.departmentuid', 0] } } },
                    { $match: { "firstdepartmentuid": { $ne: null } } },
                    { $unwind: { path: "$visitjourneys", preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                orgname: { $ifNull: ["$organisations.name", ""] },
                                firstdepartmentuid: '$firstdepartmentuid',
                                departmentuid: '$visitjourneys.departmentuid',
                                visitid: '$visitid',
                                visittype: "$visittype.valuedescription",
                                visituid: '$_id',
                                HN: '$patients.mrn',
                            }
                        }
                    },
                    {
                        $project: {
                            orgname: '$_id.orgname',
                            HN: '$_id.HN',
                            firstdepartmentuid: '$_id.firstdepartmentuid',
                            departmentuid: '$_id.departmentuid',
                            visitid: '$_id.visitid',
                            visittype: '$_id.visittype',
                            visituid: '$_id.visituid',
                        }
                    },
                    { $addFields: { ET: { $substr: ['$visitid', 0, 1] } } },
                    { $addFields: { firstdepartmentflag: { $cond: { if: { $eq: ["$departmentuid", '$firstdepartmentuid'] }, then: 'Y', else: 'N' } } } },
                    { $lookup: { from: "departments", localField: "departmentuid", foreignField: "_id", as: "department" } },
                    { $unwind: { path: "$department", preserveNullAndEmptyArrays: true } },
                    { $match: { "department.name": { $ne: 'Registration' } } },
                    { $lookup: { from: "departments", localField: "firstdepartmentuid", foreignField: "_id", as: "firstdepartment" } },
                    { $unwind: { path: "$firstdepartment", preserveNullAndEmptyArrays: true } },
                    { $addFields: { E: { $cond: { if: { $and: [{ $eq: ['$ET', "E"] }, { $eq: ['$firstdepartmentflag', "Y"] },] }, then: 1, else: 0 } } } },
                    { $addFields: { O: { $cond: { if: { $or: [
                                            { $and: [{ $eq: ['$ET', "O"] }, { $eq: ['$firstdepartmentflag', "Y"] },] },
                                            { $and: [{ $eq: ['$ET', "H"] }, { $eq: ['$firstdepartmentflag', "Y"] }, { $and: [{ $ne: ['$visittype', "Health Promotion"] }, { $ne: ['$visittype', "Buy Medicine without see doctor"] },] }] }
                                        ] }, then: 1, else: 0 } } } },
                    { $addFields: { H: { $cond: { if: { $and: [{ $eq: ['$ET', "H"] }, { $eq: ['$firstdepartmentflag', "Y"] }, { $or: [{ $eq: ['$visittype', "Health Promotion"] }, { $eq: ['$visittype', "Buy Medicine without see doctor"] },] }] }, then: 1, else: 0 } } } },
                    { $addFields: { H1: { $cond: { if: { $and: [{ $eq: ['$ET', "H"] }, { $eq: ['$firstdepartmentflag', "Y"] }, { $eq: ['$visittype', "Health Promotion"] }] }, then: 1, else: 0 } } } },
                    { $addFields: { H2: { $cond: { if: { $and: [{ $eq: ['$ET', "H"] }, { $eq: ['$firstdepartmentflag', "Y"] }, { $eq: ['$visittype', "Buy Medicine without see doctor"] }] }, then: 1, else: 0 } } } },
                    { $addFields: { I: { $cond: { if: { $and: [{ $eq: ['$ET', "I"] }, { $eq: ['$firstdepartmentflag', "Y"] },] }, then: 1, else: 0 } } } },
                    { $addFields: { C: { $cond: { if: { $eq: ['$firstdepartmentflag', "N"] }, then: 1, else: 0 } } } },
                    { $addFields: { entype: { $cond: { if: { $eq: ['$E', 1] }, then: "E", else: { $cond: { if: { $eq: ['$O', 1] }, then: "O", else: { $cond: { if: { $eq: ['$H1', 1] }, then: "H1", else: { $cond: { if: { $eq: ['$I', 1] }, then: "I", else: { $cond: { if: { $eq: ['$C', 1] }, then: "C", else: { $cond: { if: { $eq: ['$H2', 1] }, then: "H2", else: "" } }
                                                                } }
                                                        } }
                                                } }
                                        } }
                                } }
                        } },
                    {
                        $project: {
                            orgname: '$orgname',
                            firstdepartmentflag: '$firstdepartmentflag',
                            department: '$department.name',
                            visitid: '$visitid',
                            visittype: { $ifNull: ['$visittype', ""] },
                            entype: '$entype',
                            HN: '$HN',
                            E: '$E',
                            O: '$O',
                            H: '$H',
                            H1: '$H1',
                            H2: '$H2',
                            I: '$I',
                            C: '$C',
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            dpt: { $substr: ['$department.name', 0, 7] },
                        }
                    },
                    {
                        $match: {
                            $or: [
                                { "dpt": { $ne: 'Cashier' } },
                                { $and: [{ "dpt": { $eq: 'Cashier' } }, { "entype": { $ne: 'C' } }] },
                            ]
                        }
                    },
                    { $sort: { 'visitid': 1, firstdepartmentflag: -1 } }
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon841 error:', error);
            }
            return result;
        });
    }
    findRTCommon842sub1(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid), statusflag: "A",
                            startdate: { $gte: new Date(req.fromdate), $lte: new Date(req.todate) }
                        }
                    },
                    { $addFields: { IOEH: { $substr: ["$visitid", 0, 1] } } },
                    { $addFields: { 'firstvisittypeuid': { $arrayElemAt: ['$visitcareproviders.visittypeuid', 0] } } },
                    { $lookup: { from: "referencevalues", localField: "firstvisittypeuid", foreignField: "_id", as: "visittype" } },
                    { $unwind: { path: "$visittype", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            $and: [{ "visittype.valuedescription": { $ne: 'Health Promotion' } }, { "visittype.valuedescription": { $ne: 'Buy Medicine without see doctor' } }]
                        }
                    },
                    { $addFields: { visittype: '$visittype.valuedescription' } },
                    { $addFields: { 'firstdepartmentuid': { $arrayElemAt: ['$visitjourneys.departmentuid', 0] } } },
                    { $match: { "firstdepartmentuid": { $ne: null } } },
                    { $addFields: { D2: { $dateToString: { format: "%d/%m/%Y", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M2: { $dateToString: { format: "%m", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y2: { $dateToString: { format: "%Y", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $group: { _id: { patientuid: '$patientuid', D2: '$D2', M2: '$M2', Y2: '$Y2' } } },
                    { $addFields: { D1: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M1: { $dateToString: { format: "%m", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y1: { $dateToString: { format: "%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { cntD: { $cond: { if: { $eq: ["$D1", '$_id.D2'] }, then: 1, else: 0 } } } },
                    { $addFields: { cntM: { $cond: { if: { $eq: ["$M1", '$_id.M2'] }, then: 1, else: 0 } } } },
                    { $addFields: { cntY: { $cond: { if: { $eq: ["$Y1", '$_id.Y2'] }, then: 1, else: 0 } } } },
                    { $group: { _id: { D1: '$D1' }, daily: { $sum: "$cntD" }, MTD: { $sum: "$cntM" }, YTD: { $sum: "$cntY" } } },
                    { $project: { _id: 0, date: '$_id.D1', totalpriceD: '$daily', totalpriceM: '$MTD' } }
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon842sub1 error:', error);
            }
            return result;
        });
    }
    findRTCommon842sub2(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid), statusflag: "A",
                            startdate: { $gte: new Date(req.fromdate), $lte: new Date(req.todate) }
                        }
                    },
                    { $addFields: { IOEH: { $substr: ["$visitid", 0, 1] } } },
                    { $match: { "IOEH": { $eq: 'I' } } },
                    { $addFields: { 'firstvisittypeuid': { $arrayElemAt: ['$visitcareproviders.visittypeuid', 0] } } },
                    { $lookup: { from: "referencevalues", localField: "firstvisittypeuid", foreignField: "_id", as: "visittype" } },
                    { $unwind: { path: "$visittype", preserveNullAndEmptyArrays: true } },
                    {
                        $match: {
                            $and: [{ "visittype.valuedescription": { $ne: 'Health Promotion' } }, { "visittype.valuedescription": { $ne: 'Buy Medicine without see doctor' } }]
                        }
                    },
                    { $addFields: { visittype: '$visittype.valuedescription' } },
                    { $addFields: { 'firstdepartmentuid': { $arrayElemAt: ['$visitjourneys.departmentuid', 0] } } },
                    { $match: { "firstdepartmentuid": { $ne: null } } },
                    { $addFields: { D2: { $dateToString: { format: "%d/%m/%Y", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M2: { $dateToString: { format: "%m", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y2: { $dateToString: { format: "%Y", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $group: { _id: { patientuid: '$patientuid', D2: '$D2', M2: '$M2', Y2: '$Y2' } } },
                    { $addFields: { D1: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M1: { $dateToString: { format: "%m", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y1: { $dateToString: { format: "%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { cntD: { $cond: { if: { $eq: ["$D1", '$_id.D2'] }, then: 1, else: 0 } } } },
                    { $addFields: { cntM: { $cond: { if: { $eq: ["$M1", '$_id.M2'] }, then: 1, else: 0 } } } },
                    { $addFields: { cntY: { $cond: { if: { $eq: ["$Y1", '$_id.Y2'] }, then: 1, else: 0 } } } },
                    { $group: { _id: { D1: '$D1' }, daily: { $sum: "$cntD" }, MTD: { $sum: "$cntM" }, YTD: { $sum: "$cntY" } } },
                    { $project: { _id: 0, totalpriceD: '$daily', totalpriceM: '$MTD' } }
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon842sub2 error:', error);
            }
            return result;
        });
    }
    findRTCommon842sub3(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    { $match: { orguid: new mongoose_1.Types.ObjectId(req.organisationuid), 'startdate': { $gte: new Date(req.fromdate), $lte: new Date(req.todate) }, 'statusflag': "A" } },
                    { $lookup: { from: "referencevalues", localField: "entypeuid", foreignField: "_id", as: "ENTYPE" } },
                    { $unwind: { path: "$ENTYPE", preserveNullAndEmptyArrays: true } },
                    { $match: { "ENTYPE.valuecode": { $ne: 'INPAT' } } },
                    { $lookup: { from: "patientbills", localField: "_id", foreignField: "patientvisituid", as: "patientbills" } },
                    { $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: false } },
                    { $addFields: { D2: { $dateToString: { format: "%d/%m/%Y", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M2: { $dateToString: { format: "%m", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y2: { $dateToString: { format: "%Y", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $group: { _id: { patientuid: '$patientuid', D2: '$D2', M2: '$M2', Y2: '$Y2' } } },
                    { $addFields: { D1: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M1: { $dateToString: { format: "%m", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y1: { $dateToString: { format: "%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { cntD: { $cond: { if: { $eq: ["$D1", '$_id.D2'] }, then: 1, else: 0 } } } },
                    { $addFields: { cntM: { $cond: { if: { $eq: ["$M1", '$_id.M2'] }, then: 1, else: 0 } } } },
                    { $addFields: { cntY: { $cond: { if: { $eq: ["$Y1", '$_id.Y2'] }, then: 1, else: 0 } } } },
                    { $group: { _id: { D1: '$D1' }, daily: { $sum: "$cntD" }, MTD: { $sum: "$cntM" }, YTD: { $sum: "$cntY" } } },
                    { $project: { _id: 0, totalpriceD: '$daily', totalpriceM: '$MTD' } }
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon842sub3 error:', error);
            }
            return result;
        });
    }
    findRTCommon842sub4(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    { $match: { orguid: new mongoose_1.Types.ObjectId(req.organisationuid), 'startdate': { $gte: new Date(req.fromdate), $lte: new Date(req.todate) }, 'statusflag': "A" } },
                    { $lookup: { from: "referencevalues", localField: "entypeuid", foreignField: "_id", as: "ENTYPE" } },
                    { $unwind: { path: "$ENTYPE", preserveNullAndEmptyArrays: true } },
                    { $match: { "ENTYPE.valuecode": { $ne: 'INPAT' } } },
                    { $lookup: { from: "patientbills", localField: "_id", foreignField: "patientvisituid", as: "patientbills" } },
                    { $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: true } },
                    { $match: { 'patientbills.iscancelled': false, 'patientbills.statusflag': 'A' } },
                    { $addFields: { D2: { $dateToString: { format: "%d/%m/%Y", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M2: { $dateToString: { format: "%m", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y2: { $dateToString: { format: "%Y", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { D1: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M1: { $dateToString: { format: "%m", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y1: { $dateToString: { format: "%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { netamountD: { $cond: { if: { $eq: ["$D1", '$D2'] }, then: '$patientbills.totalbillamount', else: 0 } } } },
                    { $addFields: { netamountM: { $cond: { if: { $eq: ["$M1", '$M2'] }, then: '$patientbills.totalbillamount', else: 0 } } } },
                    { $addFields: { netamountY: { $cond: { if: { $eq: ["$Y1", '$Y2'] }, then: '$patientbills.totalbillamount', else: 0 } } } },
                    { $group: { _id: {}, totalpriceD: { $sum: "$netamountD" }, totalpriceM: { $sum: "$netamountM" } } },
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon842sub4 error:', error);
            }
            return result;
        });
    }
    findRTCommon842sub5(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    { $match: { orguid: new mongoose_1.Types.ObjectId(req.organisationuid), 'startdate': { $gte: new Date(req.fromdate), $lte: new Date(req.todate) }, 'statusflag': "A" } },
                    { $addFields: { ET: { $substr: ['$visitid', 0, 1] } } },
                    { $match: { ET: "H" } },
                    { $addFields: { 'firstvisittypeuid': { $arrayElemAt: ['$visitcareproviders.visittypeuid', 0] } } },
                    { $lookup: { from: "referencevalues", localField: "firstvisittypeuid", foreignField: "_id", as: "visittype" } },
                    { $unwind: { path: "$visittype", preserveNullAndEmptyArrays: true } },
                    { $match: { $or: [{ 'visittype.valuedescription': "Health Promotion" }, { 'visittype.valuedescription': "Buy Medicine without see doctor" }] } },
                    { $addFields: { visittype: '$visittype.valuedescription' } },
                    { $lookup: { from: "patientchargecodes", localField: "_id", foreignField: "patientvisituid", as: "patientchargecodes" } },
                    { $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: true } },
                    { $match: { 'patientchargecodes.chargecodes.patientbilluid': { $ne: null }, 'patientchargecodes.chargecodes.statusflag': 'A', "$or": [{ "patientchargecodes.isr2c": { "$eq": null } }, { "patientchargecodes.isr2c": { "$eq": false } }] } },
                    { $addFields: { D2: { $dateToString: { format: "%d/%m/%Y", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M2: { $dateToString: { format: "%m", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y2: { $dateToString: { format: "%Y", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { D1: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M1: { $dateToString: { format: "%m", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y1: { $dateToString: { format: "%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { netamountD: { $cond: { if: { $eq: ["$D1", '$D2'] }, then: '$patientchargecodes.chargecodes.netamount', else: 0 } } } },
                    { $addFields: { netamountM: { $cond: { if: { $eq: ["$M1", '$M2'] }, then: '$patientchargecodes.chargecodes.netamount', else: 0 } } } },
                    { $addFields: { netamountY: { $cond: { if: { $eq: ["$Y1", '$Y2'] }, then: '$patientchargecodes.chargecodes.netamount', else: 0 } } } },
                    { $group: { _id: {}, totalpriceD: { $sum: "$netamountD" }, totalpriceM: { $sum: "$netamountM" } } },
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon842sub5 error:', error);
            }
            return result;
        });
    }
    findRTCommon842sub6(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid), statusflag: "A",
                            medicaldischargedate: { $gte: new Date(req.fromdate), $lte: new Date(req.todate) }
                        }
                    },
                    { $addFields: { 'firstdepartmentuid': { $arrayElemAt: ['$visitjourneys.departmentuid', 0] } } },
                    { $match: { "firstdepartmentuid": { $ne: null } } },
                    { $lookup: { from: "referencevalues", localField: "entypeuid", foreignField: "_id", as: "entype" } },
                    { $unwind: { path: "$entype", preserveNullAndEmptyArrays: true } },
                    { $match: { "entype.valuecode": { $ne: 'HEAL' } } },
                    { $addFields: { IOEH: { $substr: ["$visitid", 0, 1] } } },
                    { $match: { "IOEH": { $eq: 'I' } } },
                    { $addFields: { D2: { $dateToString: { format: "%d/%m/%Y", date: '$medicaldischargedate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M2: { $dateToString: { format: "%m", date: '$medicaldischargedate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y2: { $dateToString: { format: "%Y", date: '$medicaldischargedate', timezone: "+07:00", onNull: "-" } } } },
                    { $group: { _id: { patientuid: '$patientuid', D2: '$D2', M2: '$M2', Y2: '$Y2' } } },
                    { $addFields: { D1: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M1: { $dateToString: { format: "%m", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y1: { $dateToString: { format: "%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { cntD: { $cond: { if: { $eq: ["$D1", '$_id.D2'] }, then: 1, else: 0 } } } },
                    { $addFields: { cntM: { $cond: { if: { $eq: ["$M1", '$_id.M2'] }, then: 1, else: 0 } } } },
                    { $addFields: { cntY: { $cond: { if: { $eq: ["$Y1", '$_id.Y2'] }, then: 1, else: 0 } } } },
                    { $group: { _id: { D1: '$D1' }, daily: { $sum: "$cntD" }, MTD: { $sum: "$cntM" }, YTD: { $sum: "$cntY" } } },
                    { $project: { _id: 0, totalpriceD: '$daily', totalpriceM: '$MTD' } }
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon842sub6 error:', error);
            }
            return result;
        });
    }
    findRTCommon842sub7(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            $and: [
                                { 'startdate': { $gte: new Date(req.fromdate), $lte: new Date(req.todate) } },
                                { "orguid": new mongoose_1.Types.ObjectId(req.organisationuid) },
                                { "visitid": /I/ },
                            ]
                        }
                    },
                    { $addFields: { visitjourneys_FinalDischarge: { $indexOfArray: ['$visitjourneys.comments', 'Final Discharge'] } } },
                    {
                        $addFields: {
                            journeyfd: {
                                $filter: {
                                    input: "$visitjourneys", as: "visitjourneys", cond: { $eq: ["$$visitjourneys.comments", 'Final Discharge'] },
                                }
                            }
                        }
                    },
                    { $addFields: { lastjourneymodifiedat: '$journeyfd.modifiedat' } },
                    { $unwind: { path: "$lastjourneymodifiedat", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "visitstatusuid", foreignField: "_id", as: "visitstatus" } },
                    { $unwind: { path: "$visitstatus", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'index1': { $indexOfArray: ['$bedoccupancy.isactive', true] } } },
                    { $addFields: { 'ward': { $arrayElemAt: ["$bedoccupancy.warduid", "$index1"] } } },
                    { $lookup: { from: "wards", localField: "ward", foreignField: "_id", as: "wards" } },
                    { $unwind: { path: "$wards", preserveNullAndEmptyArrays: true } },
                    { $match: { 'wards.name': { $ne: 'Labour Room' } } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            cutoff: {
                                $cond: {
                                    if: { $ne: [{ $ifNull: ['$lastjourneymodifiedat', ""] }, ""] },
                                    then: '$lastjourneymodifiedat',
                                    else: {
                                        $cond: {
                                            if: { $ne: [{ $ifNull: ['$medicaldischargedate', ""] }, ""] },
                                            then: '$medicaldischargedate',
                                            else: {
                                                $cond: {
                                                    if: { $ne: [{ $ifNull: ['$enddate', ""] }, ""] },
                                                    then: null,
                                                    else: new Date(req.todate)
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                        }
                    },
                    { $addFields: { hours: { $divide: [{ $subtract: ['$cutoff', "$startdate"] }, (24 * 60 * 60 * 1000)] } } },
                    { $match: { 'hours': { $gte: 0 } } },
                    { $addFields: { D1: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M1: { $dateToString: { format: "%m", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y1: { $dateToString: { format: "%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { D2: { $dateToString: { format: "%d/%m/%Y", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M2: { $dateToString: { format: "%m", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y2: { $dateToString: { format: "%Y", date: '$startdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { totalpriceD: { $cond: { if: { $eq: ["$D1", '$D2'] }, then: '$hours', else: 0 } } } },
                    { $addFields: { totalpriceM: { $cond: { if: { $eq: ["$M1", '$M2'] }, then: '$hours', else: 0 } } } },
                    { $group: { _id: {}, totalpriceD: { $sum: "$totalpriceD" }, totalpriceM: { $sum: "$totalpriceM" } } },
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon842sub7 error:', error);
            }
            return result;
        });
    }
    findRTCommon842sub8(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultpatientvisits = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orderdate': { $gte: new Date(req.fromdate), $lte: new Date(req.todate) },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    { $lookup: { from: "referencevalues", localField: "entypeuid", foreignField: "_id", as: "entype" } },
                    { $unwind: { path: "$entype", preserveNullAndEmptyArrays: true } },
                    { $match: { 'entype.valuecode': "INPAT" } },
                    { $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'referencevalues', localField: 'patientorderitems.statusuid', foreignField: '_id', as: 'ordsts' } },
                    { $unwind: { path: '$ordsts', preserveNullAndEmptyArrays: true } },
                    { $match: { 'ordsts.valuedescription': { $ne: 'Cancelled' } } },
                    { $addFields: { D1: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M1: { $dateToString: { format: "%m", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y1: { $dateToString: { format: "%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { D2: { $dateToString: { format: "%d/%m/%Y", date: '$orderdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M2: { $dateToString: { format: "%m", date: '$orderdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y2: { $dateToString: { format: "%Y", date: '$orderdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { totalpriceD: { $cond: { if: { $eq: ["$D1", '$D2'] }, then: '$patientorderitems.totalprice', else: 0 } } } },
                    { $addFields: { totalpriceM: { $cond: { if: { $eq: ["$M1", '$M2'] }, then: '$patientorderitems.totalprice', else: 0 } } } },
                    { $group: { _id: {}, totalpriceD: { $sum: "$totalpriceD" }, totalpriceM: { $sum: "$totalpriceM" } } },
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon842sub8 error:', error);
            }
            return result;
        });
    }
    findRTCommon842sub9(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultpatientvisits = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orderdate': { $gte: new Date(req.fromdate), $lte: new Date(req.todate) },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    { $lookup: { from: "referencevalues", localField: "entypeuid", foreignField: "_id", as: "entype" } },
                    { $unwind: { path: "$entype", preserveNullAndEmptyArrays: true } },
                    { $match: { 'entype.valuecode': "INPAT" } },
                    { $addFields: { D2: { $dateToString: { format: "%d/%m/%Y", date: '$orderdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M2: { $dateToString: { format: "%m", date: '$orderdate', timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { Y2: { $dateToString: { format: "%Y", date: '$orderdate', timezone: "+07:00", onNull: "-" } } } },
                    { $group: { _id: { patientuid: '$patientuid', D2: '$D2', M2: '$M2', Y2: '$Y2' } } },
                    { $addFields: { D1: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { M1: { $dateToString: { format: "%m", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } } } },
                    { $addFields: { cntD: { $cond: { if: { $eq: ["$D1", '$_id.D2'] }, then: 1, else: 0 } } } },
                    { $addFields: { cntM: { $cond: { if: { $eq: ["$M1", '$_id.M2'] }, then: 1, else: 0 } } } },
                    { $group: { _id: { D1: '$D1' }, daily: { $sum: "$cntD" }, MTD: { $sum: "$cntM" }, } },
                    { $project: { _id: 0, totalpriceD: '$daily', totalpriceM: '$MTD' } }
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon842sub9 error:', error);
            }
            return result;
        });
    }
    findRTCommon843(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let matchdepartmentuids = { $match: {} };
            if (req.departmentuids != '') {
                matchdepartmentuids = { $match: { 'last_departmentuid': { $eq: new mongoose_1.Types.ObjectId(req.departmentuids) } } };
            }
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultPatientOdrs = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orderdate': { $gte: new Date(req.fromdate), $lte: new Date(req.todate) },
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: 'A'
                        }
                    },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "patientorderitems.cancelledby", foreignField: "_id", as: "users" } },
                    { $unwind: { path: "$users", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'departments', localField: "orderdepartmentuid", foreignField: "_id", as: 'orderdepartment' } },
                    { $unwind: { path: "$orderdepartment", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $addFields: { PatientNameEN: { $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                } },
                        } },
                    { $addFields: { PatientNameTH: { $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] },
                                                            then: "",
                                                            else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                } }
                        } },
                    { $unwind: { path: "$patientorderitems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patientorderitems.statusuid", foreignField: "_id", as: "ordsts" } },
                    { $unwind: { path: "$ordsts", preserveNullAndEmptyArrays: true } },
                    { $match: { 'ordsts.valuedescription': { $eq: 'Cancelled' } } },
                    { $addFields: { "last_departmentuid": { $arrayElemAt: ["$patientorderitems.patientorderlogs.departmentuid", -1] } } },
                    { $lookup: { from: 'departments', localField: "last_departmentuid", foreignField: "_id", as: 'department' } },
                    { $unwind: { path: "$department", preserveNullAndEmptyArrays: true } },
                    matchdepartmentuids,
                    { $lookup: { from: "orderset", localField: "patientorderitems.ordersetuid", foreignField: "_id", as: "orderset" } },
                    { $unwind: { path: "$orderset", preserveNullAndEmptyArrays: true } },
                    { $addFields: { "last_modifiedat": { $arrayElemAt: ["$patientorderitems.patientorderlogs.modifiedat", -1] } } },
                    { $addFields: { "last_comments": { $arrayElemAt: ["$patientorderitems.patientorderlogs.comments", -1] } } },
                    { $addFields: { "last_reasonuid": { $arrayElemAt: ["$patientorderitems.patientorderlogs.reasonuid", -1] } } },
                    { $lookup: { from: "referencevalues", localField: "last_reasonuid", foreignField: "_id", as: "reason" } },
                    { $unwind: { path: "$reason", preserveNullAndEmptyArrays: true } },
                    { $addFields: { "last_useruid": { $arrayElemAt: ["$patientorderitems.patientorderlogs.useruid", -1] } } },
                    { $lookup: { from: "users", localField: "last_useruid", foreignField: "_id", as: "users" } },
                    { $unwind: { path: "$users", preserveNullAndEmptyArrays: true } },
                    { $project: {
                            date: { $dateToString: { format: "%d/%m/%Y  %H:%M", date: "$orderdate", timezone: "+07:00", onNull: "-" } },
                            hn: '$patients.mrn',
                            en: '$patientvisits.visitid',
                            patientname: { $cond: { if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$PatientNameTH", ""] }, ""] },
                                    else: { $ifNull: ["$PatientNameEN", ""] }
                                }
                            },
                            orderset: { $ifNull: ['$orderset.name', ''] },
                            orderitem: '$patientorderitems.orderitemname',
                            quantity: '$patientorderitems.quantity',
                            unitprice: '$patientorderitems.unitprice',
                            total: '$patientorderitems.totalprice',
                            netamount: { $subtract: ['$patientorderitems.totalprice', '$patientorderitems.payordiscount'] },
                            discount: '$patientorderitems.payordiscount',
                            status: '$ordsts.valuedescription',
                            canceldate: { $dateToString: { format: "%d/%m/%Y  %H:%M", date: "$last_modifiedat", timezone: "+07:00", onNull: "-" } },
                            comment: { $ifNull: ['$last_comments', ''] },
                            cancelreason: { $ifNull: ['$reason.valuedescription', ''] },
                            user: '$users.name',
                            code: '$users.code',
                            orderdepartment: { $ifNull: ['$department.name', '-'] },
                            userprint: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        } },
                ]).exec();
                result = resultPatientOdrs;
            }
            catch (error) {
                this.logger.error('findRTCommon843 error:', error);
            }
            return result;
        });
    }
    findRTCommon844(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let storeuid = { $match: {} };
                try {
                    if (req.storeuid != '' && req.storeuid != null) {
                        storeuid = {
                            $match: {
                                'fromstoreuid': new mongoose_1.Types.ObjectId(req.storeuid),
                            }
                        };
                    }
                }
                catch (res) {
                    req.storeuid = '';
                }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientorders = yield this.StockdispensesModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'dispensedate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            'statusflag': "A"
                        }
                    }, storeuid,
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "patientorderuid", foreignField: "_id", as: "patientorders" } },
                    { $unwind: { path: "$patientorders", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'departments', localField: 'patientorders.orderdepartmentuid', foreignField: '_id', as: 'departments' } },
                    { $unwind: { path: '$departments', preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: '$itemdetails', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'referencevalues', localField: 'itemdetails.statusuid', foreignField: '_id', as: 'referencevalues' } },
                    { $unwind: { path: '$referencevalues', preserveNullAndEmptyArrays: true } },
                    { $match: { 'referencevalues.valuedescription': { $ne: 'Cancelled""' } } },
                    { $lookup: { from: 'itemmasters', localField: 'itemdetails.itemmasteruid', foreignField: '_id', as: 'itemmasters' } },
                    { $unwind: { path: '$itemmasters', preserveNullAndEmptyArrays: true } },
                    { $addFields: { p_index: { $indexOfArray: ['$itemmasters.handlingstores.storeuid', '$fromstoreuid'] } } },
                    { $addFields: { p_storeuid: { $arrayElemAt: ['$itemmasters.handlingstores.storeuid', '$p_index'] } } },
                    { $unwind: { path: '$itemmasters.handlingstores', preserveNullAndEmptyArrays: true } },
                    { $match: { $expr: { $eq: ['$itemmasters.handlingstores.storeuid', '$fromstoreuid'] } } },
                    { $addFields: { p_binuid: '$itemmasters.handlingstores.binuid' } },
                    { $lookup: { from: 'inventorystores', localField: 'p_storeuid', foreignField: '_id', as: 'inventory' } },
                    { $unwind: { path: '$inventory', preserveNullAndEmptyArrays: true } },
                    { $addFields: { b_index: { $indexOfArray: ['$inventory.storebins._id', '$p_binuid'] } } },
                    { $addFields: { b_array: { $arrayElemAt: ['$inventory.storebins.name', { $cond: { if: { $eq: ['$b_index', -1] }, then: null, else: '$b_index' } }] }, } },
                    { $lookup: { from: 'referencevalues', localField: 'itemdetails.quantityuom', foreignField: '_id', as: 'uom' } },
                    { $unwind: { path: '$uom', preserveNullAndEmptyArrays: true } },
                    { $group: { _id: {
                                department: '$departments.name',
                                chargecode: '$itemmasters.code',
                                orderitemname: '$itemmasters.name',
                                binname: '$b_array',
                                uom: '$uom.valuedescription',
                                ordercattype: '$ordercattype',
                                store: '$inventory.name',
                                orgname: { $ifNull: ['$organisations.name', '-'] },
                            },
                            quantity: { $sum: '$itemdetails.quantity' },
                        } },
                    { $project: {
                            department: '$_id.department',
                            chargecode: '$_id.chargecode',
                            orderitemname: '$_id.orderitemname',
                            store: '$_id.store',
                            uom: '$_id.uom',
                            binname: { $ifNull: ['$_id.binname', '-'] },
                            orgname: '$_id.orgname',
                            qty: '$quantity',
                            fromdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            todate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            printby: _user.name,
                        } }
                ])
                    .exec();
                result = resultpatientorders;
            }
            catch (error) {
                this.logger.error('findRTCommon844 error:', error);
            }
            return result;
        });
    }
    findRTCommon845(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let patientt = { $match: {} };
                try {
                    if (req.patientuid != '' && req.patientuid != null) {
                        patientt = {
                            $match: {
                                'hospitalnumber': new mongoose_1.Types.ObjectId(req.patientuid),
                            }
                        };
                    }
                }
                catch (res) {
                    req.patientuid = '';
                }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientbills = yield this.welfareadjustmentrequestsModel.aggregate([
                    patientt,
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "transactiondate": { $gte: new Date(req.fromdate), $lte: new Date(req.todate) },
                            'statusflag': "A",
                        }
                    },
                    { $lookup: { from: "patients", localField: "hospitalnumber", foreignField: "mrn", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            'patientname': {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] }
                                        }
                                    },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] }
                                        }
                                    }
                                }
                            },
                            'businessunit': '$businessunit',
                            'transactiondate': { $dateToString: { format: "%d/%m/%Y", date: "$transactiondate", timezone: "+07:00", onNull: "" } },
                            'hospitalnumber': '$hospitalnumber',
                            'documentnumber': '$documentnumber',
                            'adjustmentamount': '$adjustmentamount',
                            'employeenumber': "$employeenumber",
                            'product': '$product',
                            'plangroup': "$plangroup",
                            'user': _user.name,
                            'startdate': { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            'enddate': { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    },
                    { $sort: { 'hospitalnumber': 1, 'documentnumber': 1 } }
                ])
                    .exec();
                result = resultpatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon845 error:', error);
            }
            return result;
        });
    }
    findRTCommon846(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let patientt = { $match: {} };
                try {
                    if (req.patientuid != '' && req.patientuid != null) {
                        patientt = {
                            $match: {
                                'patientuid': new mongoose_1.Types.ObjectId(req.patientuid),
                            }
                        };
                    }
                }
                catch (res) {
                    req.patientuid = '';
                }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientbills = yield this.patientbillsModel.aggregate([
                    patientt,
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "billdate": { $gte: new Date(req.fromdate), $lte: new Date(req.todate) },
                            'sequencenumber': { $regex: /CI/ },
                            'statusflag': "A",
                            'iscancelled': false,
                            'isrefund': false,
                        }
                    },
                    { $lookup: { from: "tpas", localField: "tpauid", foreignField: "_id", as: "tpa" } },
                    { $unwind: { path: "$tpa", preserveNullAndEmptyArrays: true } },
                    { $match: { 'tpa.name': /Welfare/ } },
                    { $lookup: { from: "payoragreements", localField: "payoragreementuid", foreignField: "_id", as: "agreement" } },
                    { $unwind: { path: "$agreement", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'doctor0': { $arrayElemAt: ['$patientvisits.visitcareproviders.careprovideruid', 0] } } },
                    { $addFields: { visitcareproviders_index: { $indexOfArray: ['$patientvisits.visitcareproviders.isprimarycareprovider', true] } } },
                    { $addFields: { visitcareproviders_lookup: { $arrayElemAt: ["$patientvisits.visitcareproviders.careprovideruid", { $cond: { if: { $eq: ["$visitcareproviders_index", -1] }, then: null, else: "$visitcareproviders_index" } }] }, } },
                    { $addFields: { doctorfirst: { $cond: { if: { $eq: ["$visitcareproviders_lookup", null] }, then: '$doctor0', else: '$visitcareproviders_lookup' } } } },
                    { $lookup: { from: "users", localField: "doctorfirst", foreignField: "_id", as: "firstdoctor" } },
                    { $unwind: { path: "$firstdoctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $addFields: { year: { $subtract: [{ $toInt: { $substr: [{ $add: [{ $year: { "date": new Date(), "timezone": "+07:00" } }, 543] }, 0, 4] }, }, { $toInt: { $substr: [{ $add: [{ $year: { "date": "$patients.dateofbirth", "timezone": "+07:00" } }, 543] }, 0, 4] } }] } } },
                    { $addFields: { month: { $cond: { if: { $lt: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 0] }, then: { $add: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 11] }, else: { $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] } } } } },
                    { $addFields: { date: { $subtract: [{ $toInt: { $dateToString: { format: "%d", date: new Date(), timezone: "+07:00", onNull: "-" } } }, { $toInt: { $dateToString: { format: "%d", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } } }] } } },
                    { $lookup: { from: "referencevalues", localField: "patients.genderuid", foreignField: "_id", as: "gender" } },
                    { $unwind: { path: "$gender", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "diagnoses", localField: "patientvisituid", foreignField: "patientvisituid", as: "diagnoses" } },
                    { $addFields: { 'firstdiagnoses': { $arrayElemAt: ['$diagnoses', 0] } } },
                    { $unwind: { path: "$diagnoses", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'diagnosistext': { $ifNull: ['$diagnoses.diagnosistext', ""] } } },
                    { $addFields: { 'firstdiag': { $ifNull: [{ $arrayElemAt: ['$firstdiagnoses.diagnosis._id', 0] }, ""] } } },
                    { $unwind: { path: "$diagnoses.diagnosis", preserveNullAndEmptyArrays: true } },
                    { $addFields: { cd: { $cond: { if: { $eq: ["$diagnoses.createdat", { $ifNull: ['$diagnoses.diagnosis.createdat', "$diagnoses.createdat"] }] }, then: 'Y', else: 'N' } } } },
                    { $addFields: { 'diag_id': { $ifNull: ['$diagnoses.diagnosis._id', ""] } } },
                    { $addFields: { diagseq0: { $cond: { if: { $eq: ["$firstdiag", '$diag_id'] }, then: 'Y', else: 'N' } } } },
                    { $lookup: { from: "problems", localField: "diagnoses.diagnosis.problemuid", foreignField: "_id", as: "problems" } },
                    { $unwind: { path: "$problems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "diagnoses.diagnosis.careprovideruid", foreignField: "_id", as: "doctor" } },
                    { $unwind: { path: "$doctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "diagnoses.departmentuid", foreignField: "_id", as: "last_department" } },
                    { $unwind: { path: "$last_department", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "welfares", localField: "patients.nationalid", foreignField: "nationalid", as: "welfares" } },
                    { $unwind: { path: "$welfares", preserveNullAndEmptyArrays: true } },
                    { $match: { "welfares.orguid": new mongoose_1.Types.ObjectId(req.organisationuid), "welfares.plancode": { $ne: '9999' } } },
                    { $lookup: { from: "plangroups", localField: "welfares.plancode", foreignField: "groupcode", as: "plangroups" } },
                    { $unwind: { path: "$plangroups", preserveNullAndEmptyArrays: true } },
                    { $match: { "plangroups.orguid": new mongoose_1.Types.ObjectId(req.organisationuid), 'plangroups.activeto': null } },
                    { $unwind: { path: "$plangroups.entypeuid", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "plangroups.entypeuid", foreignField: "_id", as: "IO" } },
                    { $unwind: { path: "$IO", preserveNullAndEmptyArrays: true } },
                    { $match: { "IO.valuecode": { $eq: "INPAT" } } },
                    { $unwind: { path: "$welfares.balanceamount", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$welfares.balanceamount.entypeuids", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "welfares.balanceamount.entypeuids", foreignField: "_id", as: "entype2" } },
                    { $match: { "entype2.valuecode": { $eq: "INPAT" } } },
                    { $lookup: { from: "welfares", localField: "welfares.businessunitempid", foreignField: "businessunitempid", as: "employee" } },
                    { $addFields: { 'employeefirstname': { $arrayElemAt: ['$employee.firstname', 0] } } },
                    { $addFields: { 'employeelastname': { $arrayElemAt: ['$employee.lastname', 0] } } },
                    { $addFields: { 'doctorflag': { $arrayElemAt: ['$employee.doctorflag', 0] } } },
                    { $addFields: { NOW: { $toDate: { $dateToString: { format: "%Y-%m-%d", date: new Date(), timezone: "+07:00" } } } } },
                    { $addFields: { dateNOW: { $dayOfMonth: '$NOW' } } },
                    { $addFields: { DOB: { $toDate: { $dateToString: { format: "%Y-%m-%d", date: "$patients.dateofbirth", timezone: "+07:00" } } } } },
                    { $addFields: { dateDOB: { $dayOfMonth: '$DOB' } } },
                    { $lookup: { from: "welfareadjustmentrequests", localField: "patients.mrn", foreignField: "hospitalnumber", as: "welfareadjustmentrequests" } },
                    { $addFields: { adjamount: { $filter: { input: "$welfareadjustmentrequests", as: "welfareadjustmentrequests", cond: { $and: [
                                            { $eq: [{ $substr: ["$$welfareadjustmentrequests.documentnumber", 3, 2] }, 'CI'] },
                                            { $gte: ["$$welfareadjustmentrequests.transactiondate", new Date(req.fromdate)] },
                                            { $lte: ["$$welfareadjustmentrequests.transactiondate", new Date(req.todate)] },
                                        ] }
                                } } } },
                    { $addFields: { adj: { $sum: '$adjamount.adjustmentamount' } } },
                    {
                        $addFields: {
                            LD: {
                                $cond: {
                                    if: {
                                        $and: [
                                            { "$ne": [{ $month: '$NOW' }, 3] },
                                            { $gt: ['$dateDOB', '$dateNOW'] },
                                            {
                                                $or: [{ "$eq": [{ $month: '$DOB' }, 1] }, { "$eq": [{ $month: '$DOB' }, 3] }, { "$eq": [{ $month: '$DOB' }, 5] },
                                                    { "$eq": [{ $month: '$DOB' }, 7] }, { "$eq": [{ $month: '$DOB' }, 8] }, { "$eq": [{ $month: '$DOB' }, 10] },
                                                    { "$eq": [{ $month: '$DOB' }, 12] }]
                                            }
                                        ]
                                    },
                                    then: 31, else: {
                                        $cond: {
                                            if: {
                                                $and: [
                                                    { "$eq": [{ $month: '$NOW' }, 3] },
                                                    { $gt: ['$dateDOB', '$dateNOW'] },
                                                    { "$eq": [{ $toDate: { $concat: [{ $toString: { $year: '$NOW' } }, '-12-31'] } }, 365] }
                                                ]
                                            },
                                            then: 28, else: {
                                                $cond: {
                                                    if: {
                                                        $and: [
                                                            { "$eq": [{ $month: '$NOW' }, 3] },
                                                            { $gt: ['$dateDOB', '$dateNOW'] },
                                                            { "$eq": [{ $toDate: { $concat: [{ $toString: { $year: '$NOW' } }, '-12-31'] } }, 366] }
                                                        ]
                                                    },
                                                    then: 29, else: 30
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    { $addFields: { year0: { $subtract: [{ $year: '$NOW' }, { $year: "$DOB" }] } } },
                    { $addFields: { month0: { $subtract: [{ $month: '$NOW' }, { $month: "$DOB" }] } } },
                    { $addFields: { date0: { $subtract: [{ $dayOfMonth: '$NOW' }, { $dayOfMonth: "$DOB" }] } } },
                    { $addFields: { year1: '$year0' } },
                    { $addFields: { month1: { $cond: [{ $lt: ["$date0", 0] }, { $subtract: ["$month0", 1] }, "$month0"] }, } },
                    { $addFields: { date1: { $cond: [{ $lt: ["$date0", 0] }, { $add: ['$LD', "$date0"] }, "$date0"] } } },
                    { $addFields: { year2: { $cond: [{ $lt: ["$month1", 0] }, { $subtract: ["$year1", 1] }, "$year1"] } } },
                    { $addFields: { month2: { $cond: [{ $lt: ["$month1", 0] }, { $add: [12, "$month1"] }, "$month1"] } } },
                    { $addFields: { date2: '$date1' } },
                    {
                        $project: {
                            'adj': '$adj',
                            'firstdiag': '$firstdiag',
                            'diag_id': '$diag_id',
                            'diagseq0': '$diagseq0',
                            'doctorflag': '$doctorflag',
                            "IO": { $substr: ["$patientvisits.visitid", 0, 1] },
                            admitdate: { $dateToString: { format: "%d/%m/%Y", date: "$patientvisits.startdate", timezone: "+07:00", onNull: "" } },
                            dischargedate: { $dateToString: { format: "%d/%m/%Y", date: "$patientvisits.medicaldischargedate", timezone: "+07:00", onNull: "" } },
                            HN: "$patients.mrn",
                            EN: '$patientvisits.visitid',
                            visitdate: "$patientvisits.startdate",
                            Document_Number: "$sequencenumber",
                            firstdoctor: "$firstdoctor.code",
                            Patient_Name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] }
                                        }
                                    },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] }
                                        }
                                    }
                                }
                            },
                            DOB: { $dateToString: { format: "%d/%m/%Y", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "" } },
                            Age: { $concat: [{ $toString: '$year2' }, ' Y ', { $toString: '$month2' }, ' M ', { $toString: '$date2' }, ' D'] },
                            Gender: { $ifNull: ["$gender.valuedescription", "Unknown"] },
                            DiagType: {
                                $cond: {
                                    if: { $eq: ["$diagnoses.diagnosis.isprimary", true] },
                                    then: 'Primary',
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$diagnoses.diagnosis.isunderlyingdiagnosis", true] },
                                            then: 'Underlying',
                                            else: 'Comorbidity'
                                        }
                                    }
                                }
                            },
                            diagnosistext: { $ifNull: ["$diagnosistext", ""] },
                            ICD10: { $ifNull: ["$problems.code", ""] },
                            ICD10desc: { $ifNull: ["$problems.name", ""] },
                            department: { $ifNull: ["$last_department.name", ""] },
                            Doctor: { $ifNull: ["$doctor.description", ""] },
                            relationship: { $cond: { if: { $eq: [{ $ifNull: ["$welfares.relationship", ""] }, "SELLF"] }, then: "Self", else: "Relative" } },
                            Employee_ID: { $concat: ["0", "$welfares.businessunitempid"] },
                            HCM_Plan_Group: { $ifNull: ["$welfares.plancode", ""] },
                            Payor: '$tpa.name',
                            Agreement: { $ifNull: ['$agreement.name', ""] },
                            Employee_Name: { $concat: [{ $ifNull: ["$employeefirstname", ""] }, " ", { $ifNull: ["$employeelastname", ""] }, " "] },
                            Amount: { $cond: { if: { $eq: ['$diagseq0', "Y"] }, then: "$totalbillamount", else: 0 } },
                            Limit: { $ifNull: ["$plangroups.limitamount", "0"] },
                            Balance: { $ifNull: ["$welfares.balanceamount.balance", "0"] },
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            cd: '$cd',
                        }
                    },
                    { $match: { doctorflag: 'N' } },
                ])
                    .exec();
                result = resultpatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon846 error:', error);
            }
            return result;
        });
    }
    findRTCommon847(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                let patientt = { $match: {} };
                try {
                    if (req.patientuid != '' && req.patientuid != null) {
                        patientt = {
                            $match: {
                                'patientuid': new mongoose_1.Types.ObjectId(req.patientuid),
                            }
                        };
                    }
                }
                catch (res) {
                    req.patientuid = '';
                }
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultpatientbills = yield this.patientbillsModel.aggregate([
                    patientt,
                    {
                        $match: {
                            "orguid": new mongoose_1.Types.ObjectId(req.organisationuid),
                            "billdate": { $gte: new Date(req.fromdate), $lte: new Date(req.todate) },
                            'sequencenumber': { $regex: /CO/ },
                            'statusflag': "A",
                            'iscancelled': false,
                            'isrefund': false,
                        }
                    },
                    { $lookup: { from: "tpas", localField: "tpauid", foreignField: "_id", as: "tpa" } },
                    { $unwind: { path: "$tpa", preserveNullAndEmptyArrays: true } },
                    { $match: { 'tpa.name': /Welfare/ } },
                    { $lookup: { from: "payoragreements", localField: "payoragreementuid", foreignField: "_id", as: "agreement" } },
                    { $unwind: { path: "$agreement", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'doctor0': { $arrayElemAt: ['$patientvisits.visitcareproviders.careprovideruid', 0] } } },
                    { $addFields: { visitcareproviders_index: { $indexOfArray: ['$patientvisits.visitcareproviders.isprimarycareprovider', true] } } },
                    { $addFields: { visitcareproviders_lookup: { $arrayElemAt: ["$patientvisits.visitcareproviders.careprovideruid", { $cond: { if: { $eq: ["$visitcareproviders_index", -1] }, then: null, else: "$visitcareproviders_index" } }] }, } },
                    { $addFields: { doctorfirst: { $cond: { if: { $eq: ["$visitcareproviders_lookup", null] }, then: '$doctor0', else: '$visitcareproviders_lookup' } } } },
                    { $lookup: { from: "users", localField: "doctorfirst", foreignField: "_id", as: "firstdoctor" } },
                    { $unwind: { path: "$firstdoctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $addFields: { year: { $subtract: [{ $toInt: { $substr: [{ $add: [{ $year: { "date": new Date(), "timezone": "+07:00" } }, 543] }, 0, 4] }, }, { $toInt: { $substr: [{ $add: [{ $year: { "date": "$patients.dateofbirth", "timezone": "+07:00" } }, 543] }, 0, 4] } }] } } },
                    { $addFields: { month: { $cond: { if: { $lt: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 0] }, then: { $add: [{ $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] }, 11] }, else: { $subtract: [{ $month: { $dateFromString: { dateString: { $dateToString: { date: new Date(), timezone: "+07:00", onNull: null } } } } }, { $month: { $dateFromString: { dateString: { $dateToString: { date: "$patients.dateofbirth", timezone: "+07:00", onNull: null } } } } }] } } } } },
                    { $addFields: { date: { $subtract: [{ $toInt: { $dateToString: { format: "%d", date: new Date(), timezone: "+07:00", onNull: "-" } } }, { $toInt: { $dateToString: { format: "%d", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "-" } } }] } } },
                    { $lookup: { from: "referencevalues", localField: "patients.genderuid", foreignField: "_id", as: "gender" } },
                    { $unwind: { path: "$gender", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "diagnoses", localField: "patientvisituid", foreignField: "patientvisituid", as: "diagnoses" } },
                    { $addFields: { 'firstdiagnoses': { $arrayElemAt: ['$diagnoses', 0] } } },
                    { $unwind: { path: "$diagnoses", preserveNullAndEmptyArrays: true } },
                    { $addFields: { 'diagnosistext': { $ifNull: ['$diagnoses.diagnosistext', ""] } } },
                    { $addFields: { 'firstdiag': { $ifNull: [{ $arrayElemAt: ['$firstdiagnoses.diagnosis._id', 0] }, ""] } } },
                    { $unwind: { path: "$diagnoses.diagnosis", preserveNullAndEmptyArrays: true } },
                    { $addFields: { cd: { $cond: { if: { $eq: ["$diagnoses.createdat", { $ifNull: ['$diagnoses.diagnosis.createdat', "$diagnoses.createdat"] }] }, then: 'Y', else: 'N' } } } },
                    { $addFields: { 'diag_id': { $ifNull: ['$diagnoses.diagnosis._id', ""] } } },
                    { $addFields: { diagseq0: { $cond: { if: { $eq: ["$firstdiag", '$diag_id'] }, then: 'Y', else: 'N' } } } },
                    { $lookup: { from: "problems", localField: "diagnoses.diagnosis.problemuid", foreignField: "_id", as: "problems" } },
                    { $unwind: { path: "$problems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "diagnoses.diagnosis.careprovideruid", foreignField: "_id", as: "doctor" } },
                    { $unwind: { path: "$doctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "diagnoses.departmentuid", foreignField: "_id", as: "last_department" } },
                    { $unwind: { path: "$last_department", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "welfares", localField: "patients.nationalid", foreignField: "nationalid", as: "welfares" } },
                    { $unwind: { path: "$welfares", preserveNullAndEmptyArrays: true } },
                    { $match: { "welfares.orguid": new mongoose_1.Types.ObjectId(req.organisationuid), "welfares.plancode": { $ne: '9999' } } },
                    { $lookup: { from: "plangroups", localField: "welfares.plancode", foreignField: "groupcode", as: "plangroups" } },
                    { $unwind: { path: "$plangroups", preserveNullAndEmptyArrays: true } },
                    { $match: { "plangroups.orguid": new mongoose_1.Types.ObjectId(req.organisationuid), 'plangroups.activeto': null } },
                    { $unwind: { path: "$plangroups.entypeuid", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "plangroups.entypeuid", foreignField: "_id", as: "IO" } },
                    { $unwind: { path: "$IO", preserveNullAndEmptyArrays: true } },
                    { $match: { "IO.valuecode": { $eq: "OUPAT" } } },
                    { $unwind: { path: "$welfares.balanceamount", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$welfares.balanceamount.entypeuids", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "welfares.balanceamount.entypeuids", foreignField: "_id", as: "entype2" } },
                    { $match: { "entype2.valuecode": { $eq: "OUPAT" } } },
                    { $lookup: { from: "welfares", localField: "welfares.businessunitempid", foreignField: "businessunitempid", as: "employee" } },
                    { $addFields: { 'employeefirstname': { $arrayElemAt: ['$employee.firstname', 0] } } },
                    { $addFields: { 'employeelastname': { $arrayElemAt: ['$employee.lastname', 0] } } },
                    { $addFields: { 'doctorflag': { $arrayElemAt: ['$employee.doctorflag', 0] } } },
                    { $addFields: { NOW: { $toDate: { $dateToString: { format: "%Y-%m-%d", date: new Date(), timezone: "+07:00" } } } } },
                    { $addFields: { dateNOW: { $dayOfMonth: '$NOW' } } },
                    { $addFields: { DOB: { $toDate: { $dateToString: { format: "%Y-%m-%d", date: "$patients.dateofbirth", timezone: "+07:00" } } } } },
                    { $addFields: { dateDOB: { $dayOfMonth: '$DOB' } } },
                    { $lookup: { from: "welfareadjustmentrequests", localField: "patients.mrn", foreignField: "hospitalnumber", as: "welfareadjustmentrequests" } },
                    { $addFields: { adjamount: { $filter: { input: "$welfareadjustmentrequests", as: "welfareadjustmentrequests", cond: { $and: [
                                            { $eq: [{ $substr: ["$$welfareadjustmentrequests.documentnumber", 3, 2] }, 'CO'] },
                                            { $gte: ["$$welfareadjustmentrequests.transactiondate", new Date(req.fromdate)] },
                                            { $lte: ["$$welfareadjustmentrequests.transactiondate", new Date(req.todate)] },
                                        ] }
                                } } } },
                    { $addFields: { adj: { $sum: '$adjamount.adjustmentamount' } } },
                    {
                        $addFields: {
                            LD: {
                                $cond: {
                                    if: {
                                        $and: [
                                            { "$ne": [{ $month: '$NOW' }, 3] },
                                            { $gt: ['$dateDOB', '$dateNOW'] },
                                            {
                                                $or: [{ "$eq": [{ $month: '$DOB' }, 1] }, { "$eq": [{ $month: '$DOB' }, 3] }, { "$eq": [{ $month: '$DOB' }, 5] },
                                                    { "$eq": [{ $month: '$DOB' }, 7] }, { "$eq": [{ $month: '$DOB' }, 8] }, { "$eq": [{ $month: '$DOB' }, 10] },
                                                    { "$eq": [{ $month: '$DOB' }, 12] }]
                                            }
                                        ]
                                    },
                                    then: 31, else: {
                                        $cond: {
                                            if: {
                                                $and: [
                                                    { "$eq": [{ $month: '$NOW' }, 3] },
                                                    { $gt: ['$dateDOB', '$dateNOW'] },
                                                    { "$eq": [{ $toDate: { $concat: [{ $toString: { $year: '$NOW' } }, '-12-31'] } }, 365] }
                                                ]
                                            },
                                            then: 28, else: {
                                                $cond: {
                                                    if: {
                                                        $and: [
                                                            { "$eq": [{ $month: '$NOW' }, 3] },
                                                            { $gt: ['$dateDOB', '$dateNOW'] },
                                                            { "$eq": [{ $toDate: { $concat: [{ $toString: { $year: '$NOW' } }, '-12-31'] } }, 366] }
                                                        ]
                                                    },
                                                    then: 29, else: 30
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    { $addFields: { year0: { $subtract: [{ $year: '$NOW' }, { $year: "$DOB" }] } } },
                    { $addFields: { month0: { $subtract: [{ $month: '$NOW' }, { $month: "$DOB" }] } } },
                    { $addFields: { date0: { $subtract: [{ $dayOfMonth: '$NOW' }, { $dayOfMonth: "$DOB" }] } } },
                    { $addFields: { year1: '$year0' } },
                    { $addFields: { month1: { $cond: [{ $lt: ["$date0", 0] }, { $subtract: ["$month0", 1] }, "$month0"] }, } },
                    { $addFields: { date1: { $cond: [{ $lt: ["$date0", 0] }, { $add: ['$LD', "$date0"] }, "$date0"] } } },
                    { $addFields: { year2: { $cond: [{ $lt: ["$month1", 0] }, { $subtract: ["$year1", 1] }, "$year1"] } } },
                    { $addFields: { month2: { $cond: [{ $lt: ["$month1", 0] }, { $add: [12, "$month1"] }, "$month1"] } } },
                    { $addFields: { date2: '$date1' } },
                    {
                        $project: {
                            'adj': '$adj',
                            'firstdiag': '$firstdiag',
                            'diag_id': '$diag_id',
                            'diagseq0': '$diagseq0',
                            'doctorflag': '$doctorflag',
                            "IO": { $substr: ["$patientvisits.visitid", 0, 1] },
                            admitdate: { $dateToString: { format: "%d/%m/%Y", date: "$patientvisits.startdate", timezone: "+07:00", onNull: "" } },
                            dischargedate: { $dateToString: { format: "%d/%m/%Y", date: "$patientvisits.medicaldischargedate", timezone: "+07:00", onNull: "" } },
                            HN: "$patients.mrn",
                            EN: '$patientvisits.visitid',
                            visitdate: "$patientvisits.startdate",
                            Document_Number: "$sequencenumber",
                            firstdoctor: "$firstdoctor.code",
                            Patient_Name: {
                                $cond: {
                                    if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] }
                                        }
                                    },
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$patients.isanonymous", true] },
                                            then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] }
                                        }
                                    }
                                }
                            },
                            DOB: { $dateToString: { format: "%d/%m/%Y", date: "$patients.dateofbirth", timezone: "+07:00", onNull: "" } },
                            Age: { $concat: [{ $toString: '$year2' }, ' Y ', { $toString: '$month2' }, ' M ', { $toString: '$date2' }, ' D'] },
                            Gender: { $ifNull: ["$gender.valuedescription", "Unknown"] },
                            DiagType: {
                                $cond: {
                                    if: { $eq: ["$diagnoses.diagnosis.isprimary", true] },
                                    then: 'Primary',
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$diagnoses.diagnosis.isunderlyingdiagnosis", true] },
                                            then: 'Underlying',
                                            else: 'Comorbidity'
                                        }
                                    }
                                }
                            },
                            diagnosistext: { $ifNull: ["$diagnosistext", ""] },
                            ICD10: { $ifNull: ["$problems.code", ""] },
                            ICD10desc: { $ifNull: ["$problems.name", ""] },
                            department: { $ifNull: ["$last_department.name", ""] },
                            Doctor: { $ifNull: ["$doctor.description", ""] },
                            relationship: { $cond: { if: { $eq: [{ $ifNull: ["$welfares.relationship", ""] }, "SELLF"] }, then: "Self", else: "Relative" } },
                            Employee_ID: { $concat: ["0", "$welfares.businessunitempid"] },
                            HCM_Plan_Group: { $ifNull: ["$welfares.plancode", ""] },
                            Payor: '$tpa.name',
                            Agreement: { $ifNull: ['$agreement.name', ""] },
                            Employee_Name: { $concat: [{ $ifNull: ["$employeefirstname", ""] }, " ", { $ifNull: ["$employeelastname", ""] }, " "] },
                            Amount: { $cond: { if: { $eq: ['$diagseq0', "Y"] }, then: "$totalbillamount", else: 0 } },
                            Limit: { $ifNull: ["$plangroups.limitamount", "0"] },
                            Balance: { $ifNull: ["$welfares.balanceamount.balance", "0"] },
                            user: _user.name,
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            cd: '$cd',
                        }
                    },
                    { $match: { doctorflag: 'N' } },
                ])
                    .exec();
                result = resultpatientbills;
            }
            catch (error) {
                this.logger.error('findRTCommon847 error:', error);
            }
            return result;
        });
    }
    findRTCommon848(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let ordercategory = { $match: {} };
            try {
                if (req.ordercategoryuid != '' && req.ordercategoryuid != null) {
                    ordercategory = {
                        $match: {
                            'patientorderitems.ordercatuid': new mongoose_1.Types.ObjectId(req.ordercategoryuid),
                        }
                    };
                }
            }
            catch (res) {
                req.ordercategoryuid = '';
            }
            let ordersubcategory = { $match: {} };
            try {
                if (req.ordersubcategoryuids != '' && req.ordersubcategoryuids != null) {
                    ordersubcategory = {
                        $match: {
                            'patientorderitems.ordercatuid': new mongoose_1.Types.ObjectId(req.ordersubcategoryuids),
                        }
                    };
                }
            }
            catch (res) {
                req.ordersubcategoryuids = '';
            }
            let patientt = { $match: {} };
            try {
                if (req.patientuid != '' && req.patientuid != null) {
                    patientt = {
                        $match: {
                            'patientuid': new mongoose_1.Types.ObjectId(req.patientuid),
                        }
                    };
                }
            }
            catch (res) {
                req.patientuid = '';
            }
            try {
                const resultpatientvisits = yield this.patientordersModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'orderdate': { $gte: new Date(req.fromdate), $lte: new Date(req.todate) },
                            'statusflag': "A",
                        }
                    },
                    { $unwind: { path: '$patientorderitems', preserveNullAndEmptyArrays: true } },
                    patientt,
                    ordercategory,
                    ordersubcategory,
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'departments', localField: "orderdepartmentuid", foreignField: "_id", as: 'orderdepartment' } },
                    { $unwind: { path: "$orderdepartment", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "entypeuid", foreignField: "_id", as: "entype" } },
                    { $unwind: { path: "$entype", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'referencevalues', localField: 'patientorderitems.statusuid', foreignField: '_id', as: 'ordsts' } },
                    { $unwind: { path: '$ordsts', preserveNullAndEmptyArrays: true } },
                    { $match: { 'ordsts.valuedescription': { $ne: 'Cancelled' } } },
                    { $lookup: { from: 'orderitems', localField: 'patientorderitems.orderitemuid', foreignField: '_id', as: 'orderitems' } },
                    { $unwind: { path: '$orderitems', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'ordercategories', localField: 'patientorderitems.ordercatuid', foreignField: '_id', as: 'cat' } },
                    { $unwind: { path: '$cat', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'ordercategories', localField: 'patientorderitems.ordersubcatuid', foreignField: '_id', as: 'subcat' } },
                    { $unwind: { path: '$subcat', preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "patientorderitems.careprovideruid", foreignField: "_id", as: "doctor" } },
                    { $unwind: { path: "$doctor", preserveNullAndEmptyArrays: true } },
                    { $addFields: { IO: { $substr: ["$patientvisits.visitid", 0, 1] } } },
                    { $lookup: { from: "itemmasters", localField: "patientorderitems.orderitemuid", foreignField: "orderitemuid", as: "itemmasters" } },
                    { $unwind: { path: "$itemmasters", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "stockledgers", localField: "itemmasters._id", foreignField: "itemmasteruid", as: "stockledgers" } },
                    { $unwind: { path: "$stockledgers", preserveNullAndEmptyArrays: true } },
                    { $addFields: { "ledgerstore": "$stockledgers.storeuid" } },
                    { $addFields: { store: { $ifNull: ['$ledgerstore', '-'] } } },
                    { $match: { $expr: { $or: [{ $eq: ['$store', '$invstoreuid'] }, { $eq: ['$store', '-'] }] } } },
                    { $addFields: { "wac": { $arrayElemAt: ["$stockledgers.ledgerdetails.wac", -1] } } },
                    { $addFields: { "nextwac": { $arrayElemAt: ["$stockledgers.ledgerdetails.nextwac", -1] } } },
                    {
                        $project: {
                            _id: 0,
                            GroupIO: { $cond: { if: { $eq: ['$IO', "I"] }, then: "IPD", else: "OPD" } },
                            orgname: { $ifNull: ["$organisations.name", ""] },
                            sts1: '$ordsts.valuedescription',
                            entyp: { $cond: { if: { $eq: ['$entype.valuecode', "INPAT"] }, then: "IPD", else: "OPD" } },
                            orderdepartment: { $ifNull: ['$orderdepartment.name', '-'] },
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            Name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                        }
                                    }
                                }
                            },
                            EN: { $ifNull: ['$patientvisits.visitid', '-'] },
                            sequencenumber: '$ordernumber',
                            billdate: { $dateToString: { format: "%Y-%m-%d", date: "$orderdate", timezone: "+07:00", onNull: "-" } },
                            totalbillamount: '$patientorderitems.totalprice',
                            payordiscount: '$patientorderitems.payordiscount',
                            costprice: { $ifNull: [{ $cond: { if: { $eq: ["$nextwac", null] }, then: "$wac", else: "$nextwac" } }, 0] },
                            POM: { $ifNull: ['$patientorderitems.broughtfromoutside', false] },
                            quantity: '$patientorderitems.quantity',
                            orderitemcode: '$patientorderitems.chargecode',
                            orderitemname: '$patientorderitems.orderitemname',
                            cat: '$cat.name',
                            subcat: '$subcat.name',
                            doctor: '$doctor.name',
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    },
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon848 error:', error);
            }
            return result;
        });
    }
    findRTCommon849(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            try {
                const resultpatientvisits = yield this.patientbillsModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'billdate': { $gte: new Date(req.fromdate), $lte: new Date(req.todate) },
                            'iscancelled': false,
                            'statusflag': "A",
                        }
                    },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $addFields: { "reftypeuid": { $arrayElemAt: ["$patientvisits.refererdetail.reftypeuid", 0] } } },
                    { $lookup: { from: "referencevalues", localField: "reftypeuid", foreignField: "_id", as: "referaltype" } },
                    { $unwind: { path: "$referaltype", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $addFields: { "cityuid": { $arrayElemAt: ["$patients.address.cityuid", 0] } } },
                    { $lookup: { from: "cities", localField: "cityuid", foreignField: "_id", as: "cities" } },
                    { $unwind: { path: "$cities", preserveNullAndEmptyArrays: true } },
                    { $addFields: { "stateuid": { $arrayElemAt: ["$patients.address.stateuid", 0] } } },
                    { $lookup: { from: "states", localField: "stateuid", foreignField: "_id", as: "states" } },
                    { $unwind: { path: "$states", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.nationalityuid", foreignField: "_id", as: "nationality" } },
                    { $unwind: { path: "$nationality", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "useruid", foreignField: "_id", as: "cashier" } },
                    { $unwind: { path: "$cashier", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "payors", localField: "payoruid", foreignField: "_id", as: "payors" } },
                    { $unwind: { path: "$payors", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "payors.payortypeuid", foreignField: "_id", as: "payortype" } },
                    { $unwind: { path: "$payortype", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.patienttypeuid", foreignField: "_id", as: "patienttype" } },
                    { $unwind: { path: "$patienttype", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            _id: 0,
                            cities: { $ifNull: ['$cities.name', ''] },
                            states: { $ifNull: ['$states.name', ''] },
                            referaltype: { $ifNull: ['$referaltype.valuedescription', ''] },
                            mrn: { $ifNull: ['$patients.mrn', '-'] },
                            patientname: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                        }
                                    }
                                }
                            },
                            visitid: { $ifNull: ['$patientvisits.visitid', '-'] },
                            isr2c: '$isr2c',
                            sequencenumber: '$sequencenumber',
                            billdate: { $dateToString: { format: "%Y-%m-%d %H:%M", date: "$billdate", timezone: "+07:00", onNull: "-" } },
                            totalbillamount: '$totalbillamount',
                            nationality: '$nationality.valuedescription',
                            payor: '$payors.name',
                            payortype: '$payortype.valuedescription',
                            orgname: { $ifNull: ['$organisations.name', '-'] },
                            fromdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            todate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            cashier: '$cashier.name',
                            printby: _user.name,
                            visitdate: { $dateToString: { format: "%Y-%m-%d %H:%M", date: "$patientvisits.startdate", timezone: "+07:00", onNull: "-" } },
                            patienttype: { $ifNull: ['$patienttype.valuedescription', '-'] },
                        }
                    },
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon849:', error);
            }
            return result;
        });
    }
    findRTCommon850(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            const _user = yield this.findOrgByLoginId(req.loginuid);
            try {
                const resultpatientvisits = yield this.patientvisitsModel.aggregate([
                    { $match: { orguid: new mongoose_1.Types.ObjectId(req.organisationuid), 'startdate': { $gte: new Date(req.fromdate), $lte: new Date(req.todate) }, 'statusflag': "A" } },
                    { $lookup: { from: "referencevalues", localField: "entypeuid", foreignField: "_id", as: "ENTYPE" } },
                    { $unwind: { path: "$ENTYPE", preserveNullAndEmptyArrays: true } },
                    { $match: { "ENTYPE.valuecode": { $ne: 'INPAT' } } },
                    { $lookup: { from: "patientbills", localField: "_id", foreignField: "patientvisituid", as: "patientbills" } },
                    { $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: true } },
                    { $match: { 'patientbills.iscancelled': false, 'patientbills.statusflag': 'A' } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            _id: 0,
                            HN: { $ifNull: ['$patients.mrn', '-'] },
                            Name: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                    else: {
                                        $cond: {
                                            if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                            else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                        }
                                    }
                                }
                            },
                            EN: { $ifNull: ['$visitid', '-'] },
                            sequencenumber: '$patientbills.sequencenumber',
                            visitdate: { $dateToString: { format: "%Y-%m-%d %H:%M", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            billdate: { $dateToString: { format: "%Y-%m-%d %H:%M", date: "$patientbills.billdate", timezone: "+07:00", onNull: "-" } },
                            totalbillamount: '$patientbills.totalbillamount',
                            orgname: { $ifNull: ['$organisations.name', '-'] },
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                            user: _user.name,
                        }
                    },
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon850:', error);
            }
            return result;
        });
    }
    findRTCommon851(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultpatientvisits = yield this.patientbillsModel.aggregate([
                    {
                        $match: {
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'billdate': { $gte: new Date(req.fromdate), $lte: new Date(req.todate) },
                            'iscancelled': false,
                            'statusflag': "A",
                        }
                    },
                    { $lookup: { from: "patientvisits", localField: "patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.nationalityuid", foreignField: "_id", as: "nationality" } },
                    { $unwind: { path: "$nationality", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "payors", localField: "payoruid", foreignField: "_id", as: "payors" } },
                    { $unwind: { path: "$payors", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "payors.payortypeuid", foreignField: "_id", as: "payortype" } },
                    { $unwind: { path: "$payortype", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patientbilleditems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "patientbilleditems.ordertodepartmentuid", foreignField: "_id", as: "ordertodepartment" } },
                    { $unwind: { path: "$ordertodepartment", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "patientbilleditems.departmentuid", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "users", localField: "patientbilleditems.careprovideruid", foreignField: "_id", as: "doctor" } },
                    { $unwind: { path: "$doctor", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: 'orderitems', localField: 'patientbilleditems.orderitemuid', foreignField: '_id', as: 'orderitems' } },
                    { $unwind: { path: '$orderitems', preserveNullAndEmptyArrays: true } },
                    {
                        $group: {
                            _id: {
                                HN: { $ifNull: ['$patients.mrn', '-'] },
                                Name: {
                                    $cond: {
                                        if: { $eq: ["$patients.isanonymous", true] }, then: " Anonymous",
                                        else: {
                                            $cond: {
                                                if: { $eq: ["$preflang.valuedescription", "Thai"] }, then: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                                                else: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] },
                                            }
                                        }
                                    }
                                },
                                EN: { $ifNull: ['$patientvisits.visitid', '-'] },
                                sequencenumber: '$sequencenumber',
                                billdate: { $dateToString: { format: "%Y-%m-%d", date: "$billdate", timezone: "+07:00", onNull: "-" } },
                                totalbillamount: '$totalbillamount',
                                nationality: '$nationality.valuedescription',
                                payortype: '$payortype.valuedescription',
                                ordertodepartment: '$ordertodepartment.name',
                                orderitemname: '$patientbilleditems.orderitemname',
                                orderitemnam: '$orderitems.name',
                                ordernumber: '$patientbilleditems.ordernumber',
                                department: '$departments.name',
                                doctor: '$doctor.name',
                            },
                            netamount: { $sum: '$patientbilleditems.netamount' },
                        }
                    },
                    {
                        $project: {
                            HN: "$_id.HN",
                            Name: "$_id.Name",
                            EN: "$_id.EN",
                            sequencenumber: "$_id.sequencenumber",
                            billdate: "$_id.billdate",
                            totalbillamount: "$_id.totalbillamount",
                            nationality: "$_id.nationality",
                            payortype: "$_id.payortype",
                            ordertodepartment: "$_id.ordertodepartment",
                            orderitemname: "$_id.orderitemname",
                            orderitemnam: "$_id.orderitemnam",
                            department: "$_id.department",
                            doctor: { $ifNull: ["$_id.doctor", "-"] },
                            ordernumber: "$_id.ordernumber",
                            netamount: "$netamount"
                        }
                    },
                ]).exec();
                result = resultpatientvisits;
            }
            catch (error) {
                this.logger.error('findRTCommon851:', error);
            }
            return result;
        });
    }
    findRTCommon854(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultOdrItms = yield this.patientvisitsModel.aggregate([
                    { $match: {
                            '_id': new mongoose_1.Types.ObjectId(req.patientvisituid)
                        } },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientchargecodes", localField: "_id", foreignField: "patientvisituid", as: "patientchargecodes" } },
                    { $unwind: { path: "$patientchargecodes", preserveNullAndEmptyArrays: true } },
                    { $unwind: { path: "$patientchargecodes.chargecodes", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientorders", localField: "_id", foreignField: "patientvisituid", as: "patientorders" } },
                    { $unwind: { path: "$patientorders", preserveNullAndEmptyArrays: true } },
                    { $match: { $expr: { $eq: ['$patientorders.ordernumber', '$patientchargecodes.chargecodes.ordernumber'] } } },
                    { $lookup: { from: "orderitems", localField: "patientchargecodes.chargecodes.orderitemuid", foreignField: "_id", as: "orderitems" } },
                    { $unwind: { path: "$orderitems", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "billingservices", localField: "orderitems.billingserviceuid", foreignField: "_id", as: "billingservice" } },
                    { $unwind: { path: "$billingservice", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "billinggroups", localField: "patientchargecodes.chargecodes.billinggroupuid", foreignField: "_id", as: "billinggroup" } },
                    { $unwind: { path: "$billinggroup", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "billinggroups", localField: "patientchargecodes.chargecodes.billingsubgroupuid", foreignField: "_id", as: "billingsubgroup" } },
                    { $unwind: { path: "$billingsubgroup", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "entypeuid", foreignField: "_id", as: "entype" } },
                    { $unwind: { path: "$entype", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "ordercategories", localField: "orderitems.ordercatuid", foreignField: "_id", as: "ordercate" } },
                    { $unwind: { path: "$ordercate", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "ordercategories", localField: "orderitems.ordersubcatuid", foreignField: "_id", as: "ordersubcate" } },
                    { $unwind: { path: "$ordersubcate", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "orderitems.incomesourceuid", foreignField: "_id", as: "incomesource" } },
                    { $unwind: { path: "$incomesource", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientbills", localField: "patientchargecodes.chargecodes.patientbilluid", foreignField: "_id", as: "patientbills" } },
                    { $unwind: { path: "$patientbills", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "patientchargecodes.chargecodes.departmentuid", foreignField: "_id", as: "departments" } },
                    { $unwind: { path: "$departments", preserveNullAndEmptyArrays: true } },
                    { $addFields: {
                            cost_arry: {
                                $filter: {
                                    input: "$patientbills.patientbilleditems", as: "bill", cond: { $eq: ["$$bill.chargecodeuid", '$patientchargecodes.chargecodes._id'] },
                                }
                            }
                        }
                    },
                    { $addFields: { unitcost: '$cost_arry.unitcost' } },
                    { $unwind: { path: "$unitcost", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            PatientNameEN: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$nametitle.valuedescription', ""] }, ' ', { $ifNull: ['$patients.firstname', ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.middlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.middlename', ' '] } }
                                                    },
                                                    { $ifNull: [{ $ifNull: ['$patients.lastname', ""] }, ""] }]
                                            }, '-']
                                    }
                                }
                            },
                        }
                    },
                    {
                        $addFields: {
                            PatientNameTH: {
                                $cond: {
                                    if: { $eq: ["$patients.isanonymous", true] },
                                    then: { $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, " Anonymous"] },
                                    else: {
                                        $ifNull: [{
                                                $concat: [{ $ifNull: ['$localnametitle.valuedescription', ""] }, ' ', { $ifNull: ["$patients.localfirstname", ""] }, ' ',
                                                    {
                                                        $cond: { if: { $eq: [{ $ifNull: ["$patients.localmiddlename", ""] }, ""] }, then: "", else: { $concat: ['$patients.localmiddlename', ' '] } }
                                                    },
                                                    { $ifNull: ["$patients.locallastname", ""] }]
                                            }, '-']
                                    }
                                }
                            }
                        }
                    },
                    { $project: {
                            hn: '$patients.mrn',
                            en: '$visitid',
                            patientname: { $cond: { if: { $eq: ["$preflang.valuedescription", "Thai"] },
                                    then: { $ifNull: [{ $ifNull: ["$PatientNameTH", ""] }, ""] },
                                    else: { $ifNull: ["$PatientNameEN", ""] }
                                }
                            },
                            encountertype: { $ifNull: ['$entype.valuedescription', ''] },
                            visitstartdate: { $dateToString: { format: "%d/%m/%Y", date: "$startdate", timezone: "+07:00", onNull: "-" } },
                            code: { $ifNull: ['$orderitems.code', ''] },
                            itemname: { $ifNull: ['$orderitems.name', ''] },
                            orderdate: { $dateToString: { format: "%d/%m/%Y %H:%M", date: "$patientorders.orderdate", timezone: "+07:00", onNull: "-" } },
                            activeto: { $ifNull: ['$orderitems.activeto', ''] },
                            itemcost: { $ifNull: ['$unitcost', 0] },
                            itemsale: { $ifNull: ['$patientchargecodes.chargecodes.unitprice', ''] },
                            quantity: { $ifNull: ['$patientchargecodes.chargecodes.quantity', ''] },
                            amount: { $sum: ['$patientchargecodes.chargecodes.netamount', '$patientorderitems.payordiscount'] },
                            discount: { $ifNull: ['$patientchargecodes.chargecodes.payordiscount', 0] },
                            netamount: { $ifNull: ['$patientchargecodes.chargecodes.netamount', 0] },
                            billingservice: { $ifNull: ['$billingservice.name', ''] },
                            categorydescript: { $ifNull: ['$ordercate.description', ''] },
                            billinggroupdescript: { $ifNull: ['$billinggroup.description', ''] },
                            billingsubgroupdescript: { $ifNull: ['$billingsubgroup.description', ''] },
                            servicecategory: { $ifNull: ['$ordercate.description', ''] },
                            incomesource: { $ifNull: ['$incomesource.valuedescription', ''] },
                            ordernumber: { $ifNull: ['$patientchargecodes.chargecodes.ordernumber', ''] },
                            patientbilluid: { $ifNull: ['$patientbills.sequencenumber', ''] },
                            statusflag: { $ifNull: ['$patientchargecodes.chargecodes.statusflag', ''] },
                            chargecodetype: { $ifNull: ['$patientchargecodes.chargecodes.chargecodetype', ''] },
                            department: { $ifNull: ['$departments.name', ''] },
                        } },
                ]).exec();
                result = resultOdrItms;
            }
            catch (error) {
                this.logger.error('findRTCommon854 error:', error);
            }
            return result;
        });
    }
    findRTCommondept1(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDepartments = yield this.departmentsModel.aggregate([
                    { $match: { orguid: new mongoose_1.Types.ObjectId(req.organisationuid) } },
                    { $match: { displayorder: 1, statusflag: "A" } },
                    { $project: { phone: { $ifNull: ["$phone", ""] } }, },
                ]).exec();
                result = resultDepartments;
            }
            catch (error) {
                this.logger.error('findRTCommondept1 error:', error);
            }
            return result;
        });
    }
    findRTCommondept2(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDepartments = yield this.departmentsModel.aggregate([
                    { $match: { orguid: new mongoose_1.Types.ObjectId(req.organisationuid) } },
                    { $match: { displayorder: 2, statusflag: "A" } },
                    { $project: { phone: { $ifNull: ["$phone", ""] } }, },
                ]).exec();
                result = resultDepartments;
            }
            catch (error) {
                this.logger.error('findRTCommondept2 error:', error);
            }
            return result;
        });
    }
    findOrganisation(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultDepartments = yield this.organisationsModel.aggregate([
                    { $match: {
                            'statusflag': "A",
                            '_id': new mongoose_1.Types.ObjectId(req.organisationuid)
                        } },
                    { $lookup: { from: "organisationimages", localField: "organisationimageuid", foreignField: "_id", as: "orgimage" } },
                    { $unwind: { path: "$orgimage", preserveNullAndEmptyArrays: true } },
                    { $project: {
                            "name": "$name",
                            "code": "$code",
                            "address": "$address",
                            "isgstregistered": "$isgstregistered",
                            "businessregno": "$businessregno",
                            "companyname": "$companyname",
                            "gstregno": "$gstregno",
                            "contact": "$contact",
                            "orgimage": "$orgimage.organisationphoto"
                        } }
                ]).exec();
                result = resultDepartments;
            }
            catch (error) {
                this.logger.error('findRTCommondept2 error:', error);
            }
            return result;
        });
    }
    findFooterdetails(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const _user = yield this.findOrgByLoginId(req.loginuid);
                const resultFooterdetails = yield this.ReportconfigurationsModel.aggregate([
                    { $match: {
                            'statusflag': "A",
                            'orguid': new mongoose_1.Types.ObjectId(req.organisationuid),
                            'reporttemplateuid': new mongoose_1.Types.ObjectId(req.reporttemplateuid)
                        } },
                    { $project: {
                            "remarks": "$remarks",
                            "instructionline1": "$instructionline1",
                            "instructionline2": "$instructionline2",
                            "documentno": "$documentno",
                            "comments": "$comments",
                            "documenttype": "$documenttype",
                            user: _user.name,
                            STAFFNAMETH: _user.description,
                            STAFFNAMEEN: _user.printname
                        }
                    }
                ]).exec();
                result = resultFooterdetails;
            }
            catch (error) {
                this.logger.error('findFooterdetails error:', error);
            }
            return result;
        });
    }
    findCounterVisitbyNation(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultCounterVisitbyNation = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            createdat: {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: "A",
                            "visitcareproviders.isprimarycareprovider": true
                        }
                    },
                    {
                        $addFields: { "lastdepartment": { $arrayElemAt: ['$visitcareproviders.departmentuid', -1] }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "lastdepartment",
                            foreignField: "_id",
                            as: "Last_departments"
                        }
                    },
                    {
                        $unwind: { path: "$Last_departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.nationalityuid",
                            foreignField: "_id",
                            as: "nationality"
                        }
                    },
                    {
                        $unwind: { path: "$nationality", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.genderuid",
                            foreignField: "_id",
                            as: "sex"
                        }
                    },
                    {
                        $unwind: { path: "$sex", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "titleTH"
                        }
                    },
                    {
                        $unwind: { path: "$titleTH", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "titleEN"
                        }
                    },
                    {
                        $unwind: { path: "$titleEN", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "admissionrequests",
                            localField: "admissionrequestuid",
                            foreignField: "_id",
                            as: "admission"
                        }
                    },
                    {
                        $unwind: { path: "$admission", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: { _id: 0,
                            HN: "$patients.mrn",
                            EN: "$visitid",
                            TitleTH: "$titleTH.valuedescription",
                            PatientNameTH: "$patients.localfirstname",
                            PatientLastNameTH: "$patients.locallastname",
                            TitleEN: "$titleEN.valuedescription",
                            PatientNameEN: "$patients.firstname",
                            PatientLastNameEN: "$patients.lastname",
                            Sex: "$sex.valuedescription",
                            SexTH: "$sex.locallanguagedesc",
                            DOB: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$patients.dateofbirth", timezone: "+07:00" } },
                            Age: { $trunc: { $divide: [{ $subtract: [new Date(), "$patients.dateofbirth"] }, (365 * 24 * 60 * 60 * 1000)] } },
                            VisitDate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$createdat", timezone: "+07:00" } },
                            AdmissionDate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$admission.admissiondate", timezone: "+07:00" } },
                            DischargeDate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$medicaldischargedate", timezone: "+07:00" } },
                            AdmissionType: "$isconvertedfromopd",
                            PateintLocation: "$Last_departments.name",
                            Nationality: "$nationality.valuedescription",
                            LOS: { $ifNull: [{ $ceil: { $divide: [{ $subtract: ["$medicaldischargedate", "$createdat"] }, 1000 * 3600 * 24] } }, "-"] }
                        }
                    },
                ]).exec();
                result = resultCounterVisitbyNation;
            }
            catch (error) {
                this.logger.error('findCounterVisitbyNation error:', error);
            }
            return result;
        });
    }
    findSTATConsultByDept(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultSTATConsultByDept = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            createdat: {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            },
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            statusflag: "A",
                            "visitcareproviders.isprimarycareprovider": true
                        }
                    },
                    {
                        $addFields: { "lastdepartment": { $arrayElemAt: ['$visitcareproviders.departmentuid', -1] }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "lastdepartment",
                            foreignField: "_id",
                            as: "Last_departments"
                        }
                    },
                    {
                        $unwind: { path: "$Last_departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.nationalityuid",
                            foreignField: "_id",
                            as: "nationality"
                        }
                    },
                    {
                        $unwind: { path: "$nationality", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.genderuid",
                            foreignField: "_id",
                            as: "sex"
                        }
                    },
                    {
                        $unwind: { path: "$sex", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "titleTH"
                        }
                    },
                    {
                        $unwind: { path: "$titleTH", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "titleEN"
                        }
                    },
                    {
                        $unwind: { path: "$titleEN", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "admissionrequests",
                            localField: "admissionrequestuid",
                            foreignField: "_id",
                            as: "admission"
                        }
                    },
                    {
                        $unwind: { path: "$admission", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "consultrequests",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "consultrequests"
                        }
                    },
                    {
                        $unwind: { path: "$consultrequests", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: { "consultrequests.ischeckedin": true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "consultrequests.referredto",
                            foreignField: "_id",
                            as: "consultdepartments"
                        }
                    },
                    {
                        $unwind: { path: "$consultdepartments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            HN: "$patients.mrn",
                            EN: "$visitid",
                            TitleTH: "$titleTH.valuedescription",
                            PatientNameTH: "$patients.localfirstname",
                            PatientLastNameTH: "$patients.locallastname",
                            TitleEN: "$titleEN.valuedescription",
                            PatientNameEN: "$patients.firstname",
                            PatientLastNameEN: "$patients.lastname",
                            Sex: "$sex.valuedescription",
                            SexTH: "$sex.locallanguagedesc",
                            DOB: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$patients.dateofbirth", timezone: "+07:00" } },
                            Age: { $trunc: { $divide: [{ $subtract: [new Date(), "$patients.dateofbirth"] }, (365 * 24 * 60 * 60 * 1000)] } },
                            VisitDate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$createdat", timezone: "+07:00" } },
                            AdmissionDate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$admission.admissiondate", timezone: "+07:00" } },
                            DischargeDate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$medicaldischargedate", timezone: "+07:00" } },
                            AdmissionType: "$isconvertedfromopd",
                            PateintLocation: "$Last_departments.name",
                            ConsultDept: "$consultdepartments.name",
                            ConsutlDate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$consultrequests.referraldate", timezone: "+07:00" } },
                            Nationality: "$nationality.valuedescription",
                            LOS: { $ifNull: [{ $ceil: { $divide: [{ $subtract: ["$medicaldischargedate", "$createdat"] }, 1000 * 3600 * 24] } }, "-"] }
                        }
                    }
                ]).exec();
                result = resultSTATConsultByDept;
            }
            catch (error) {
                this.logger.error('findSTATConsultByDept error:', error);
            }
            return result;
        });
    }
    findPTRevisit2Day(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultPTRevisit2Day = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            statusflag: "A",
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            'medicaldischargedate': { $ne: null,
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    { $lookup: { from: "patients", localField: "patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $group: { _id: { orguid: "$orguid",
                                patientuid: "$patientuid",
                                HN: "$patients.mrn",
                                vidname: "$patients.localfirstname",
                                vidlenname: "$patients.locallastname",
                                Age: { $trunc: { $divide: [{ $subtract: [new Date(), "$patients.dateofbirth"] }, (365 * 24 * 60 * 60 * 1000)] } },
                            },
                            lastdischgdate: { $max: "$medicaldischargedate" }, visitid: { $max: "$visitid" }, visituid: { $max: "$_id" } } },
                    { $project: { _id: 0,
                            HN: '$_id.HN',
                            Age: '$_id.Age',
                            vidname: '$_id.vidname',
                            vidlenname: '$_id.vidlenname',
                            lastdischgdate: '$lastdischgdate',
                            visitid: '$visitid',
                            visituid: '$visituid',
                            patientuid: '$_id.patientuid',
                            orguid: '$_id.orguid',
                        } },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientvisits", localField: "visituid", foreignField: "_id", as: "patientvisits1" } },
                    { $unwind: { path: "$patientvisits1", preserveNullAndEmptyArrays: true } },
                    { $addFields: { isPrimary: { $arrayElemAt: [{ $filter: { input: "$patientvisits1.visitcareproviders", as: "vs", cond: { $eq: ["$$vs.isprimarycareprovider", true] } } }, -1] } } },
                    { $lookup: { from: "users", localField: "isPrimary.careprovideruid", foreignField: "_id", as: "users" } },
                    { $unwind: { path: "$users", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "appointmentschedules", localField: "patientuid", foreignField: "slots.patientuid", as: "appointmentschedules" } },
                    { $unwind: { path: "$appointmentschdules.appointmentdate", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "appointmentschedules.slots.servicetypeuid", foreignField: "_id", as: "servietypes" } },
                    { $unwind: { path: "$servietypes", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "diagnoses", localField: "visituid", foreignField: "patientvisituid", as: "diagnoses" } },
                    { $addFields: { diagnoses1: { $min: "$diagnoses._id" } } },
                    { $lookup: { from: "diagnoses", localField: "diagnoses1", foreignField: "_id", as: "diagnoses2" } },
                    { $unwind: { path: "$diagnoses2", preserveNullAndEmptyArrays: true } },
                    { $addFields: { "first_problem": { $arrayElemAt: ["$diagnoses2.diagnosis.problemuid", 0] } } },
                    { $lookup: { from: "problems", localField: "first_problem", foreignField: "_id", as: "problems" } },
                    { $unwind: { path: "$problems", preserveNullAndEmptyArrays: true } },
                    { $project: { _id: 0, name: "$organisations.name",
                            admdate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$patientvisits1.startdate", timezone: "+07:00" } },
                            HN: '$HN',
                            EN: "$visitid",
                            vidname: "$vidname",
                            vidlenname: "$vidlenname",
                            Age: "$Age",
                            careproviderName: { $ifNull: ["$users.name", "-"] },
                            code: { $ifNull: ["$problems.code", "-"] },
                            ICDDesc: { $ifNull: ["$problems.name", "-"] },
                            servie: { $ifNull: ["$servietypes.valuedescription", "-"] },
                            PreviousDishDate: '$lastdischgdate',
                        } }
                ]).exec();
                result = resultPTRevisit2Day;
            }
            catch (error) {
                this.logger.error('findPTRevisit2Day error:', error);
            }
            return result;
        });
    }
    findSTATdiagnosis(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultSTATdiagnosis = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            statusflag: "A",
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            medicaldischargedate: {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    {
                        $addFields: {
                            "lastdepartment": { $arrayElemAt: ['$visitcareproviders.departmentuid', -1] }
                        }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "lastdepartment",
                            foreignField: "_id",
                            as: "Last_departments"
                        }
                    },
                    {
                        $unwind: { path: "$Last_departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "diagnoses",
                            localField: "_id",
                            foreignField: "patientvisituid",
                            as: "diagnoses"
                        }
                    },
                    {
                        $unwind: { path: "$diagnoses", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $addFields: {
                            "lastcoder": { $arrayElemAt: ["$diagnoses.diagnosis.careprovideruid", -1] }
                        }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "lastcoder",
                            foreignField: "_id",
                            as: "codername"
                        }
                    },
                    {
                        $unwind: { path: "$codername", preserveNullAndEmptyArrays: true }
                    },
                    { $unwind: { path: "$diagnoses.diagnosis", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "problems",
                            localField: "diagnoses.diagnosis.problemuid",
                            foreignField: "_id",
                            as: "code"
                        }
                    },
                    {
                        $unwind: { path: "$code", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "users", localField: "diagnoses.diagnosis.careprovideruid", foreignField: "_id", as: "doctor" } },
                    { $unwind: { path: "$doctor", preserveNullAndEmptyArrays: true } },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.nationalityuid",
                            foreignField: "_id",
                            as: "nationality"
                        }
                    },
                    {
                        $unwind: { path: "$nationality", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.genderuid",
                            foreignField: "_id",
                            as: "sex"
                        }
                    },
                    {
                        $unwind: { path: "$sex", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.localnametitleuid",
                            foreignField: "_id",
                            as: "titleTH"
                        }
                    },
                    {
                        $unwind: { path: "$titleTH", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.titleuid",
                            foreignField: "_id",
                            as: "titleEN"
                        }
                    },
                    {
                        $unwind: { path: "$titleEN", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "admissionrequests",
                            localField: "admissionrequestuid",
                            foreignField: "_id",
                            as: "admission"
                        }
                    },
                    {
                        $unwind: { path: "$admission", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.nationalityuid",
                            foreignField: "_id",
                            as: "nationality"
                        }
                    },
                    {
                        $unwind: { path: "$nationality", preserveNullAndEmptyArrays: true }
                    },
                    { $lookup: { from: "referencevalues", localField: "diagnoses.diagnosis.comorbidityuid", foreignField: "_id", as: "comorbidity" } },
                    { $unwind: { path: "$comorbidity", preserveNullAndEmptyArrays: true } },
                    {
                        $project: {
                            _id: 0,
                            HN: "$patients.mrn",
                            EN: "$visitid",
                            TitleTH: "$titleTH.valuedescription",
                            PatientNameTH: "$patients.localfirstname",
                            PatientLastNameTH: "$patients.locallastname",
                            TitleEN: "$titleEN.valuedescription",
                            PatientNameEN: "$patients.firstname",
                            PatientLastNameEN: "$patients.lastname",
                            Sex: "$sex.valuedescription",
                            SexTH: "$sex.locallanguagedesc",
                            DOB: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$patients.dateofbirth", timezone: "+07:00" } },
                            Age: { $trunc: { $divide: [{ $subtract: [new Date(), "$patients.dateofbirth"] }, (365 * 24 * 60 * 60 * 1000)] } },
                            VisitDate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$createdat", timezone: "+07:00" } },
                            AdmissionDate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$startdate", timezone: "+07:00" } },
                            DischargeDate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$medicaldischargedate", timezone: "+07:00" } },
                            AdmissionType: "$isconvertedfromopd",
                            PateintLocation: "$Last_departments.name",
                            DiagnosisCode: "$code.code",
                            DiagnosisName: "$code.name",
                            DiagPrimary: '$diagnoses.diagnosis.isprimary',
                            comorbid: { $ifNull: ['$comorbidity.valuedescription', ""] },
                            externalcause: '$diagnoses.diagnosis.externalcause',
                            CoderName: "$doctor.name",
                            Nationality: "$nationality.valuedescription",
                            LOS: { $ifNull: [{ $ceil: { $divide: [{ $subtract: ["$medicaldischargedate", "$createdat"] }, 1000 * 3600 * 24] } }, "-"] },
                            startdate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.fromdate), timezone: "+07:00", onNull: "-" } },
                            enddate: { $dateToString: { format: "%d/%m/%Y", date: new Date(req.todate), timezone: "+07:00", onNull: "-" } },
                        }
                    }
                ]).exec();
                result = resultSTATdiagnosis;
            }
            catch (error) {
                this.logger.error('findSTATdiagnosis error:', error);
            }
            return result;
        });
    }
    findSTATPTVIP(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultSTATPTVIP = yield this.patientvisitsModel.aggregate([
                    {
                        $match: {
                            statusflag: "A",
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            'startdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    {
                        $addFields: {
                            isPrimary: { $arrayElemAt: [{
                                        $filter: {
                                            input: "$visitcareproviders",
                                            as: "vs",
                                            cond: { $eq: ["$$vs.isprimarycareprovider", true] }
                                        }
                                    }, -1]
                            }
                        }
                    },
                    {
                        $lookup: {
                            from: "organisations",
                            localField: "orguid",
                            foreignField: "_id",
                            as: "organisations"
                        }
                    },
                    {
                        $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "departments",
                            localField: "visitcareproviders.departmentuid",
                            foreignField: "_id",
                            as: "departments"
                        }
                    },
                    {
                        $unwind: { path: "$departments", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "patients",
                            localField: "patientuid",
                            foreignField: "_id",
                            as: "patients"
                        }
                    },
                    {
                        $unwind: { path: "$patients", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $match: {
                            "patients.isvip": true
                        }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.nationalityuid",
                            foreignField: "_id",
                            as: "ref_nationality"
                        }
                    },
                    {
                        $unwind: { path: "$ref_nationality", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "users",
                            localField: "isPrimary.careprovideruid",
                            foreignField: "_id",
                            as: "users"
                        }
                    },
                    {
                        $unwind: { path: "$users", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "users.specialtyuid",
                            foreignField: "_id",
                            as: "specialty"
                        }
                    },
                    {
                        $unwind: { path: "$specialty", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "appointmentschedules",
                            localField: "patients._id",
                            foreignField: "slots.patientuid",
                            as: "appointmentschedules"
                        }
                    },
                    {
                        $unwind: { path: "$appointmentschdules.appointmentdate", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "appointmentschedules.slots.servicetypeuid",
                            foreignField: "_id",
                            as: "servietypes"
                        }
                    },
                    {
                        $unwind: { path: "$servietypes", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $lookup: {
                            from: "referencevalues",
                            localField: "patients.genderuid",
                            foreignField: "_id",
                            as: "sex"
                        }
                    },
                    {
                        $unwind: { path: "$sex", preserveNullAndEmptyArrays: true }
                    },
                    {
                        $project: {
                            name: "$organisations.name",
                            departments: "$departments.name",
                            vidname: "$patients.localfirstname",
                            vidlenname: "$patients.locallastname",
                            HN: "$patients.mrn",
                            EN: "$visitid",
                            birth: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$patients.dateofbirth", timezone: "+07:00" } },
                            Age: { $trunc: { $divide: [{ $subtract: [new Date(), "$patients.dateofbirth"] }, (365 * 24 * 60 * 60 * 1000)] } },
                            Sex: "$sex.valuedescription",
                            SexTH: "$sex.locallanguagedesc",
                            vip: "$patients.isvip",
                            nationality: "$ref_nationality.valuedescription",
                            appointment: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$appointmentschdules.appointmentdate", timezone: "+07:00" } },
                            servie: "$servietypes.valuedescription",
                            createdat: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$patients.createdat", timezone: "+07:00" } },
                            visitdate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$startdate", timezone: "+07:00" } },
                            admdate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$startdate", timezone: "+07:00" } },
                            dischgdate: { "$dateToString": { "format": "%Y-%m-%d %H:%M", "date": "$medicaldischargedate", timezone: "+07:00" } },
                            isPrimary0: "$isPrimary.isprimarycareprovider",
                            isPrimary1: "$isPrimary.isprimarycareprovider",
                            careproviderName: "$users.name",
                            specialty: "$specialty.valuedescription",
                        }
                    }
                ]).exec();
                result = resultSTATPTVIP;
            }
            catch (error) {
                this.logger.error('findSTATPTVIP error:', error);
            }
            return result;
        });
    }
    findSTATVPIAppointment(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultSTATVPIAppointment = yield this.AppointmentschedulesModel.aggregate([
                    {
                        $match: {
                            statusflag: "A",
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            'startdate': {
                                $gte: dateutils_1.default.convertGMTtoUTC(new Date(req.fromdate)),
                                $lte: dateutils_1.default.convertGMTtoUTC(new Date(req.todate))
                            }
                        }
                    },
                    { $lookup: { from: "organisations", localField: "orguid", foreignField: "_id", as: "organisations" } },
                    { $unwind: { path: "$organisations", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patients", localField: "slots.patientuid", foreignField: "_id", as: "patients" } },
                    { $unwind: { path: "$patients", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.titleuid", foreignField: "_id", as: "nametitle" } },
                    { $unwind: { path: "$nametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.localnametitleuid", foreignField: "_id", as: "localnametitle" } },
                    { $unwind: { path: "$localnametitle", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "patients.preflanguid", foreignField: "_id", as: "preflang" } },
                    { $unwind: { path: "$preflang", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "referencevalues", localField: "slots.statusuid", foreignField: "_id", as: "status" } },
                    { $unwind: { path: "$status", preserveNullAndEmptyArrays: true } },
                    {
                        $addFields: {
                            "slots": { $arrayElemAt: ["$slots", 0] }
                        }
                    },
                    {
                        $project: {
                            StatusFlag: "$statusflag",
                            BU: "$organisations.code",
                            HN: "$patients.mrn",
                            Appointment_Date: { $dateToString: { format: "%Y-%m-%d", date: "$appointmentdate", timezone: "+07:00" } },
                            StartTime: { $dateToString: { format: "%H:%M:%S", date: "$slots.start", timezone: "+07:00" } },
                            End_Time: { $dateToString: { format: "%H:%M:%S", date: "$slots.end", timezone: "+07:00" } },
                            Status_Book: "$status.valuedescription",
                            Patient_Name_T: { $concat: [{ $ifNull: ["$localnametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.localfirstname", ""] }, " ", { $ifNull: ["$patients.localmiddlename", ""] }, " ", { $ifNull: ["$patients.locallastname", ""] }] },
                            Patient_Name_E: { $concat: [{ $ifNull: ["$nametitle.valuedescription", ""] }, " ", { $ifNull: ["$patients.firstname", ""] }, " ", { $ifNull: ["$patients.middlename", ""] }, " ", { $ifNull: ["$patients.lastname", ""] }] }
                        }
                    }
                ]).exec();
                result = resultSTATVPIAppointment;
            }
            catch (error) {
                this.logger.error('findSTATVPIAppointment error:', error);
            }
            return result;
        });
    }
    findSTATConsultDept(req) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            try {
                const resultSTATConsultDept = yield this.departmentsModel.aggregate([
                    {
                        $match: {
                            statusflag: "A",
                            orguid: new mongoose_1.Types.ObjectId(req.organisationuid),
                            "overrideorderfromdept": true
                        }
                    },
                    { $lookup: { from: "consultrequests", localField: "_id", foreignField: "referringdepartmentuid", as: "consultrequests" } },
                    { $unwind: { path: "$consultrequests", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "consultrequests.referringdepartmentuid", foreignField: "_id", as: "referredfrom" } },
                    { $unwind: { path: "$referredfrom", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "departments", localField: "consultrequests.referredto", foreignField: "_id", as: "referredto" } },
                    { $unwind: { path: "$referredto", preserveNullAndEmptyArrays: true } },
                    { $lookup: { from: "patientvisits", localField: "consultrequests.patientvisituid", foreignField: "_id", as: "patientvisits" } },
                    { $unwind: { path: "$patientvisits", preserveNullAndEmptyArrays: true } },
                    { $project: { _id: 0,
                            "name": "$name",
                            "referredto": { $ifNull: ["$referredto.name", ""] },
                            "EN": { $ifNull: ["$patientvisits.visitid", ""] },
                            "referraldate": { $ifNull: ["$consultrequests.referraldate", ""] },
                            "cnt": { $cond: { if: { $and: [
                                            { $gte: ['$consultrequests.referraldate', new Date(req.fromdate)] },
                                            { $lte: ['$consultrequests.referraldate', new Date(req.todate)] }
                                        ] },
                                    then: 1, else: 0 } },
                        } },
                    { $group: { _id: { name: '$name', referredto: '$referredto' }, total: { $sum: '$cnt' } } },
                    { $project: { _id: 0, "name": "$_id.name", "referredto": "$_id.referredto", "total": "$total" } },
                    { $match: { name: { $ne: 'Ambulance Service' } } },
                    { $sort: { "name": 1, referredto: 1 } }
                ]).exec();
                result = resultSTATConsultDept;
            }
            catch (error) {
                this.logger.error('findSTATConsultDept error:', error);
            }
            return result;
        });
    }
    findOrgByLoginId(loginuid) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let user = yield this.usersModel.findById(loginuid)
                    .populate({
                    path: 'orguid',
                    select: 'companyname organisationimageuid',
                    populate: { path: 'organisationimageuid', select: 'organisationphoto' }
                })
                    .exec();
                return user;
            }
            catch (error) {
                this.logger.error('findOrgByLoginId error:', error);
            }
        });
    }
    findDivisionByCodeANDOrg(code, orguid) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reporttemplates = yield this.ReporttemplatesModel
                    .find({ 'code': code }).select('_id').exec();
                let reportconfigurations = yield this.ReportconfigurationsModel
                    .find({ "reporttemplateuid": reporttemplates[0]._id, 'orguid': orguid }).select('documentno').exec();
                return reportconfigurations[0].documentno;
            }
            catch (error) {
                this.logger.error('findDivision error:', error);
            }
        });
    }
};
ReportsService = __decorate([
    common_1.Injectable(),
    __param(1, mongoose_2.InjectModel('alerts')),
    __param(2, mongoose_2.InjectModel('departments')),
    __param(3, mongoose_2.InjectModel('diagnoses')),
    __param(4, mongoose_2.InjectModel('inventorystores')),
    __param(5, mongoose_2.InjectModel('itemmasters')),
    __param(6, mongoose_2.InjectModel('ordercategories')),
    __param(7, mongoose_2.InjectModel('orderitems')),
    __param(8, mongoose_2.InjectModel('organisationimages')),
    __param(9, mongoose_2.InjectModel('organisations')),
    __param(10, mongoose_2.InjectModel('patientbills')),
    __param(11, mongoose_2.InjectModel('patientprocedures')),
    __param(12, mongoose_2.InjectModel('patients')),
    __param(13, mongoose_2.InjectModel('patientvisits')),
    __param(14, mongoose_2.InjectModel('problems')),
    __param(15, mongoose_2.InjectModel('procedures')),
    __param(16, mongoose_2.InjectModel('referencevalues')),
    __param(17, mongoose_2.InjectModel('users')),
    __param(18, mongoose_2.InjectModel('beds')),
    __param(19, mongoose_2.InjectModel('ipfillorders')),
    __param(20, mongoose_2.InjectModel('wards')),
    __param(21, mongoose_2.InjectModel('patientorders')),
    __param(22, mongoose_2.InjectModel('billinggroups')),
    __param(23, mongoose_2.InjectModel('tpas')),
    __param(24, mongoose_2.InjectModel('tariffs')),
    __param(25, mongoose_2.InjectModel('payors')),
    __param(26, mongoose_2.InjectModel('areas')),
    __param(27, mongoose_2.InjectModel('states')),
    __param(28, mongoose_2.InjectModel('cities')),
    __param(29, mongoose_2.InjectModel('countries')),
    __param(30, mongoose_2.InjectModel('allergies')),
    __param(31, mongoose_2.InjectModel('labresults')),
    __param(32, mongoose_2.InjectModel('deposits')),
    __param(33, mongoose_2.InjectModel('goodsreceives')),
    __param(34, mongoose_2.InjectModel('stockadjusts')),
    __param(35, mongoose_2.InjectModel('stocktransfers')),
    __param(36, mongoose_2.InjectModel('welfares')),
    __param(37, mongoose_2.InjectModel('welfareadjustmentrequests')),
    __param(38, mongoose_2.InjectModel('dispensereturns')),
    __param(39, mongoose_2.InjectModel('appointmentschedules')),
    __param(40, mongoose_2.InjectModel('drugmasters')),
    __param(41, mongoose_2.InjectModel('druggroups')),
    __param(42, mongoose_2.InjectModel('druggeneric')),
    __param(43, mongoose_2.InjectModel('translations')),
    __param(44, mongoose_2.InjectModel('stockdispenses')),
    __param(45, mongoose_2.InjectModel('stockledgers')),
    __param(46, mongoose_2.InjectModel('stockrequests')),
    __param(47, mongoose_2.InjectModel('manufacturedetails')),
    __param(48, mongoose_2.InjectModel('mrdcodings')),
    __param(49, mongoose_2.InjectModel('mrdfolders')),
    __param(50, mongoose_2.InjectModel('reportconfigurations')),
    __param(51, mongoose_2.InjectModel('reporttemplates')),
    __param(52, mongoose_2.InjectModel('patientchargecodes')),
    __param(53, mongoose_2.InjectModel('patientforms')),
    __param(54, mongoose_2.InjectModel('patientformdetails')),
    __param(55, mongoose_2.InjectModel('ordersets')),
    __param(56, mongoose_2.InjectModel('printerconfigurations')),
    __param(57, mongoose_2.InjectModel('creditnotes')),
    __metadata("design:paramtypes", [logger_1.ConsoleLogger, Object, mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model,
        mongoose_1.Model])
], ReportsService);
exports.ReportsService = ReportsService;
//# sourceMappingURL=reports.service.js.map